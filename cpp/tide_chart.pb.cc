// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tide_chart.proto

#include "tide_chart.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TideChartCommentBox_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TideChartLink_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TideChartMessage_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TideChartMoveCommand_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TideChartNote_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TideChartPort_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TideChartProperty_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TideChartSource_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<16> scc_info_TideChartCommand_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartCommentBoxCommand_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartContextChange_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartLinkCommand_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartLogEntry_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartNodeCommand_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartNoteCommand_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartPortCommand_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartPropertyCommand_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartRegionCommand_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartSite_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartWidgetCommand_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TideChartWidget_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TideChartRegion_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TideChartNode_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_TideChartData_tide_5fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_TideChartContext_tide_5fchart_2eproto;
class TideChartPropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartProperty> _instance;
  bool boolvalue_;
  ::google::protobuf::internal::ArenaStringPtr strvalue_;
  ::google::protobuf::int64 longvalue_;
  double doublevalue_;
} _TideChartProperty_default_instance_;
class TideChartCommentBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartCommentBox> _instance;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
} _TideChartCommentBox_default_instance_;
class TideChartWidgetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartWidget> _instance;
  ::google::protobuf::internal::ArenaStringPtr link_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  ::google::protobuf::internal::ArenaStringPtr node_;
} _TideChartWidget_default_instance_;
class TideChartPortDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartPort> _instance;
} _TideChartPort_default_instance_;
class TideChartLinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartLink> _instance;
} _TideChartLink_default_instance_;
class TideChartNoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartNote> _instance;
} _TideChartNote_default_instance_;
class TideChartNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartNode> _instance;
} _TideChartNode_default_instance_;
class TideChartRegionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartRegion> _instance;
} _TideChartRegion_default_instance_;
class TideChartGraphDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartGraph> _instance;
} _TideChartGraph_default_instance_;
class TideChartCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartCommand> _instance;
  const ::TideChartGroupCommand* group_;
  const ::TideChartMoveCommand* move_;
  const ::TideChartCommentBoxCommand* comment_;
  const ::TideChartWidgetCommand* widget_;
  const ::TideChartPortCommand* port_;
  const ::TideChartLinkCommand* link_;
  const ::TideChartNodeCommand* node_;
  const ::TideChartRegionCommand* region_;
  const ::TideChartGraphCommand* graph_;
  const ::TideChartPropertyCommand* props_;
  const ::TideChartNoteCommand* note_;
} _TideChartCommand_default_instance_;
class TideChartGroupCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartGroupCommand> _instance;
} _TideChartGroupCommand_default_instance_;
class TideChartMoveCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartMoveCommand> _instance;
} _TideChartMoveCommand_default_instance_;
class TideChartCommentBoxCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartCommentBoxCommand> _instance;
} _TideChartCommentBoxCommand_default_instance_;
class TideChartWidgetCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartWidgetCommand> _instance;
} _TideChartWidgetCommand_default_instance_;
class TideChartPortCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartPortCommand> _instance;
} _TideChartPortCommand_default_instance_;
class TideChartLinkCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartLinkCommand> _instance;
} _TideChartLinkCommand_default_instance_;
class TideChartNodeCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartNodeCommand> _instance;
} _TideChartNodeCommand_default_instance_;
class TideChartRegionCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartRegionCommand> _instance;
} _TideChartRegionCommand_default_instance_;
class TideChartGraphCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartGraphCommand> _instance;
} _TideChartGraphCommand_default_instance_;
class TideChartPropertyCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartPropertyCommand> _instance;
  ::google::protobuf::internal::ArenaStringPtr node_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::internal::ArenaStringPtr widget_;
  ::google::protobuf::internal::ArenaStringPtr graph_;
} _TideChartPropertyCommand_default_instance_;
class TideChartNoteCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartNoteCommand> _instance;
  ::google::protobuf::internal::ArenaStringPtr node_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::internal::ArenaStringPtr graph_;
} _TideChartNoteCommand_default_instance_;
class TideChartSourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartSource> _instance;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr script_;
} _TideChartSource_default_instance_;
class TideChartLibraryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartLibrary> _instance;
} _TideChartLibrary_default_instance_;
class TideChartSiteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartSite> _instance;
} _TideChartSite_default_instance_;
class TideChartMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartMessage> _instance;
  ::google::protobuf::internal::ArenaStringPtr jsoncontent_;
  ::google::protobuf::internal::ArenaStringPtr msgcontent_;
} _TideChartMessage_default_instance_;
class TideChartContextChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartContextChange> _instance;
} _TideChartContextChange_default_instance_;
class TideChartLogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartLogEntry> _instance;
} _TideChartLogEntry_default_instance_;
class TideChartContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartContext> _instance;
} _TideChartContext_default_instance_;
class TideChartDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartData> _instance;
} _TideChartData_default_instance_;
class TideChartHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartHeader> _instance;
} _TideChartHeader_default_instance_;
class TideChartFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartFile> _instance;
} _TideChartFile_default_instance_;
class TideChartFileHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartFileHeader> _instance;
} _TideChartFileHeader_default_instance_;
class TideChartFileCurrentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TideChartFileCurrent> _instance;
} _TideChartFileCurrent_default_instance_;
static void InitDefaultsTideChartProperty_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartProperty_default_instance_;
    new (ptr) ::TideChartProperty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartProperty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TideChartProperty_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTideChartProperty_tide_5fchart_2eproto}, {}};

static void InitDefaultsTideChartCommentBox_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartCommentBox_default_instance_;
    new (ptr) ::TideChartCommentBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartCommentBox::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TideChartCommentBox_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTideChartCommentBox_tide_5fchart_2eproto}, {}};

static void InitDefaultsTideChartWidget_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartWidget_default_instance_;
    new (ptr) ::TideChartWidget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartWidget::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartWidget_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartWidget_tide_5fchart_2eproto}, {
      &scc_info_TideChartProperty_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartPort_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartPort_default_instance_;
    new (ptr) ::TideChartPort();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartPort::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TideChartPort_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTideChartPort_tide_5fchart_2eproto}, {}};

static void InitDefaultsTideChartLink_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartLink_default_instance_;
    new (ptr) ::TideChartLink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartLink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TideChartLink_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTideChartLink_tide_5fchart_2eproto}, {}};

static void InitDefaultsTideChartNote_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartNote_default_instance_;
    new (ptr) ::TideChartNote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartNote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TideChartNote_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTideChartNote_tide_5fchart_2eproto}, {}};

static void InitDefaultsTideChartNode_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartNode_default_instance_;
    new (ptr) ::TideChartNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TideChartNode_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTideChartNode_tide_5fchart_2eproto}, {
      &scc_info_TideChartPort_tide_5fchart_2eproto.base,
      &scc_info_TideChartProperty_tide_5fchart_2eproto.base,
      &scc_info_TideChartNote_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartRegion_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartRegion_default_instance_;
    new (ptr) ::TideChartRegion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartRegion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TideChartRegion_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTideChartRegion_tide_5fchart_2eproto}, {
      &scc_info_TideChartProperty_tide_5fchart_2eproto.base,
      &scc_info_TideChartNote_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartCommand_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartGraph_default_instance_;
    new (ptr) ::TideChartGraph();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_TideChartCommand_default_instance_;
    new (ptr) ::TideChartCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_TideChartGroupCommand_default_instance_;
    new (ptr) ::TideChartGroupCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_TideChartGraphCommand_default_instance_;
    new (ptr) ::TideChartGraphCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartGraph::InitAsDefaultInstance();
  ::TideChartCommand::InitAsDefaultInstance();
  ::TideChartGroupCommand::InitAsDefaultInstance();
  ::TideChartGraphCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<16> scc_info_TideChartCommand_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 16, InitDefaultsTideChartCommand_tide_5fchart_2eproto}, {
      &scc_info_TideChartMoveCommand_tide_5fchart_2eproto.base,
      &scc_info_TideChartCommentBoxCommand_tide_5fchart_2eproto.base,
      &scc_info_TideChartWidgetCommand_tide_5fchart_2eproto.base,
      &scc_info_TideChartPortCommand_tide_5fchart_2eproto.base,
      &scc_info_TideChartLinkCommand_tide_5fchart_2eproto.base,
      &scc_info_TideChartNodeCommand_tide_5fchart_2eproto.base,
      &scc_info_TideChartRegionCommand_tide_5fchart_2eproto.base,
      &scc_info_TideChartPropertyCommand_tide_5fchart_2eproto.base,
      &scc_info_TideChartNoteCommand_tide_5fchart_2eproto.base,
      &scc_info_TideChartNode_tide_5fchart_2eproto.base,
      &scc_info_TideChartLink_tide_5fchart_2eproto.base,
      &scc_info_TideChartRegion_tide_5fchart_2eproto.base,
      &scc_info_TideChartCommentBox_tide_5fchart_2eproto.base,
      &scc_info_TideChartWidget_tide_5fchart_2eproto.base,
      &scc_info_TideChartProperty_tide_5fchart_2eproto.base,
      &scc_info_TideChartNote_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartMoveCommand_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartMoveCommand_default_instance_;
    new (ptr) ::TideChartMoveCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartMoveCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TideChartMoveCommand_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTideChartMoveCommand_tide_5fchart_2eproto}, {}};

static void InitDefaultsTideChartCommentBoxCommand_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartCommentBoxCommand_default_instance_;
    new (ptr) ::TideChartCommentBoxCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartCommentBoxCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartCommentBoxCommand_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartCommentBoxCommand_tide_5fchart_2eproto}, {
      &scc_info_TideChartCommentBox_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartWidgetCommand_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartWidgetCommand_default_instance_;
    new (ptr) ::TideChartWidgetCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartWidgetCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartWidgetCommand_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartWidgetCommand_tide_5fchart_2eproto}, {
      &scc_info_TideChartWidget_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartPortCommand_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartPortCommand_default_instance_;
    new (ptr) ::TideChartPortCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartPortCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartPortCommand_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartPortCommand_tide_5fchart_2eproto}, {
      &scc_info_TideChartPort_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartLinkCommand_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartLinkCommand_default_instance_;
    new (ptr) ::TideChartLinkCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartLinkCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartLinkCommand_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartLinkCommand_tide_5fchart_2eproto}, {
      &scc_info_TideChartLink_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartNodeCommand_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartNodeCommand_default_instance_;
    new (ptr) ::TideChartNodeCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartNodeCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartNodeCommand_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartNodeCommand_tide_5fchart_2eproto}, {
      &scc_info_TideChartNode_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartRegionCommand_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartRegionCommand_default_instance_;
    new (ptr) ::TideChartRegionCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartRegionCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartRegionCommand_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartRegionCommand_tide_5fchart_2eproto}, {
      &scc_info_TideChartRegion_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartPropertyCommand_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartPropertyCommand_default_instance_;
    new (ptr) ::TideChartPropertyCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartPropertyCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartPropertyCommand_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartPropertyCommand_tide_5fchart_2eproto}, {
      &scc_info_TideChartProperty_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartNoteCommand_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartNoteCommand_default_instance_;
    new (ptr) ::TideChartNoteCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartNoteCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartNoteCommand_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartNoteCommand_tide_5fchart_2eproto}, {
      &scc_info_TideChartNote_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartSource_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartSource_default_instance_;
    new (ptr) ::TideChartSource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartSource::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TideChartSource_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTideChartSource_tide_5fchart_2eproto}, {}};

static void InitDefaultsTideChartSite_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartSite_default_instance_;
    new (ptr) ::TideChartSite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartSite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartSite_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartSite_tide_5fchart_2eproto}, {
      &scc_info_TideChartProperty_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartMessage_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartMessage_default_instance_;
    new (ptr) ::TideChartMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TideChartMessage_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTideChartMessage_tide_5fchart_2eproto}, {}};

static void InitDefaultsTideChartContextChange_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartContextChange_default_instance_;
    new (ptr) ::TideChartContextChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartContextChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartContextChange_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartContextChange_tide_5fchart_2eproto}, {
      &scc_info_TideChartProperty_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartLogEntry_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartLogEntry_default_instance_;
    new (ptr) ::TideChartLogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartLogEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartLogEntry_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartLogEntry_tide_5fchart_2eproto}, {
      &scc_info_TideChartProperty_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartContext_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartContext_default_instance_;
    new (ptr) ::TideChartContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartContext::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_TideChartContext_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsTideChartContext_tide_5fchart_2eproto}, {
      &scc_info_TideChartSite_tide_5fchart_2eproto.base,
      &scc_info_TideChartMessage_tide_5fchart_2eproto.base,
      &scc_info_TideChartProperty_tide_5fchart_2eproto.base,
      &scc_info_TideChartContextChange_tide_5fchart_2eproto.base,
      &scc_info_TideChartLogEntry_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartData_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartLibrary_default_instance_;
    new (ptr) ::TideChartLibrary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_TideChartData_default_instance_;
    new (ptr) ::TideChartData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartLibrary::InitAsDefaultInstance();
  ::TideChartData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_TideChartData_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTideChartData_tide_5fchart_2eproto}, {
      &scc_info_TideChartCommand_tide_5fchart_2eproto.base,
      &scc_info_TideChartProperty_tide_5fchart_2eproto.base,
      &scc_info_TideChartNote_tide_5fchart_2eproto.base,
      &scc_info_TideChartSource_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartHeader_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartHeader_default_instance_;
    new (ptr) ::TideChartHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TideChartHeader_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTideChartHeader_tide_5fchart_2eproto}, {}};

static void InitDefaultsTideChartFile_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartFile_default_instance_;
    new (ptr) ::TideChartFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TideChartFile_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTideChartFile_tide_5fchart_2eproto}, {
      &scc_info_TideChartData_tide_5fchart_2eproto.base,
      &scc_info_TideChartCommand_tide_5fchart_2eproto.base,
      &scc_info_TideChartContext_tide_5fchart_2eproto.base,}};

static void InitDefaultsTideChartFileHeader_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartFileHeader_default_instance_;
    new (ptr) ::TideChartFileHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartFileHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TideChartFileHeader_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTideChartFileHeader_tide_5fchart_2eproto}, {}};

static void InitDefaultsTideChartFileCurrent_tide_5fchart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TideChartFileCurrent_default_instance_;
    new (ptr) ::TideChartFileCurrent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TideChartFileCurrent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TideChartFileCurrent_tide_5fchart_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTideChartFileCurrent_tide_5fchart_2eproto}, {
      &scc_info_TideChartData_tide_5fchart_2eproto.base,}};

void InitDefaults_tide_5fchart_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartProperty_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartCommentBox_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartWidget_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartPort_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartLink_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartNote_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartNode_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartRegion_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartCommand_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartMoveCommand_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartCommentBoxCommand_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartWidgetCommand_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartPortCommand_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartLinkCommand_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartNodeCommand_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartRegionCommand_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartPropertyCommand_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartNoteCommand_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartSource_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartSite_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartMessage_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartContextChange_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartLogEntry_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartContext_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartData_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartHeader_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartFile_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartFileHeader_tide_5fchart_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TideChartFileCurrent_tide_5fchart_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_tide_5fchart_2eproto[33];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_tide_5fchart_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_tide_5fchart_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_tide_5fchart_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TideChartProperty, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartProperty, name_),
  offsetof(::TideChartPropertyDefaultTypeInternal, boolvalue_),
  offsetof(::TideChartPropertyDefaultTypeInternal, strvalue_),
  offsetof(::TideChartPropertyDefaultTypeInternal, longvalue_),
  offsetof(::TideChartPropertyDefaultTypeInternal, doublevalue_),
  PROTOBUF_FIELD_OFFSET(::TideChartProperty, props_),
  PROTOBUF_FIELD_OFFSET(::TideChartProperty, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, id_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, region_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, posx_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, posy_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, width_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, height_),
  offsetof(::TideChartCommentBoxDefaultTypeInternal, text_),
  offsetof(::TideChartCommentBoxDefaultTypeInternal, image_),
  offsetof(::TideChartCommentBoxDefaultTypeInternal, icon_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, fontsize_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, fontstyle_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, alignment_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, color_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, background_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, border_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, israised_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, isreversed_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBox, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, id_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, type_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, title_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, region_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, posx_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, posy_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, width_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, height_),
  offsetof(::TideChartWidgetDefaultTypeInternal, link_),
  offsetof(::TideChartWidgetDefaultTypeInternal, port_),
  offsetof(::TideChartWidgetDefaultTypeInternal, node_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, props_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, settings_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidget, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartPort, type_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, node_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, name_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, ordinal_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, isdefault_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, isrequired_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, allowed_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, hint_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, value_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, trigger_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, link_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, event_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, syncgroup_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, isblocking_),
  PROTOBUF_FIELD_OFFSET(::TideChartPort, isqueuing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartLink, outnode_),
  PROTOBUF_FIELD_OFFSET(::TideChartLink, outport_),
  PROTOBUF_FIELD_OFFSET(::TideChartLink, innode_),
  PROTOBUF_FIELD_OFFSET(::TideChartLink, inport_),
  PROTOBUF_FIELD_OFFSET(::TideChartLink, group_),
  PROTOBUF_FIELD_OFFSET(::TideChartLink, delay_),
  PROTOBUF_FIELD_OFFSET(::TideChartLink, link_),
  PROTOBUF_FIELD_OFFSET(::TideChartLink, islogging_),
  PROTOBUF_FIELD_OFFSET(::TideChartLink, isdebugging_),
  PROTOBUF_FIELD_OFFSET(::TideChartLink, ispaused_),
  PROTOBUF_FIELD_OFFSET(::TideChartLink, isdisabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartNote, id_),
  PROTOBUF_FIELD_OFFSET(::TideChartNote, replyto_),
  PROTOBUF_FIELD_OFFSET(::TideChartNote, changeto_),
  PROTOBUF_FIELD_OFFSET(::TideChartNote, content_),
  PROTOBUF_FIELD_OFFSET(::TideChartNote, createdby_),
  PROTOBUF_FIELD_OFFSET(::TideChartNote, createddate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartNode, name_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, type_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, posx_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, posy_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, title_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, icon_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, library_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, method_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, delay_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, inports_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, outports_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, props_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, islogging_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, isdebugging_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, ispaused_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, isdisabled_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, notes_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, script_),
  PROTOBUF_FIELD_OFFSET(::TideChartNode, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, name_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, title_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, nodes_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, group_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, scope_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, props_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, islogging_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, isdebugging_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, ispaused_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, isdisabled_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, notes_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, script_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegion, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, id_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, type_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, name_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, title_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, icon_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, version_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, source_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, nodes_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, links_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, regions_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, comments_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, widgets_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, props_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, history_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, islogging_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, isdebugging_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, ispaused_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, isdisabled_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, notes_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, script_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraph, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TideChartCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartCommand, version_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommand, target_),
  offsetof(::TideChartCommandDefaultTypeInternal, group_),
  offsetof(::TideChartCommandDefaultTypeInternal, move_),
  offsetof(::TideChartCommandDefaultTypeInternal, comment_),
  offsetof(::TideChartCommandDefaultTypeInternal, widget_),
  offsetof(::TideChartCommandDefaultTypeInternal, port_),
  offsetof(::TideChartCommandDefaultTypeInternal, link_),
  offsetof(::TideChartCommandDefaultTypeInternal, node_),
  offsetof(::TideChartCommandDefaultTypeInternal, region_),
  offsetof(::TideChartCommandDefaultTypeInternal, graph_),
  offsetof(::TideChartCommandDefaultTypeInternal, props_),
  offsetof(::TideChartCommandDefaultTypeInternal, note_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartGroupCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartGroupCommand, commands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartMoveCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartMoveCommand, node_),
  PROTOBUF_FIELD_OFFSET(::TideChartMoveCommand, fromposx_),
  PROTOBUF_FIELD_OFFSET(::TideChartMoveCommand, fromposy_),
  PROTOBUF_FIELD_OFFSET(::TideChartMoveCommand, toposx_),
  PROTOBUF_FIELD_OFFSET(::TideChartMoveCommand, toposy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBoxCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBoxCommand, fromcomment_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBoxCommand, tocomment_),
  PROTOBUF_FIELD_OFFSET(::TideChartCommentBoxCommand, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartWidgetCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartWidgetCommand, fromwidget_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidgetCommand, towidget_),
  PROTOBUF_FIELD_OFFSET(::TideChartWidgetCommand, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartPortCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartPortCommand, fromport_),
  PROTOBUF_FIELD_OFFSET(::TideChartPortCommand, toport_),
  PROTOBUF_FIELD_OFFSET(::TideChartPortCommand, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartLinkCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartLinkCommand, fromlink_),
  PROTOBUF_FIELD_OFFSET(::TideChartLinkCommand, tolink_),
  PROTOBUF_FIELD_OFFSET(::TideChartLinkCommand, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartNodeCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartNodeCommand, fromnode_),
  PROTOBUF_FIELD_OFFSET(::TideChartNodeCommand, tonode_),
  PROTOBUF_FIELD_OFFSET(::TideChartNodeCommand, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartRegionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartRegionCommand, fromregion_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegionCommand, toregion_),
  PROTOBUF_FIELD_OFFSET(::TideChartRegionCommand, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartGraphCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartGraphCommand, fromgraph_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraphCommand, tograph_),
  PROTOBUF_FIELD_OFFSET(::TideChartGraphCommand, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartPropertyCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TideChartPropertyCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartPropertyCommand, fromprops_),
  PROTOBUF_FIELD_OFFSET(::TideChartPropertyCommand, toprops_),
  PROTOBUF_FIELD_OFFSET(::TideChartPropertyCommand, type_),
  offsetof(::TideChartPropertyCommandDefaultTypeInternal, node_),
  offsetof(::TideChartPropertyCommandDefaultTypeInternal, region_),
  offsetof(::TideChartPropertyCommandDefaultTypeInternal, widget_),
  offsetof(::TideChartPropertyCommandDefaultTypeInternal, graph_),
  PROTOBUF_FIELD_OFFSET(::TideChartPropertyCommand, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartNoteCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TideChartNoteCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartNoteCommand, notes_),
  PROTOBUF_FIELD_OFFSET(::TideChartNoteCommand, type_),
  offsetof(::TideChartNoteCommandDefaultTypeInternal, node_),
  offsetof(::TideChartNoteCommandDefaultTypeInternal, region_),
  offsetof(::TideChartNoteCommandDefaultTypeInternal, graph_),
  PROTOBUF_FIELD_OFFSET(::TideChartNoteCommand, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartSource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TideChartSource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartSource, id_),
  PROTOBUF_FIELD_OFFSET(::TideChartSource, name_),
  PROTOBUF_FIELD_OFFSET(::TideChartSource, path_),
  PROTOBUF_FIELD_OFFSET(::TideChartSource, modifieddate_),
  PROTOBUF_FIELD_OFFSET(::TideChartSource, modifiedby_),
  offsetof(::TideChartSourceDefaultTypeInternal, version_),
  offsetof(::TideChartSourceDefaultTypeInternal, script_),
  PROTOBUF_FIELD_OFFSET(::TideChartSource, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartLibrary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartLibrary, id_),
  PROTOBUF_FIELD_OFFSET(::TideChartLibrary, name_),
  PROTOBUF_FIELD_OFFSET(::TideChartLibrary, title_),
  PROTOBUF_FIELD_OFFSET(::TideChartLibrary, origin_),
  PROTOBUF_FIELD_OFFSET(::TideChartLibrary, branch_),
  PROTOBUF_FIELD_OFFSET(::TideChartLibrary, path_),
  PROTOBUF_FIELD_OFFSET(::TideChartLibrary, files_),
  PROTOBUF_FIELD_OFFSET(::TideChartLibrary, methods_),
  PROTOBUF_FIELD_OFFSET(::TideChartLibrary, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartSite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartSite, index_),
  PROTOBUF_FIELD_OFFSET(::TideChartSite, stack_),
  PROTOBUF_FIELD_OFFSET(::TideChartSite, path_),
  PROTOBUF_FIELD_OFFSET(::TideChartSite, trigger_),
  PROTOBUF_FIELD_OFFSET(::TideChartSite, event_),
  PROTOBUF_FIELD_OFFSET(::TideChartSite, scope_),
  PROTOBUF_FIELD_OFFSET(::TideChartSite, filter_),
  PROTOBUF_FIELD_OFFSET(::TideChartSite, graph_),
  PROTOBUF_FIELD_OFFSET(::TideChartSite, region_),
  PROTOBUF_FIELD_OFFSET(::TideChartSite, node_),
  PROTOBUF_FIELD_OFFSET(::TideChartSite, port_),
  PROTOBUF_FIELD_OFFSET(::TideChartSite, local_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, index_),
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, origin_),
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, previous_),
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, source_),
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, target_),
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, delayuntil_),
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, holdtoken_),
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, canceltoken_),
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, type_),
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, version_),
  offsetof(::TideChartMessageDefaultTypeInternal, jsoncontent_),
  offsetof(::TideChartMessageDefaultTypeInternal, msgcontent_),
  PROTOBUF_FIELD_OFFSET(::TideChartMessage, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartContextChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartContextChange, index_),
  PROTOBUF_FIELD_OFFSET(::TideChartContextChange, timestamp_),
  PROTOBUF_FIELD_OFFSET(::TideChartContextChange, type_),
  PROTOBUF_FIELD_OFFSET(::TideChartContextChange, props_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartLogEntry, index_),
  PROTOBUF_FIELD_OFFSET(::TideChartLogEntry, timestamp_),
  PROTOBUF_FIELD_OFFSET(::TideChartLogEntry, source_),
  PROTOBUF_FIELD_OFFSET(::TideChartLogEntry, level_),
  PROTOBUF_FIELD_OFFSET(::TideChartLogEntry, tags_),
  PROTOBUF_FIELD_OFFSET(::TideChartLogEntry, message_),
  PROTOBUF_FIELD_OFFSET(::TideChartLogEntry, refs_),
  PROTOBUF_FIELD_OFFSET(::TideChartLogEntry, props_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartContext, id_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, index_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, timestamp_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, version_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, sites_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, messages_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, global_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, starttime_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, startindex_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, active_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, waiting_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, paused_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, disabled_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, events_),
  PROTOBUF_FIELD_OFFSET(::TideChartContext, log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartData, version_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, branch_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, source_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, merge_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, commitdate_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, commitby_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, commitdesc_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, commitnotes_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, sheets_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, props_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, notes_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, library_),
  PROTOBUF_FIELD_OFFSET(::TideChartData, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartHeader, version_),
  PROTOBUF_FIELD_OFFSET(::TideChartHeader, branch_),
  PROTOBUF_FIELD_OFFSET(::TideChartHeader, source_),
  PROTOBUF_FIELD_OFFSET(::TideChartHeader, merge_),
  PROTOBUF_FIELD_OFFSET(::TideChartHeader, commitdate_),
  PROTOBUF_FIELD_OFFSET(::TideChartHeader, commitby_),
  PROTOBUF_FIELD_OFFSET(::TideChartHeader, commitdesc_),
  PROTOBUF_FIELD_OFFSET(::TideChartHeader, commitnotes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartFile, id_),
  PROTOBUF_FIELD_OFFSET(::TideChartFile, name_),
  PROTOBUF_FIELD_OFFSET(::TideChartFile, path_),
  PROTOBUF_FIELD_OFFSET(::TideChartFile, origin_),
  PROTOBUF_FIELD_OFFSET(::TideChartFile, modifieddate_),
  PROTOBUF_FIELD_OFFSET(::TideChartFile, modifiedby_),
  PROTOBUF_FIELD_OFFSET(::TideChartFile, chart_),
  PROTOBUF_FIELD_OFFSET(::TideChartFile, working_),
  PROTOBUF_FIELD_OFFSET(::TideChartFile, remote_),
  PROTOBUF_FIELD_OFFSET(::TideChartFile, history_),
  PROTOBUF_FIELD_OFFSET(::TideChartFile, context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartFileHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartFileHeader, id_),
  PROTOBUF_FIELD_OFFSET(::TideChartFileHeader, name_),
  PROTOBUF_FIELD_OFFSET(::TideChartFileHeader, path_),
  PROTOBUF_FIELD_OFFSET(::TideChartFileHeader, origin_),
  PROTOBUF_FIELD_OFFSET(::TideChartFileHeader, modifieddate_),
  PROTOBUF_FIELD_OFFSET(::TideChartFileHeader, modifiedby_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TideChartFileCurrent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TideChartFileCurrent, id_),
  PROTOBUF_FIELD_OFFSET(::TideChartFileCurrent, name_),
  PROTOBUF_FIELD_OFFSET(::TideChartFileCurrent, path_),
  PROTOBUF_FIELD_OFFSET(::TideChartFileCurrent, origin_),
  PROTOBUF_FIELD_OFFSET(::TideChartFileCurrent, modifieddate_),
  PROTOBUF_FIELD_OFFSET(::TideChartFileCurrent, modifiedby_),
  PROTOBUF_FIELD_OFFSET(::TideChartFileCurrent, chart_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TideChartProperty)},
  { 12, -1, sizeof(::TideChartCommentBox)},
  { 35, -1, sizeof(::TideChartWidget)},
  { 54, -1, sizeof(::TideChartPort)},
  { 74, -1, sizeof(::TideChartLink)},
  { 90, -1, sizeof(::TideChartNote)},
  { 101, -1, sizeof(::TideChartNode)},
  { 125, -1, sizeof(::TideChartRegion)},
  { 143, -1, sizeof(::TideChartGraph)},
  { 169, -1, sizeof(::TideChartCommand)},
  { 188, -1, sizeof(::TideChartGroupCommand)},
  { 194, -1, sizeof(::TideChartMoveCommand)},
  { 204, -1, sizeof(::TideChartCommentBoxCommand)},
  { 212, -1, sizeof(::TideChartWidgetCommand)},
  { 220, -1, sizeof(::TideChartPortCommand)},
  { 228, -1, sizeof(::TideChartLinkCommand)},
  { 236, -1, sizeof(::TideChartNodeCommand)},
  { 244, -1, sizeof(::TideChartRegionCommand)},
  { 252, -1, sizeof(::TideChartGraphCommand)},
  { 260, -1, sizeof(::TideChartPropertyCommand)},
  { 273, -1, sizeof(::TideChartNoteCommand)},
  { 284, -1, sizeof(::TideChartSource)},
  { 297, -1, sizeof(::TideChartLibrary)},
  { 311, -1, sizeof(::TideChartSite)},
  { 328, -1, sizeof(::TideChartMessage)},
  { 347, -1, sizeof(::TideChartContextChange)},
  { 356, -1, sizeof(::TideChartLogEntry)},
  { 369, -1, sizeof(::TideChartContext)},
  { 389, -1, sizeof(::TideChartData)},
  { 407, -1, sizeof(::TideChartHeader)},
  { 420, -1, sizeof(::TideChartFile)},
  { 436, -1, sizeof(::TideChartFileHeader)},
  { 447, -1, sizeof(::TideChartFileCurrent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartCommentBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartWidget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartPort_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartNote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartRegion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartGraph_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartGroupCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartMoveCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartCommentBoxCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartWidgetCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartPortCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartLinkCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartNodeCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartRegionCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartGraphCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartPropertyCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartNoteCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartLibrary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartSite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartContextChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartLogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartFileHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TideChartFileCurrent_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_tide_5fchart_2eproto = {
  {}, AddDescriptors_tide_5fchart_2eproto, "tide_chart.proto", schemas,
  file_default_instances, TableStruct_tide_5fchart_2eproto::offsets,
  file_level_metadata_tide_5fchart_2eproto, 33, file_level_enum_descriptors_tide_5fchart_2eproto, file_level_service_descriptors_tide_5fchart_2eproto,
};

const char descriptor_table_protodef_tide_5fchart_2eproto[] =
  "\n\020tide_chart.proto\"\242\001\n\021TideChartProperty"
  "\022\014\n\004name\030\001 \001(\t\022\023\n\tboolValue\030\002 \001(\010H\000\022\022\n\010s"
  "trValue\030\003 \001(\tH\000\022\023\n\tlongValue\030\004 \001(\022H\000\022\025\n\013"
  "doubleValue\030\005 \001(\001H\000\022!\n\005props\030\006 \003(\0132\022.Tid"
  "eChartPropertyB\007\n\005value\"\271\002\n\023TideChartCom"
  "mentBox\022\n\n\002id\030\001 \001(\t\022\016\n\006region\030\002 \001(\t\022\014\n\004p"
  "osX\030\003 \001(\021\022\014\n\004posY\030\004 \001(\021\022\r\n\005width\030\005 \001(\005\022\016"
  "\n\006height\030\006 \001(\005\022\016\n\004text\030\007 \001(\tH\000\022\017\n\005image\030"
  "\010 \001(\014H\000\022\016\n\004icon\030\t \001(\tH\000\022\020\n\010fontSize\030\n \001("
  "\001\022\021\n\tfontStyle\030\013 \001(\t\022\021\n\talignment\030\014 \003(\021\022"
  "\r\n\005color\030\r \001(\005\022\022\n\nbackground\030\016 \001(\005\022\016\n\006bo"
  "rder\030\017 \003(\005\022\020\n\010isRaised\030\020 \001(\010\022\022\n\nisRevers"
  "ed\030\021 \001(\010B\t\n\007content\"\210\002\n\017TideChartWidget\022"
  "\n\n\002id\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\r\n\005title\030\003 \001(\t"
  "\022\016\n\006region\030\004 \001(\t\022\014\n\004posX\030\005 \001(\021\022\014\n\004posY\030\006"
  " \001(\021\022\r\n\005width\030\007 \001(\005\022\016\n\006height\030\010 \001(\005\022\016\n\004l"
  "ink\030\t \001(\tH\000\022\016\n\004port\030\n \001(\tH\000\022\016\n\004node\030\013 \001("
  "\tH\000\022!\n\005props\030\014 \003(\0132\022.TideChartProperty\022$"
  "\n\010settings\030\026 \003(\0132\022.TideChartPropertyB\010\n\006"
  "target\"\207\002\n\rTideChartPort\022\014\n\004type\030\001 \001(\t\022\014"
  "\n\004node\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\017\n\007ordinal\030\004 "
  "\001(\005\022\021\n\tisDefault\030\005 \001(\010\022\022\n\nisRequired\030\006 \001"
  "(\010\022\017\n\007allowed\030\007 \003(\t\022\014\n\004hint\030\010 \001(\t\022\r\n\005val"
  "ue\030\t \001(\t\022\017\n\007trigger\030\n \001(\t\022\014\n\004link\030\013 \001(\t\022"
  "\r\n\005event\030\014 \001(\t\022\021\n\tsyncGroup\030\r \001(\t\022\022\n\nisB"
  "locking\030\016 \001(\010\022\021\n\tisQueuing\030\017 \001(\010\"\313\001\n\rTid"
  "eChartLink\022\017\n\007outNode\030\001 \001(\t\022\017\n\007outPort\030\002"
  " \001(\t\022\016\n\006inNode\030\003 \001(\t\022\016\n\006inPort\030\004 \001(\t\022\r\n\005"
  "group\030\005 \001(\005\022\r\n\005delay\030\006 \001(\005\022\014\n\004link\030\007 \001(\t"
  "\022\021\n\tisLogging\030\020 \001(\010\022\023\n\013isDebugging\030\021 \001(\010"
  "\022\020\n\010isPaused\030\022 \001(\010\022\022\n\nisDisabled\030\023 \001(\010\"w"
  "\n\rTideChartNote\022\n\n\002id\030\001 \001(\t\022\017\n\007replyTo\030\002"
  " \001(\t\022\020\n\010changeTo\030\003 \001(\t\022\017\n\007content\030\004 \001(\t\022"
  "\021\n\tcreatedBy\030\005 \001(\t\022\023\n\013createdDate\030\006 \001(\t\""
  "\235\003\n\rTideChartNode\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030"
  "\002 \001(\t\022\014\n\004posX\030\003 \001(\021\022\014\n\004posY\030\004 \001(\021\022\r\n\005tit"
  "le\030\005 \001(\t\022\014\n\004icon\030\006 \001(\t\022\017\n\007library\030\007 \001(\t\022"
  "\016\n\006method\030\010 \001(\t\022\r\n\005delay\030\t \001(\005\022\037\n\007inport"
  "s\030\n \003(\0132\016.TideChartPort\022 \n\010outports\030\013 \003("
  "\0132\016.TideChartPort\022!\n\005props\030\014 \003(\0132\022.TideC"
  "hartProperty\022\021\n\tisLogging\030\020 \001(\010\022\023\n\013isDeb"
  "ugging\030\021 \001(\010\022\020\n\010isPaused\030\022 \001(\010\022\022\n\nisDisa"
  "bled\030\023 \001(\010\022\035\n\005notes\030\024 \003(\0132\016.TideChartNot"
  "e\022\016\n\006script\030\025 \001(\t\022$\n\010settings\030\026 \003(\0132\022.Ti"
  "deChartProperty\"\241\002\n\017TideChartRegion\022\014\n\004n"
  "ame\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\r\n\005nodes\030\003 \003(\t\022"
  "\r\n\005group\030\004 \001(\005\022\r\n\005scope\030\005 \001(\t\022!\n\005props\030\006"
  " \003(\0132\022.TideChartProperty\022\021\n\tisLogging\030\020 "
  "\001(\010\022\023\n\013isDebugging\030\021 \001(\010\022\020\n\010isPaused\030\022 \001"
  "(\010\022\022\n\nisDisabled\030\023 \001(\010\022\035\n\005notes\030\024 \003(\0132\016."
  "TideChartNote\022\016\n\006script\030\025 \001(\t\022$\n\010setting"
  "s\030\026 \003(\0132\022.TideChartProperty\"\214\004\n\016TideChar"
  "tGraph\022\n\n\002id\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\014\n\004name"
  "\030\003 \001(\t\022\r\n\005title\030\004 \001(\t\022\014\n\004icon\030\005 \001(\t\022\017\n\007v"
  "ersion\030\006 \001(\t\022\016\n\006source\030\007 \001(\t\022\035\n\005nodes\030\010 "
  "\003(\0132\016.TideChartNode\022\035\n\005links\030\t \003(\0132\016.Tid"
  "eChartLink\022!\n\007regions\030\n \003(\0132\020.TideChartR"
  "egion\022&\n\010comments\030\013 \003(\0132\024.TideChartComme"
  "ntBox\022!\n\007widgets\030\014 \003(\0132\020.TideChartWidget"
  "\022!\n\005props\030\r \003(\0132\022.TideChartProperty\022\"\n\007h"
  "istory\030\016 \003(\0132\021.TideChartCommand\022\021\n\tisLog"
  "ging\030\020 \001(\010\022\023\n\013isDebugging\030\021 \001(\010\022\020\n\010isPau"
  "sed\030\022 \001(\010\022\022\n\nisDisabled\030\023 \001(\010\022\035\n\005notes\030\024"
  " \003(\0132\016.TideChartNote\022\016\n\006script\030\025 \001(\t\022$\n\010"
  "settings\030\026 \003(\0132\022.TideChartProperty\"\205\004\n\020T"
  "ideChartCommand\022\017\n\007version\030\001 \001(\t\022\016\n\006targ"
  "et\030\002 \001(\t\022\'\n\005group\030\003 \001(\0132\026.TideChartGroup"
  "CommandH\000\022%\n\004move\030\004 \001(\0132\025.TideChartMoveC"
  "ommandH\000\022.\n\007comment\030\005 \001(\0132\033.TideChartCom"
  "mentBoxCommandH\000\022)\n\006widget\030\006 \001(\0132\027.TideC"
  "hartWidgetCommandH\000\022%\n\004port\030\007 \001(\0132\025.Tide"
  "ChartPortCommandH\000\022%\n\004link\030\010 \001(\0132\025.TideC"
  "hartLinkCommandH\000\022%\n\004node\030\t \001(\0132\025.TideCh"
  "artNodeCommandH\000\022)\n\006region\030\n \001(\0132\027.TideC"
  "hartRegionCommandH\000\022\'\n\005graph\030\013 \001(\0132\026.Tid"
  "eChartGraphCommandH\000\022*\n\005props\030\014 \001(\0132\031.Ti"
  "deChartPropertyCommandH\000\022%\n\004note\030\r \001(\0132\025"
  ".TideChartNoteCommandH\000B\t\n\007command\"<\n\025Ti"
  "deChartGroupCommand\022#\n\010commands\030\001 \003(\0132\021."
  "TideChartCommand\"h\n\024TideChartMoveCommand"
  "\022\014\n\004node\030\001 \001(\t\022\020\n\010fromPosX\030\002 \001(\021\022\020\n\010from"
  "PosY\030\003 \001(\021\022\016\n\006toPosX\030\004 \001(\021\022\016\n\006toPosY\030\005 \001"
  "(\021\"\233\001\n\032TideChartCommentBoxCommand\022)\n\013fro"
  "mComment\030\001 \001(\0132\024.TideChartCommentBox\022\'\n\t"
  "toComment\030\002 \001(\0132\024.TideChartCommentBox\022)\n"
  "\004type\030\003 \001(\0162\033.TideChartCommandUpdateType"
  "\"\215\001\n\026TideChartWidgetCommand\022$\n\nfromWidge"
  "t\030\001 \001(\0132\020.TideChartWidget\022\"\n\010toWidget\030\002 "
  "\001(\0132\020.TideChartWidget\022)\n\004type\030\003 \001(\0162\033.Ti"
  "deChartCommandUpdateType\"\203\001\n\024TideChartPo"
  "rtCommand\022 \n\010fromPort\030\001 \001(\0132\016.TideChartP"
  "ort\022\036\n\006toPort\030\002 \001(\0132\016.TideChartPort\022)\n\004t"
  "ype\030\003 \001(\0162\033.TideChartCommandUpdateType\"\203"
  "\001\n\024TideChartLinkCommand\022 \n\010fromLink\030\001 \001("
  "\0132\016.TideChartLink\022\036\n\006toLink\030\002 \001(\0132\016.Tide"
  "ChartLink\022)\n\004type\030\003 \001(\0162\033.TideChartComma"
  "ndUpdateType\"\203\001\n\024TideChartNodeCommand\022 \n"
  "\010fromNode\030\001 \001(\0132\016.TideChartNode\022\036\n\006toNod"
  "e\030\002 \001(\0132\016.TideChartNode\022)\n\004type\030\003 \001(\0162\033."
  "TideChartCommandUpdateType\"\215\001\n\026TideChart"
  "RegionCommand\022$\n\nfromRegion\030\001 \001(\0132\020.Tide"
  "ChartRegion\022\"\n\010toRegion\030\002 \001(\0132\020.TideChar"
  "tRegion\022)\n\004type\030\003 \001(\0162\033.TideChartCommand"
  "UpdateType\"\210\001\n\025TideChartGraphCommand\022\"\n\t"
  "fromGraph\030\001 \001(\0132\017.TideChartGraph\022 \n\007toGr"
  "aph\030\002 \001(\0132\017.TideChartGraph\022)\n\004type\030\003 \001(\016"
  "2\033.TideChartCommandUpdateType\"\340\001\n\030TideCh"
  "artPropertyCommand\022%\n\tfromProps\030\001 \003(\0132\022."
  "TideChartProperty\022#\n\007toProps\030\002 \003(\0132\022.Tid"
  "eChartProperty\022)\n\004type\030\003 \001(\0162\033.TideChart"
  "CommandUpdateType\022\016\n\004node\030\005 \001(\tH\000\022\020\n\006reg"
  "ion\030\006 \001(\tH\000\022\020\n\006widget\030\007 \001(\tH\000\022\017\n\005graph\030\010"
  " \001(\tH\000B\010\n\006target\"\235\001\n\024TideChartNoteComman"
  "d\022\035\n\005notes\030\001 \003(\0132\016.TideChartNote\022)\n\004type"
  "\030\002 \001(\0162\033.TideChartCommandUpdateType\022\016\n\004n"
  "ode\030\003 \001(\tH\000\022\020\n\006region\030\004 \001(\tH\000\022\017\n\005graph\030\005"
  " \001(\tH\000B\010\n\006target\"\223\001\n\017TideChartSource\022\n\n\002"
  "id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\022\024\n\014"
  "modifiedDate\030\005 \001(\t\022\022\n\nmodifiedBy\030\006 \001(\t\022\021"
  "\n\007version\030\007 \001(\tH\000\022\020\n\006script\030\010 \001(\tH\000B\t\n\007c"
  "ontent\"\321\001\n\020TideChartLibrary\022\n\n\002id\030\001 \001(\t\022"
  "\014\n\004name\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\016\n\006origin\030\n"
  " \001(\t\022\016\n\006branch\030\013 \001(\t\022\014\n\004path\030\014 \001(\t\022\037\n\005fi"
  "les\030\016 \003(\0132\020.TideChartSource\022\037\n\007methods\030\017"
  " \001(\0132\016.TideChartData\022$\n\010settings\030\020 \003(\0132\022"
  ".TideChartProperty\"\350\001\n\rTideChartSite\022\r\n\005"
  "index\030\001 \001(\003\022\035\n\005stack\030\002 \003(\0132\016.TideChartSi"
  "te\022\014\n\004path\030\003 \001(\t\022\017\n\007trigger\030\004 \001(\t\022\r\n\005eve"
  "nt\030\005 \001(\t\022\r\n\005scope\030\006 \003(\t\022\016\n\006filter\030\007 \001(\t\022"
  "\r\n\005graph\030\010 \001(\t\022\016\n\006region\030\t \001(\t\022\014\n\004node\030\n"
  " \001(\t\022\014\n\004port\030\013 \001(\t\022!\n\005local\030\014 \003(\0132\022.Tide"
  "ChartProperty\"\211\002\n\020TideChartMessage\022\r\n\005in"
  "dex\030\001 \001(\003\022\021\n\ttimestamp\030\002 \001(\003\022\016\n\006origin\030\004"
  " \001(\003\022\020\n\010previous\030\005 \001(\003\022\016\n\006source\030\007 \001(\003\022\016"
  "\n\006target\030\010 \001(\003\022\022\n\ndelayUntil\030\t \001(\003\022\021\n\tho"
  "ldToken\030\n \001(\003\022\023\n\013cancelToken\030\013 \001(\003\022\014\n\004ty"
  "pe\030\014 \001(\t\022\017\n\007version\030\r \001(\005\022\025\n\013jsonContent"
  "\030\016 \001(\tH\000\022\024\n\nmsgContent\030\017 \001(\014H\000B\t\n\007conten"
  "t\"k\n\026TideChartContextChange\022\r\n\005index\030\001 \001"
  "(\003\022\021\n\ttimestamp\030\002 \001(\003\022\014\n\004type\030\003 \001(\t\022!\n\005p"
  "rops\030\004 \003(\0132\022.TideChartProperty\"\270\001\n\021TideC"
  "hartLogEntry\022\r\n\005index\030\001 \001(\003\022\021\n\ttimestamp"
  "\030\002 \001(\003\022\016\n\006source\030\003 \001(\003\022!\n\005level\030\004 \001(\0162\022."
  "TideChartLogLevel\022\014\n\004tags\030\005 \003(\t\022\017\n\007messa"
  "ge\030\006 \001(\t\022\014\n\004refs\030\007 \003(\003\022!\n\005props\030\010 \003(\0132\022."
  "TideChartProperty\"\355\002\n\020TideChartContext\022\n"
  "\n\002id\030\001 \001(\t\022\r\n\005index\030\002 \001(\003\022\021\n\ttimestamp\030\003"
  " \001(\003\022\017\n\007version\030\004 \001(\t\022\035\n\005sites\030\005 \003(\0132\016.T"
  "ideChartSite\022#\n\010messages\030\006 \003(\0132\021.TideCha"
  "rtMessage\022\"\n\006global\030\007 \003(\0132\022.TideChartPro"
  "perty\022\021\n\tstartTime\030\010 \001(\003\022\022\n\nstartIndex\030\t"
  " \001(\003\022\016\n\006active\030\n \003(\003\022\017\n\007waiting\030\013 \003(\003\022\016\n"
  "\006paused\030\014 \003(\003\022\020\n\010disabled\030\r \003(\003\022\'\n\006event"
  "s\030\016 \003(\0132\027.TideChartContextChange\022\037\n\003log\030"
  "\017 \003(\0132\022.TideChartLogEntry\"\313\002\n\rTideChartD"
  "ata\022\017\n\007version\030\001 \001(\t\022\016\n\006branch\030\002 \001(\t\022\016\n\006"
  "source\030\003 \001(\t\022\r\n\005merge\030\004 \001(\t\022\022\n\ncommitDat"
  "e\030\005 \001(\t\022\020\n\010commitBy\030\006 \001(\t\022\022\n\ncommitDesc\030"
  "\007 \001(\t\022\023\n\013commitNotes\030\010 \001(\t\022\037\n\006sheets\030\t \003"
  "(\0132\017.TideChartGraph\022!\n\005props\030\n \003(\0132\022.Tid"
  "eChartProperty\022\035\n\005notes\030\013 \003(\0132\016.TideChar"
  "tNote\022\"\n\007library\030\014 \003(\0132\021.TideChartLibrar"
  "y\022$\n\010settings\030\026 \003(\0132\022.TideChartProperty\""
  "\240\001\n\017TideChartHeader\022\017\n\007version\030\001 \001(\t\022\016\n\006"
  "branch\030\002 \001(\t\022\016\n\006source\030\003 \001(\t\022\r\n\005merge\030\004 "
  "\001(\t\022\022\n\ncommitDate\030\005 \001(\t\022\020\n\010commitBy\030\006 \001("
  "\t\022\022\n\ncommitDesc\030\007 \001(\t\022\023\n\013commitNotes\030\010 \001"
  "(\t\"\234\002\n\rTideChartFile\022\n\n\002id\030\001 \001(\t\022\014\n\004name"
  "\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\022\016\n\006origin\030\004 \001(\t\022\024\n\014"
  "modifiedDate\030\005 \001(\t\022\022\n\nmodifiedBy\030\006 \001(\t\022\035"
  "\n\005chart\030\007 \001(\0132\016.TideChartData\022\"\n\007working"
  "\030\010 \003(\0132\021.TideChartCommand\022!\n\006remote\030\t \003("
  "\0132\021.TideChartCommand\022\037\n\007history\030\n \003(\0132\016."
  "TideChartData\022\"\n\007context\030\013 \003(\0132\021.TideCha"
  "rtContext\"w\n\023TideChartFileHeader\022\n\n\002id\030\001"
  " \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\022\016\n\006orig"
  "in\030\004 \001(\t\022\024\n\014modifiedDate\030\005 \001(\t\022\022\n\nmodifi"
  "edBy\030\006 \001(\t\"\227\001\n\024TideChartFileCurrent\022\n\n\002i"
  "d\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\022\016\n\006o"
  "rigin\030\004 \001(\t\022\024\n\014modifiedDate\030\005 \001(\t\022\022\n\nmod"
  "ifiedBy\030\006 \001(\t\022\035\n\005chart\030\007 \001(\0132\016.TideChart"
  "Data*=\n\032TideChartCommandUpdateType\022\007\n\003ad"
  "d\020\000\022\n\n\006remove\020\001\022\n\n\006update\020\002*\235\001\n\021TideChar"
  "tLogLevel\022\010\n\004none\020\000\022\t\n\005fatal\020\001\022\t\n\005error\020"
  "\002\022\r\n\texception\020\003\022\013\n\007warning\020\004\022\010\n\004info\020\005\022"
  "\013\n\007message\020\006\022\t\n\005debug\020\007\022\t\n\005check\020\010\022\013\n\007ve"
  "rbose\020\t\022\t\n\005trace\020\n\022\007\n\003all\020\013B\013B\tTideChart"
  "b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_tide_5fchart_2eproto = {
  false, InitDefaults_tide_5fchart_2eproto, 
  descriptor_table_protodef_tide_5fchart_2eproto,
  "tide_chart.proto", &assign_descriptors_table_tide_5fchart_2eproto, 7488,
};

void AddDescriptors_tide_5fchart_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_tide_5fchart_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tide_5fchart_2eproto = []() { AddDescriptors_tide_5fchart_2eproto(); return true; }();
const ::google::protobuf::EnumDescriptor* TideChartCommandUpdateType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_tide_5fchart_2eproto);
  return file_level_enum_descriptors_tide_5fchart_2eproto[0];
}
bool TideChartCommandUpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TideChartLogLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_tide_5fchart_2eproto);
  return file_level_enum_descriptors_tide_5fchart_2eproto[1];
}
bool TideChartLogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TideChartProperty::InitAsDefaultInstance() {
  ::_TideChartProperty_default_instance_.boolvalue_ = false;
  ::_TideChartProperty_default_instance_.strvalue_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartProperty_default_instance_.longvalue_ = PROTOBUF_LONGLONG(0);
  ::_TideChartProperty_default_instance_.doublevalue_ = 0;
}
class TideChartProperty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartProperty::kNameFieldNumber;
const int TideChartProperty::kBoolValueFieldNumber;
const int TideChartProperty::kStrValueFieldNumber;
const int TideChartProperty::kLongValueFieldNumber;
const int TideChartProperty::kDoubleValueFieldNumber;
const int TideChartProperty::kPropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartProperty::TideChartProperty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartProperty)
}
TideChartProperty::TideChartProperty(const TideChartProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      props_(from.props_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kBoolValue: {
      set_boolvalue(from.boolvalue());
      break;
    }
    case kStrValue: {
      set_strvalue(from.strvalue());
      break;
    }
    case kLongValue: {
      set_longvalue(from.longvalue());
      break;
    }
    case kDoubleValue: {
      set_doublevalue(from.doublevalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TideChartProperty)
}

void TideChartProperty::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartProperty_tide_5fchart_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}

TideChartProperty::~TideChartProperty() {
  // @@protoc_insertion_point(destructor:TideChartProperty)
  SharedDtor();
}

void TideChartProperty::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void TideChartProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartProperty& TideChartProperty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartProperty_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartProperty::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:TideChartProperty)
  switch (value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kStrValue: {
      value_.strvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void TideChartProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartProperty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartProperty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartProperty.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool boolValue = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_boolvalue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string strValue = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartProperty.strValue");
        object = msg->mutable_strvalue();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // sint64 longValue = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_longvalue(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double doubleValue = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_doublevalue(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated .TideChartProperty props = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_props();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartProperty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartProperty.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boolValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strValue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strvalue()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strvalue().data(), static_cast<int>(this->strvalue().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartProperty.strValue"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 longValue = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_.longvalue_)));
          set_has_longvalue();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double doubleValue = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.doublevalue_)));
          set_has_doublevalue();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty props = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartProperty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartProperty.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bool boolValue = 2;
  if (has_boolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->boolvalue(), output);
  }

  // string strValue = 3;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strvalue().data(), static_cast<int>(this->strvalue().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartProperty.strValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strvalue(), output);
  }

  // sint64 longValue = 4;
  if (has_longvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->longvalue(), output);
  }

  // double doubleValue = 5;
  if (has_doublevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->doublevalue(), output);
  }

  // repeated .TideChartProperty props = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->props(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartProperty)
}

::google::protobuf::uint8* TideChartProperty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartProperty.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bool boolValue = 2;
  if (has_boolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->boolvalue(), target);
  }

  // string strValue = 3;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strvalue().data(), static_cast<int>(this->strvalue().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartProperty.strValue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strvalue(), target);
  }

  // sint64 longValue = 4;
  if (has_longvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->longvalue(), target);
  }

  // double doubleValue = 5;
  if (has_doublevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->doublevalue(), target);
  }

  // repeated .TideChartProperty props = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->props(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartProperty)
  return target;
}

size_t TideChartProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartProperty props = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (value_case()) {
    // bool boolValue = 2;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // string strValue = 3;
    case kStrValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strvalue());
      break;
    }
    // sint64 longValue = 4;
    case kLongValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->longvalue());
      break;
    }
    // double doubleValue = 5;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartProperty* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartProperty)
    MergeFrom(*source);
  }
}

void TideChartProperty::MergeFrom(const TideChartProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.value_case()) {
    case kBoolValue: {
      set_boolvalue(from.boolvalue());
      break;
    }
    case kStrValue: {
      set_strvalue(from.strvalue());
      break;
    }
    case kLongValue: {
      set_longvalue(from.longvalue());
      break;
    }
    case kDoubleValue: {
      set_doublevalue(from.doublevalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void TideChartProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartProperty::CopyFrom(const TideChartProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartProperty::IsInitialized() const {
  return true;
}

void TideChartProperty::Swap(TideChartProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartProperty::InternalSwap(TideChartProperty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TideChartProperty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartCommentBox::InitAsDefaultInstance() {
  ::_TideChartCommentBox_default_instance_.text_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartCommentBox_default_instance_.image_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartCommentBox_default_instance_.icon_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class TideChartCommentBox::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartCommentBox::kIdFieldNumber;
const int TideChartCommentBox::kRegionFieldNumber;
const int TideChartCommentBox::kPosXFieldNumber;
const int TideChartCommentBox::kPosYFieldNumber;
const int TideChartCommentBox::kWidthFieldNumber;
const int TideChartCommentBox::kHeightFieldNumber;
const int TideChartCommentBox::kTextFieldNumber;
const int TideChartCommentBox::kImageFieldNumber;
const int TideChartCommentBox::kIconFieldNumber;
const int TideChartCommentBox::kFontSizeFieldNumber;
const int TideChartCommentBox::kFontStyleFieldNumber;
const int TideChartCommentBox::kAlignmentFieldNumber;
const int TideChartCommentBox::kColorFieldNumber;
const int TideChartCommentBox::kBackgroundFieldNumber;
const int TideChartCommentBox::kBorderFieldNumber;
const int TideChartCommentBox::kIsRaisedFieldNumber;
const int TideChartCommentBox::kIsReversedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartCommentBox::TideChartCommentBox()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartCommentBox)
}
TideChartCommentBox::TideChartCommentBox(const TideChartCommentBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      alignment_(from.alignment_),
      border_(from.border_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  fontstyle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fontstyle().size() > 0) {
    fontstyle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fontstyle_);
  }
  ::memcpy(&posx_, &from.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&isreversed_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(isreversed_));
  clear_has_content();
  switch (from.content_case()) {
    case kText: {
      set_text(from.text());
      break;
    }
    case kImage: {
      set_image(from.image());
      break;
    }
    case kIcon: {
      set_icon(from.icon());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TideChartCommentBox)
}

void TideChartCommentBox::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartCommentBox_tide_5fchart_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontstyle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isreversed_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(isreversed_));
  clear_has_content();
}

TideChartCommentBox::~TideChartCommentBox() {
  // @@protoc_insertion_point(destructor:TideChartCommentBox)
  SharedDtor();
}

void TideChartCommentBox::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontstyle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_content()) {
    clear_content();
  }
}

void TideChartCommentBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartCommentBox& TideChartCommentBox::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartCommentBox_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartCommentBox::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:TideChartCommentBox)
  switch (content_case()) {
    case kText: {
      content_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kImage: {
      content_.image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kIcon: {
      content_.icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void TideChartCommentBox::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartCommentBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alignment_.Clear();
  border_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontstyle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isreversed_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(isreversed_));
  clear_content();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartCommentBox::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartCommentBox*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartCommentBox.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string region = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartCommentBox.region");
        object = msg->mutable_region();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // sint32 posX = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_posx(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // sint32 posY = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_posy(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 width = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 height = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string text = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartCommentBox.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes image = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string icon = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartCommentBox.icon");
        object = msg->mutable_icon();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double fontSize = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_fontsize(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string fontStyle = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartCommentBox.fontStyle");
        object = msg->mutable_fontstyle();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated sint32 alignment = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) == 98) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedSInt32Parser;
          object = msg->mutable_alignment();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        do {
          msg->add_alignment(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 96 && (ptr += 1));
        break;
      }
      // int32 color = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_color(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 background = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_background(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 border = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) == 122) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_border();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        do {
          msg->add_border(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 120 && (ptr += 1));
        break;
      }
      // bool isRaised = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_israised(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isReversed = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_isreversed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartCommentBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartCommentBox)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartCommentBox.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), static_cast<int>(this->region().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartCommentBox.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 posX = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 posY = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartCommentBox.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string icon = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->icon().data(), static_cast<int>(this->icon().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartCommentBox.icon"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fontSize = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fontsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fontStyle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontstyle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fontstyle().data(), static_cast<int>(this->fontstyle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartCommentBox.fontStyle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 alignment = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_alignment())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 98u, input, this->mutable_alignment())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 color = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 background = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &background_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 border = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_border())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 122u, input, this->mutable_border())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isRaised = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &israised_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isReversed = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreversed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartCommentBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartCommentBox)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartCommentBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartCommentBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommentBox.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string region = 2;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommentBox.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->region(), output);
  }

  // sint32 posX = 3;
  if (this->posx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->posx(), output);
  }

  // sint32 posY = 4;
  if (this->posy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->posy(), output);
  }

  // int32 width = 5;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  // int32 height = 6;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->height(), output);
  }

  // string text = 7;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommentBox.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->text(), output);
  }

  // bytes image = 8;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->image(), output);
  }

  // string icon = 9;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommentBox.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->icon(), output);
  }

  // double fontSize = 10;
  if (this->fontsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->fontsize(), output);
  }

  // string fontStyle = 11;
  if (this->fontstyle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fontstyle().data(), static_cast<int>(this->fontstyle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommentBox.fontStyle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->fontstyle(), output);
  }

  // repeated sint32 alignment = 12;
  if (this->alignment_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_alignment_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->alignment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->alignment(i), output);
  }

  // int32 color = 13;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->color(), output);
  }

  // int32 background = 14;
  if (this->background() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->background(), output);
  }

  // repeated int32 border = 15;
  if (this->border_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_border_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->border_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->border(i), output);
  }

  // bool isRaised = 16;
  if (this->israised() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->israised(), output);
  }

  // bool isReversed = 17;
  if (this->isreversed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isreversed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartCommentBox)
}

::google::protobuf::uint8* TideChartCommentBox::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartCommentBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommentBox.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string region = 2;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommentBox.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->region(), target);
  }

  // sint32 posX = 3;
  if (this->posx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->posx(), target);
  }

  // sint32 posY = 4;
  if (this->posy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->posy(), target);
  }

  // int32 width = 5;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->width(), target);
  }

  // int32 height = 6;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->height(), target);
  }

  // string text = 7;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommentBox.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->text(), target);
  }

  // bytes image = 8;
  if (has_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->image(), target);
  }

  // string icon = 9;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommentBox.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->icon(), target);
  }

  // double fontSize = 10;
  if (this->fontsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->fontsize(), target);
  }

  // string fontStyle = 11;
  if (this->fontstyle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fontstyle().data(), static_cast<int>(this->fontstyle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommentBox.fontStyle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->fontstyle(), target);
  }

  // repeated sint32 alignment = 12;
  if (this->alignment_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _alignment_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->alignment_, target);
  }

  // int32 color = 13;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->color(), target);
  }

  // int32 background = 14;
  if (this->background() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->background(), target);
  }

  // repeated int32 border = 15;
  if (this->border_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _border_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->border_, target);
  }

  // bool isRaised = 16;
  if (this->israised() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->israised(), target);
  }

  // bool isReversed = 17;
  if (this->isreversed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isreversed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartCommentBox)
  return target;
}

size_t TideChartCommentBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartCommentBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 alignment = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->alignment_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _alignment_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 border = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->border_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _border_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string region = 2;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  // string fontStyle = 11;
  if (this->fontstyle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fontstyle());
  }

  // sint32 posX = 3;
  if (this->posx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->posx());
  }

  // sint32 posY = 4;
  if (this->posy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->posy());
  }

  // int32 width = 5;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 6;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // double fontSize = 10;
  if (this->fontsize() != 0) {
    total_size += 1 + 8;
  }

  // int32 color = 13;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  // int32 background = 14;
  if (this->background() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->background());
  }

  // bool isRaised = 16;
  if (this->israised() != 0) {
    total_size += 2 + 1;
  }

  // bool isReversed = 17;
  if (this->isreversed() != 0) {
    total_size += 2 + 1;
  }

  switch (content_case()) {
    // string text = 7;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
      break;
    }
    // bytes image = 8;
    case kImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image());
      break;
    }
    // string icon = 9;
    case kIcon: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartCommentBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartCommentBox)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartCommentBox* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartCommentBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartCommentBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartCommentBox)
    MergeFrom(*source);
  }
}

void TideChartCommentBox::MergeFrom(const TideChartCommentBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartCommentBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alignment_.MergeFrom(from.alignment_);
  border_.MergeFrom(from.border_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.fontstyle().size() > 0) {

    fontstyle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fontstyle_);
  }
  if (from.posx() != 0) {
    set_posx(from.posx());
  }
  if (from.posy() != 0) {
    set_posy(from.posy());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.fontsize() != 0) {
    set_fontsize(from.fontsize());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.background() != 0) {
    set_background(from.background());
  }
  if (from.israised() != 0) {
    set_israised(from.israised());
  }
  if (from.isreversed() != 0) {
    set_isreversed(from.isreversed());
  }
  switch (from.content_case()) {
    case kText: {
      set_text(from.text());
      break;
    }
    case kImage: {
      set_image(from.image());
      break;
    }
    case kIcon: {
      set_icon(from.icon());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void TideChartCommentBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartCommentBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartCommentBox::CopyFrom(const TideChartCommentBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartCommentBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartCommentBox::IsInitialized() const {
  return true;
}

void TideChartCommentBox::Swap(TideChartCommentBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartCommentBox::InternalSwap(TideChartCommentBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  alignment_.InternalSwap(&other->alignment_);
  border_.InternalSwap(&other->border_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_.Swap(&other->region_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fontstyle_.Swap(&other->fontstyle_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(fontsize_, other->fontsize_);
  swap(color_, other->color_);
  swap(background_, other->background_);
  swap(israised_, other->israised_);
  swap(isreversed_, other->isreversed_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TideChartCommentBox::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartWidget::InitAsDefaultInstance() {
  ::_TideChartWidget_default_instance_.link_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartWidget_default_instance_.port_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartWidget_default_instance_.node_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class TideChartWidget::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartWidget::kIdFieldNumber;
const int TideChartWidget::kTypeFieldNumber;
const int TideChartWidget::kTitleFieldNumber;
const int TideChartWidget::kRegionFieldNumber;
const int TideChartWidget::kPosXFieldNumber;
const int TideChartWidget::kPosYFieldNumber;
const int TideChartWidget::kWidthFieldNumber;
const int TideChartWidget::kHeightFieldNumber;
const int TideChartWidget::kLinkFieldNumber;
const int TideChartWidget::kPortFieldNumber;
const int TideChartWidget::kNodeFieldNumber;
const int TideChartWidget::kPropsFieldNumber;
const int TideChartWidget::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartWidget::TideChartWidget()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartWidget)
}
TideChartWidget::TideChartWidget(const TideChartWidget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      props_(from.props_),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  ::memcpy(&posx_, &from.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(height_));
  clear_has_target();
  switch (from.target_case()) {
    case kLink: {
      set_link(from.link());
      break;
    }
    case kPort: {
      set_port(from.port());
      break;
    }
    case kNode: {
      set_node(from.node());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TideChartWidget)
}

void TideChartWidget::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartWidget_tide_5fchart_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(height_));
  clear_has_target();
}

TideChartWidget::~TideChartWidget() {
  // @@protoc_insertion_point(destructor:TideChartWidget)
  SharedDtor();
}

void TideChartWidget::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_target()) {
    clear_target();
  }
}

void TideChartWidget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartWidget& TideChartWidget::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartWidget_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartWidget::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:TideChartWidget)
  switch (target_case()) {
    case kLink: {
      target_.link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kPort: {
      target_.port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kNode: {
      target_.node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void TideChartWidget::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartWidget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  settings_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(height_));
  clear_target();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartWidget::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartWidget*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartWidget.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartWidget.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string title = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartWidget.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string region = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartWidget.region");
        object = msg->mutable_region();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // sint32 posX = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_posx(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // sint32 posY = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_posy(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 width = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 height = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string link = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartWidget.link");
        object = msg->mutable_link();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string port = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartWidget.port");
        object = msg->mutable_port();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string node = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartWidget.node");
        object = msg->mutable_node();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .TideChartProperty props = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_props();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      // repeated .TideChartProperty settings = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 434 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartWidget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartWidget)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartWidget.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartWidget.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartWidget.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), static_cast<int>(this->region().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartWidget.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 posX = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 posY = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string link = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->link().data(), static_cast<int>(this->link().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartWidget.link"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port().data(), static_cast<int>(this->port().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartWidget.port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), static_cast<int>(this->node().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartWidget.node"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty props = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty settings = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartWidget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartWidget)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartWidget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartWidget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // string region = 4;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->region(), output);
  }

  // sint32 posX = 5;
  if (this->posx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->posx(), output);
  }

  // sint32 posY = 6;
  if (this->posy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->posy(), output);
  }

  // int32 width = 7;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->width(), output);
  }

  // int32 height = 8;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->height(), output);
  }

  // string link = 9;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->link(), output);
  }

  // string port = 10;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->port(), output);
  }

  // string node = 11;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->node(), output);
  }

  // repeated .TideChartProperty props = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->props(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartProperty settings = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->settings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartWidget)
}

::google::protobuf::uint8* TideChartWidget::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartWidget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // string region = 4;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->region(), target);
  }

  // sint32 posX = 5;
  if (this->posx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->posx(), target);
  }

  // sint32 posY = 6;
  if (this->posy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->posy(), target);
  }

  // int32 width = 7;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->width(), target);
  }

  // int32 height = 8;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->height(), target);
  }

  // string link = 9;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->link(), target);
  }

  // string port = 10;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->port(), target);
  }

  // string node = 11;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartWidget.node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->node(), target);
  }

  // repeated .TideChartProperty props = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->props(static_cast<int>(i)), target);
  }

  // repeated .TideChartProperty settings = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->settings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartWidget)
  return target;
}

size_t TideChartWidget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartWidget)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartProperty props = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // repeated .TideChartProperty settings = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->settings(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string region = 4;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  // sint32 posX = 5;
  if (this->posx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->posx());
  }

  // sint32 posY = 6;
  if (this->posy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->posy());
  }

  // int32 width = 7;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 8;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  switch (target_case()) {
    // string link = 9;
    case kLink: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link());
      break;
    }
    // string port = 10;
    case kPort: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
      break;
    }
    // string node = 11;
    case kNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartWidget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartWidget)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartWidget* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartWidget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartWidget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartWidget)
    MergeFrom(*source);
  }
}

void TideChartWidget::MergeFrom(const TideChartWidget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartWidget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
  settings_.MergeFrom(from.settings_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.posx() != 0) {
    set_posx(from.posx());
  }
  if (from.posy() != 0) {
    set_posy(from.posy());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  switch (from.target_case()) {
    case kLink: {
      set_link(from.link());
      break;
    }
    case kPort: {
      set_port(from.port());
      break;
    }
    case kNode: {
      set_node(from.node());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void TideChartWidget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartWidget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartWidget::CopyFrom(const TideChartWidget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartWidget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartWidget::IsInitialized() const {
  return true;
}

void TideChartWidget::Swap(TideChartWidget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartWidget::InternalSwap(TideChartWidget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  CastToBase(&settings_)->InternalSwap(CastToBase(&other->settings_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_.Swap(&other->region_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TideChartWidget::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartPort::InitAsDefaultInstance() {
}
class TideChartPort::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartPort::kTypeFieldNumber;
const int TideChartPort::kNodeFieldNumber;
const int TideChartPort::kNameFieldNumber;
const int TideChartPort::kOrdinalFieldNumber;
const int TideChartPort::kIsDefaultFieldNumber;
const int TideChartPort::kIsRequiredFieldNumber;
const int TideChartPort::kAllowedFieldNumber;
const int TideChartPort::kHintFieldNumber;
const int TideChartPort::kValueFieldNumber;
const int TideChartPort::kTriggerFieldNumber;
const int TideChartPort::kLinkFieldNumber;
const int TideChartPort::kEventFieldNumber;
const int TideChartPort::kSyncGroupFieldNumber;
const int TideChartPort::kIsBlockingFieldNumber;
const int TideChartPort::kIsQueuingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartPort::TideChartPort()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartPort)
}
TideChartPort::TideChartPort(const TideChartPort& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      allowed_(from.allowed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node().size() > 0) {
    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  hint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hint().size() > 0) {
    hint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hint_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  trigger_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trigger().size() > 0) {
    trigger_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_);
  }
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.link().size() > 0) {
    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event().size() > 0) {
    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
  syncgroup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.syncgroup().size() > 0) {
    syncgroup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.syncgroup_);
  }
  ::memcpy(&ordinal_, &from.ordinal_,
    static_cast<size_t>(reinterpret_cast<char*>(&isqueuing_) -
    reinterpret_cast<char*>(&ordinal_)) + sizeof(isqueuing_));
  // @@protoc_insertion_point(copy_constructor:TideChartPort)
}

void TideChartPort::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartPort_tide_5fchart_2eproto.base);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  syncgroup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordinal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isqueuing_) -
      reinterpret_cast<char*>(&ordinal_)) + sizeof(isqueuing_));
}

TideChartPort::~TideChartPort() {
  // @@protoc_insertion_point(destructor:TideChartPort)
  SharedDtor();
}

void TideChartPort::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  syncgroup_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartPort& TideChartPort::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartPort_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartPort::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartPort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_.Clear();
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  syncgroup_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordinal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isqueuing_) -
      reinterpret_cast<char*>(&ordinal_)) + sizeof(isqueuing_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartPort::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartPort*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPort.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string node = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPort.node");
        object = msg->mutable_node();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPort.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 ordinal = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_ordinal(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isDefault = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_isdefault(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isRequired = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_isrequired(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string allowed = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("TideChartPort.allowed");
          object = msg->add_allowed();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // string hint = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPort.hint");
        object = msg->mutable_hint();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string value = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPort.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string trigger = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPort.trigger");
        object = msg->mutable_trigger();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string link = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPort.link");
        object = msg->mutable_link();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string event = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPort.event");
        object = msg->mutable_event();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string syncGroup = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPort.syncGroup");
        object = msg->mutable_syncgroup();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool isBlocking = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_isblocking(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isQueuing = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_isqueuing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartPort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartPort)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPort.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), static_cast<int>(this->node().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPort.node"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPort.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ordinal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDefault = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isRequired = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrequired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string allowed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allowed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allowed(this->allowed_size() - 1).data(),
            static_cast<int>(this->allowed(this->allowed_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPort.allowed"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hint = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hint().data(), static_cast<int>(this->hint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPort.hint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPort.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trigger = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trigger().data(), static_cast<int>(this->trigger().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPort.trigger"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string link = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->link().data(), static_cast<int>(this->link().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPort.link"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string event = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event().data(), static_cast<int>(this->event().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPort.event"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string syncGroup = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_syncgroup()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->syncgroup().data(), static_cast<int>(this->syncgroup().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPort.syncGroup"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isBlocking = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblocking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isQueuing = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isqueuing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartPort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartPort)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartPort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartPort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // string node = 2;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // int32 ordinal = 4;
  if (this->ordinal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ordinal(), output);
  }

  // bool isDefault = 5;
  if (this->isdefault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdefault(), output);
  }

  // bool isRequired = 6;
  if (this->isrequired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isrequired(), output);
  }

  // repeated string allowed = 7;
  for (int i = 0, n = this->allowed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allowed(i).data(), static_cast<int>(this->allowed(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.allowed");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->allowed(i), output);
  }

  // string hint = 8;
  if (this->hint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hint().data(), static_cast<int>(this->hint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.hint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->hint(), output);
  }

  // string value = 9;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->value(), output);
  }

  // string trigger = 10;
  if (this->trigger().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger().data(), static_cast<int>(this->trigger().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.trigger");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->trigger(), output);
  }

  // string link = 11;
  if (this->link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->link(), output);
  }

  // string event = 12;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->event(), output);
  }

  // string syncGroup = 13;
  if (this->syncgroup().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->syncgroup().data(), static_cast<int>(this->syncgroup().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.syncGroup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->syncgroup(), output);
  }

  // bool isBlocking = 14;
  if (this->isblocking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isblocking(), output);
  }

  // bool isQueuing = 15;
  if (this->isqueuing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isqueuing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartPort)
}

::google::protobuf::uint8* TideChartPort::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartPort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // string node = 2;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // int32 ordinal = 4;
  if (this->ordinal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ordinal(), target);
  }

  // bool isDefault = 5;
  if (this->isdefault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdefault(), target);
  }

  // bool isRequired = 6;
  if (this->isrequired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isrequired(), target);
  }

  // repeated string allowed = 7;
  for (int i = 0, n = this->allowed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allowed(i).data(), static_cast<int>(this->allowed(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.allowed");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->allowed(i), target);
  }

  // string hint = 8;
  if (this->hint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hint().data(), static_cast<int>(this->hint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.hint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->hint(), target);
  }

  // string value = 9;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->value(), target);
  }

  // string trigger = 10;
  if (this->trigger().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger().data(), static_cast<int>(this->trigger().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.trigger");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->trigger(), target);
  }

  // string link = 11;
  if (this->link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->link(), target);
  }

  // string event = 12;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->event(), target);
  }

  // string syncGroup = 13;
  if (this->syncgroup().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->syncgroup().data(), static_cast<int>(this->syncgroup().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPort.syncGroup");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->syncgroup(), target);
  }

  // bool isBlocking = 14;
  if (this->isblocking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isblocking(), target);
  }

  // bool isQueuing = 15;
  if (this->isqueuing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isqueuing(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartPort)
  return target;
}

size_t TideChartPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartPort)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allowed = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allowed_size());
  for (int i = 0, n = this->allowed_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allowed(i));
  }

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string node = 2;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string hint = 8;
  if (this->hint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hint());
  }

  // string value = 9;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string trigger = 10;
  if (this->trigger().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trigger());
  }

  // string link = 11;
  if (this->link().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link());
  }

  // string event = 12;
  if (this->event().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event());
  }

  // string syncGroup = 13;
  if (this->syncgroup().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->syncgroup());
  }

  // int32 ordinal = 4;
  if (this->ordinal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ordinal());
  }

  // bool isDefault = 5;
  if (this->isdefault() != 0) {
    total_size += 1 + 1;
  }

  // bool isRequired = 6;
  if (this->isrequired() != 0) {
    total_size += 1 + 1;
  }

  // bool isBlocking = 14;
  if (this->isblocking() != 0) {
    total_size += 1 + 1;
  }

  // bool isQueuing = 15;
  if (this->isqueuing() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartPort::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartPort)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartPort* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartPort)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartPort)
    MergeFrom(*source);
  }
}

void TideChartPort::MergeFrom(const TideChartPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_.MergeFrom(from.allowed_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.node().size() > 0) {

    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.hint().size() > 0) {

    hint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hint_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.trigger().size() > 0) {

    trigger_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_);
  }
  if (from.link().size() > 0) {

    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  if (from.event().size() > 0) {

    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
  if (from.syncgroup().size() > 0) {

    syncgroup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.syncgroup_);
  }
  if (from.ordinal() != 0) {
    set_ordinal(from.ordinal());
  }
  if (from.isdefault() != 0) {
    set_isdefault(from.isdefault());
  }
  if (from.isrequired() != 0) {
    set_isrequired(from.isrequired());
  }
  if (from.isblocking() != 0) {
    set_isblocking(from.isblocking());
  }
  if (from.isqueuing() != 0) {
    set_isqueuing(from.isqueuing());
  }
}

void TideChartPort::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartPort::CopyFrom(const TideChartPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartPort::IsInitialized() const {
  return true;
}

void TideChartPort::Swap(TideChartPort* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartPort::InternalSwap(TideChartPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  allowed_.InternalSwap(CastToBase(&other->allowed_));
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_.Swap(&other->node_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hint_.Swap(&other->hint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trigger_.Swap(&other->trigger_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_.Swap(&other->link_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_.Swap(&other->event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  syncgroup_.Swap(&other->syncgroup_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordinal_, other->ordinal_);
  swap(isdefault_, other->isdefault_);
  swap(isrequired_, other->isrequired_);
  swap(isblocking_, other->isblocking_);
  swap(isqueuing_, other->isqueuing_);
}

::google::protobuf::Metadata TideChartPort::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartLink::InitAsDefaultInstance() {
}
class TideChartLink::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartLink::kOutNodeFieldNumber;
const int TideChartLink::kOutPortFieldNumber;
const int TideChartLink::kInNodeFieldNumber;
const int TideChartLink::kInPortFieldNumber;
const int TideChartLink::kGroupFieldNumber;
const int TideChartLink::kDelayFieldNumber;
const int TideChartLink::kLinkFieldNumber;
const int TideChartLink::kIsLoggingFieldNumber;
const int TideChartLink::kIsDebuggingFieldNumber;
const int TideChartLink::kIsPausedFieldNumber;
const int TideChartLink::kIsDisabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartLink::TideChartLink()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartLink)
}
TideChartLink::TideChartLink(const TideChartLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  outnode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.outnode().size() > 0) {
    outnode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.outnode_);
  }
  outport_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.outport().size() > 0) {
    outport_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.outport_);
  }
  innode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.innode().size() > 0) {
    innode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.innode_);
  }
  inport_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inport().size() > 0) {
    inport_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inport_);
  }
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.link().size() > 0) {
    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  ::memcpy(&group_, &from.group_,
    static_cast<size_t>(reinterpret_cast<char*>(&isdisabled_) -
    reinterpret_cast<char*>(&group_)) + sizeof(isdisabled_));
  // @@protoc_insertion_point(copy_constructor:TideChartLink)
}

void TideChartLink::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartLink_tide_5fchart_2eproto.base);
  outnode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outport_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  innode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inport_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdisabled_) -
      reinterpret_cast<char*>(&group_)) + sizeof(isdisabled_));
}

TideChartLink::~TideChartLink() {
  // @@protoc_insertion_point(destructor:TideChartLink)
  SharedDtor();
}

void TideChartLink::SharedDtor() {
  outnode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outport_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  innode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inport_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartLink& TideChartLink::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartLink_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartLink::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outnode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  innode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdisabled_) -
      reinterpret_cast<char*>(&group_)) + sizeof(isdisabled_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartLink::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartLink*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string outNode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLink.outNode");
        object = msg->mutable_outnode();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string outPort = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLink.outPort");
        object = msg->mutable_outport();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string inNode = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLink.inNode");
        object = msg->mutable_innode();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string inPort = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLink.inPort");
        object = msg->mutable_inport();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 group = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 delay = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string link = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLink.link");
        object = msg->mutable_link();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool isLogging = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_islogging(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isDebugging = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_isdebugging(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isPaused = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_ispaused(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isDisabled = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_isdisabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartLink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string outNode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outnode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->outnode().data(), static_cast<int>(this->outnode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLink.outNode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string outPort = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outport()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->outport().data(), static_cast<int>(this->outport().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLink.outPort"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inNode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_innode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->innode().data(), static_cast<int>(this->innode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLink.inNode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inPort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inport()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inport().data(), static_cast<int>(this->inport().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLink.inPort"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 delay = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string link = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->link().data(), static_cast<int>(this->link().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLink.link"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isLogging = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islogging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDebugging = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdebugging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isPaused = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispaused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDisabled = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdisabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartLink)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string outNode = 1;
  if (this->outnode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->outnode().data(), static_cast<int>(this->outnode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLink.outNode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->outnode(), output);
  }

  // string outPort = 2;
  if (this->outport().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->outport().data(), static_cast<int>(this->outport().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLink.outPort");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->outport(), output);
  }

  // string inNode = 3;
  if (this->innode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->innode().data(), static_cast<int>(this->innode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLink.inNode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->innode(), output);
  }

  // string inPort = 4;
  if (this->inport().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inport().data(), static_cast<int>(this->inport().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLink.inPort");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->inport(), output);
  }

  // int32 group = 5;
  if (this->group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group(), output);
  }

  // int32 delay = 6;
  if (this->delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delay(), output);
  }

  // string link = 7;
  if (this->link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLink.link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->link(), output);
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->islogging(), output);
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isdebugging(), output);
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->ispaused(), output);
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isdisabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartLink)
}

::google::protobuf::uint8* TideChartLink::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string outNode = 1;
  if (this->outnode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->outnode().data(), static_cast<int>(this->outnode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLink.outNode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->outnode(), target);
  }

  // string outPort = 2;
  if (this->outport().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->outport().data(), static_cast<int>(this->outport().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLink.outPort");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->outport(), target);
  }

  // string inNode = 3;
  if (this->innode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->innode().data(), static_cast<int>(this->innode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLink.inNode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->innode(), target);
  }

  // string inPort = 4;
  if (this->inport().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inport().data(), static_cast<int>(this->inport().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLink.inPort");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->inport(), target);
  }

  // int32 group = 5;
  if (this->group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group(), target);
  }

  // int32 delay = 6;
  if (this->delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delay(), target);
  }

  // string link = 7;
  if (this->link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLink.link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->link(), target);
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->islogging(), target);
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isdebugging(), target);
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->ispaused(), target);
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isdisabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartLink)
  return target;
}

size_t TideChartLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string outNode = 1;
  if (this->outnode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->outnode());
  }

  // string outPort = 2;
  if (this->outport().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->outport());
  }

  // string inNode = 3;
  if (this->innode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->innode());
  }

  // string inPort = 4;
  if (this->inport().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inport());
  }

  // string link = 7;
  if (this->link().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link());
  }

  // int32 group = 5;
  if (this->group() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group());
  }

  // int32 delay = 6;
  if (this->delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delay());
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    total_size += 2 + 1;
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    total_size += 2 + 1;
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    total_size += 2 + 1;
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartLink)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartLink* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartLink)
    MergeFrom(*source);
  }
}

void TideChartLink::MergeFrom(const TideChartLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.outnode().size() > 0) {

    outnode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.outnode_);
  }
  if (from.outport().size() > 0) {

    outport_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.outport_);
  }
  if (from.innode().size() > 0) {

    innode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.innode_);
  }
  if (from.inport().size() > 0) {

    inport_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inport_);
  }
  if (from.link().size() > 0) {

    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  if (from.group() != 0) {
    set_group(from.group());
  }
  if (from.delay() != 0) {
    set_delay(from.delay());
  }
  if (from.islogging() != 0) {
    set_islogging(from.islogging());
  }
  if (from.isdebugging() != 0) {
    set_isdebugging(from.isdebugging());
  }
  if (from.ispaused() != 0) {
    set_ispaused(from.ispaused());
  }
  if (from.isdisabled() != 0) {
    set_isdisabled(from.isdisabled());
  }
}

void TideChartLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartLink::CopyFrom(const TideChartLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartLink::IsInitialized() const {
  return true;
}

void TideChartLink::Swap(TideChartLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartLink::InternalSwap(TideChartLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  outnode_.Swap(&other->outnode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  outport_.Swap(&other->outport_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  innode_.Swap(&other->innode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inport_.Swap(&other->inport_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_.Swap(&other->link_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_, other->group_);
  swap(delay_, other->delay_);
  swap(islogging_, other->islogging_);
  swap(isdebugging_, other->isdebugging_);
  swap(ispaused_, other->ispaused_);
  swap(isdisabled_, other->isdisabled_);
}

::google::protobuf::Metadata TideChartLink::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartNote::InitAsDefaultInstance() {
}
class TideChartNote::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartNote::kIdFieldNumber;
const int TideChartNote::kReplyToFieldNumber;
const int TideChartNote::kChangeToFieldNumber;
const int TideChartNote::kContentFieldNumber;
const int TideChartNote::kCreatedByFieldNumber;
const int TideChartNote::kCreatedDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartNote::TideChartNote()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartNote)
}
TideChartNote::TideChartNote(const TideChartNote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  replyto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.replyto().size() > 0) {
    replyto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replyto_);
  }
  changeto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.changeto().size() > 0) {
    changeto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.changeto_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  createdby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.createdby().size() > 0) {
    createdby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdby_);
  }
  createddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.createddate().size() > 0) {
    createddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createddate_);
  }
  // @@protoc_insertion_point(copy_constructor:TideChartNote)
}

void TideChartNote::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartNote_tide_5fchart_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replyto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  changeto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TideChartNote::~TideChartNote() {
  // @@protoc_insertion_point(destructor:TideChartNote)
  SharedDtor();
}

void TideChartNote::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replyto_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  changeto_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdby_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartNote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartNote& TideChartNote::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartNote_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartNote::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartNote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replyto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  changeto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartNote::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartNote*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNote.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string replyTo = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNote.replyTo");
        object = msg->mutable_replyto();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string changeTo = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNote.changeTo");
        object = msg->mutable_changeto();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string content = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNote.content");
        object = msg->mutable_content();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string createdBy = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNote.createdBy");
        object = msg->mutable_createdby();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string createdDate = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNote.createdDate");
        object = msg->mutable_createddate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartNote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartNote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNote.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string replyTo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replyto()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->replyto().data(), static_cast<int>(this->replyto().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNote.replyTo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string changeTo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_changeto()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->changeto().data(), static_cast<int>(this->changeto().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNote.changeTo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNote.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string createdBy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdby()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->createdby().data(), static_cast<int>(this->createdby().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNote.createdBy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string createdDate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createddate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->createddate().data(), static_cast<int>(this->createddate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNote.createdDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartNote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartNote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartNote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartNote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string replyTo = 2;
  if (this->replyto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->replyto().data(), static_cast<int>(this->replyto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.replyTo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->replyto(), output);
  }

  // string changeTo = 3;
  if (this->changeto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->changeto().data(), static_cast<int>(this->changeto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.changeTo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->changeto(), output);
  }

  // string content = 4;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // string createdBy = 5;
  if (this->createdby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdby().data(), static_cast<int>(this->createdby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.createdBy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->createdby(), output);
  }

  // string createdDate = 6;
  if (this->createddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createddate().data(), static_cast<int>(this->createddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.createdDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->createddate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartNote)
}

::google::protobuf::uint8* TideChartNote::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartNote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string replyTo = 2;
  if (this->replyto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->replyto().data(), static_cast<int>(this->replyto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.replyTo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->replyto(), target);
  }

  // string changeTo = 3;
  if (this->changeto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->changeto().data(), static_cast<int>(this->changeto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.changeTo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->changeto(), target);
  }

  // string content = 4;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // string createdBy = 5;
  if (this->createdby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdby().data(), static_cast<int>(this->createdby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.createdBy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->createdby(), target);
  }

  // string createdDate = 6;
  if (this->createddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createddate().data(), static_cast<int>(this->createddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNote.createdDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->createddate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartNote)
  return target;
}

size_t TideChartNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartNote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string replyTo = 2;
  if (this->replyto().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->replyto());
  }

  // string changeTo = 3;
  if (this->changeto().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->changeto());
  }

  // string content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // string createdBy = 5;
  if (this->createdby().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createdby());
  }

  // string createdDate = 6;
  if (this->createddate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createddate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartNote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartNote)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartNote* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartNote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartNote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartNote)
    MergeFrom(*source);
  }
}

void TideChartNote::MergeFrom(const TideChartNote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartNote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.replyto().size() > 0) {

    replyto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replyto_);
  }
  if (from.changeto().size() > 0) {

    changeto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.changeto_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.createdby().size() > 0) {

    createdby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdby_);
  }
  if (from.createddate().size() > 0) {

    createddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createddate_);
  }
}

void TideChartNote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartNote::CopyFrom(const TideChartNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartNote::IsInitialized() const {
  return true;
}

void TideChartNote::Swap(TideChartNote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartNote::InternalSwap(TideChartNote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  replyto_.Swap(&other->replyto_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  changeto_.Swap(&other->changeto_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createdby_.Swap(&other->createdby_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createddate_.Swap(&other->createddate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TideChartNote::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartNode::InitAsDefaultInstance() {
}
class TideChartNode::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartNode::kNameFieldNumber;
const int TideChartNode::kTypeFieldNumber;
const int TideChartNode::kPosXFieldNumber;
const int TideChartNode::kPosYFieldNumber;
const int TideChartNode::kTitleFieldNumber;
const int TideChartNode::kIconFieldNumber;
const int TideChartNode::kLibraryFieldNumber;
const int TideChartNode::kMethodFieldNumber;
const int TideChartNode::kDelayFieldNumber;
const int TideChartNode::kInportsFieldNumber;
const int TideChartNode::kOutportsFieldNumber;
const int TideChartNode::kPropsFieldNumber;
const int TideChartNode::kIsLoggingFieldNumber;
const int TideChartNode::kIsDebuggingFieldNumber;
const int TideChartNode::kIsPausedFieldNumber;
const int TideChartNode::kIsDisabledFieldNumber;
const int TideChartNode::kNotesFieldNumber;
const int TideChartNode::kScriptFieldNumber;
const int TideChartNode::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartNode::TideChartNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartNode)
}
TideChartNode::TideChartNode(const TideChartNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      inports_(from.inports_),
      outports_(from.outports_),
      props_(from.props_),
      notes_(from.notes_),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.icon().size() > 0) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  library_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.library().size() > 0) {
    library_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.library_);
  }
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method().size() > 0) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.script().size() > 0) {
    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  ::memcpy(&posx_, &from.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&isdisabled_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(isdisabled_));
  // @@protoc_insertion_point(copy_constructor:TideChartNode)
}

void TideChartNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartNode_tide_5fchart_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  library_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdisabled_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(isdisabled_));
}

TideChartNode::~TideChartNode() {
  // @@protoc_insertion_point(destructor:TideChartNode)
  SharedDtor();
}

void TideChartNode::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  library_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartNode& TideChartNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartNode_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartNode::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inports_.Clear();
  outports_.Clear();
  props_.Clear();
  notes_.Clear();
  settings_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  library_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdisabled_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(isdisabled_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNode.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNode.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // sint32 posX = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_posx(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // sint32 posY = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_posy(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string title = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNode.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string icon = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNode.icon");
        object = msg->mutable_icon();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string library = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNode.library");
        object = msg->mutable_library();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string method = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNode.method");
        object = msg->mutable_method();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 delay = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .TideChartPort inports = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartPort::_InternalParse;
          object = msg->add_inports();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // repeated .TideChartPort outports = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartPort::_InternalParse;
          object = msg->add_outports();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // repeated .TideChartProperty props = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_props();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      // bool isLogging = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_islogging(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isDebugging = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_isdebugging(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isPaused = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_ispaused(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isDisabled = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_isdisabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .TideChartNote notes = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartNote::_InternalParse;
          object = msg->add_notes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 418 && (ptr += 2));
        break;
      }
      // string script = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNode.script");
        object = msg->mutable_script();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .TideChartProperty settings = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 434 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNode.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNode.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 posX = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 posY = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNode.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string icon = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->icon().data(), static_cast<int>(this->icon().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNode.icon"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string library = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_library()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->library().data(), static_cast<int>(this->library().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNode.library"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method().data(), static_cast<int>(this->method().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNode.method"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 delay = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartPort inports = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartPort outports = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty props = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isLogging = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islogging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDebugging = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdebugging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isPaused = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispaused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDisabled = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdisabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartNote notes = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string script = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->script().data(), static_cast<int>(this->script().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNode.script"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty settings = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // sint32 posX = 3;
  if (this->posx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->posx(), output);
  }

  // sint32 posY = 4;
  if (this->posy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->posy(), output);
  }

  // string title = 5;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // string icon = 6;
  if (this->icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->icon(), output);
  }

  // string library = 7;
  if (this->library().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->library().data(), static_cast<int>(this->library().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.library");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->library(), output);
  }

  // string method = 8;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->method(), output);
  }

  // int32 delay = 9;
  if (this->delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->delay(), output);
  }

  // repeated .TideChartPort inports = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->inports(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartPort outports = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->outports(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartProperty props = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->props(static_cast<int>(i)),
      output);
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->islogging(), output);
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isdebugging(), output);
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->ispaused(), output);
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isdisabled(), output);
  }

  // repeated .TideChartNote notes = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->notes(static_cast<int>(i)),
      output);
  }

  // string script = 21;
  if (this->script().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.script");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->script(), output);
  }

  // repeated .TideChartProperty settings = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->settings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartNode)
}

::google::protobuf::uint8* TideChartNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // sint32 posX = 3;
  if (this->posx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->posx(), target);
  }

  // sint32 posY = 4;
  if (this->posy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->posy(), target);
  }

  // string title = 5;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // string icon = 6;
  if (this->icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->icon(), target);
  }

  // string library = 7;
  if (this->library().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->library().data(), static_cast<int>(this->library().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.library");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->library(), target);
  }

  // string method = 8;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->method(), target);
  }

  // int32 delay = 9;
  if (this->delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->delay(), target);
  }

  // repeated .TideChartPort inports = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->inports(static_cast<int>(i)), target);
  }

  // repeated .TideChartPort outports = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->outports(static_cast<int>(i)), target);
  }

  // repeated .TideChartProperty props = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->props(static_cast<int>(i)), target);
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->islogging(), target);
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isdebugging(), target);
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->ispaused(), target);
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isdisabled(), target);
  }

  // repeated .TideChartNote notes = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->notes(static_cast<int>(i)), target);
  }

  // string script = 21;
  if (this->script().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNode.script");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->script(), target);
  }

  // repeated .TideChartProperty settings = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->settings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartNode)
  return target;
}

size_t TideChartNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartPort inports = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->inports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inports(static_cast<int>(i)));
    }
  }

  // repeated .TideChartPort outports = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->outports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outports(static_cast<int>(i)));
    }
  }

  // repeated .TideChartProperty props = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // repeated .TideChartNote notes = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->notes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notes(static_cast<int>(i)));
    }
  }

  // repeated .TideChartProperty settings = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->settings(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string title = 5;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string icon = 6;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->icon());
  }

  // string library = 7;
  if (this->library().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->library());
  }

  // string method = 8;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  // string script = 21;
  if (this->script().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->script());
  }

  // sint32 posX = 3;
  if (this->posx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->posx());
  }

  // sint32 posY = 4;
  if (this->posy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->posy());
  }

  // int32 delay = 9;
  if (this->delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delay());
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    total_size += 2 + 1;
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    total_size += 2 + 1;
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    total_size += 2 + 1;
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartNode* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartNode)
    MergeFrom(*source);
  }
}

void TideChartNode::MergeFrom(const TideChartNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inports_.MergeFrom(from.inports_);
  outports_.MergeFrom(from.outports_);
  props_.MergeFrom(from.props_);
  notes_.MergeFrom(from.notes_);
  settings_.MergeFrom(from.settings_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.library().size() > 0) {

    library_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.library_);
  }
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.script().size() > 0) {

    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  if (from.posx() != 0) {
    set_posx(from.posx());
  }
  if (from.posy() != 0) {
    set_posy(from.posy());
  }
  if (from.delay() != 0) {
    set_delay(from.delay());
  }
  if (from.islogging() != 0) {
    set_islogging(from.islogging());
  }
  if (from.isdebugging() != 0) {
    set_isdebugging(from.isdebugging());
  }
  if (from.ispaused() != 0) {
    set_ispaused(from.ispaused());
  }
  if (from.isdisabled() != 0) {
    set_isdisabled(from.isdisabled());
  }
}

void TideChartNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartNode::CopyFrom(const TideChartNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartNode::IsInitialized() const {
  return true;
}

void TideChartNode::Swap(TideChartNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartNode::InternalSwap(TideChartNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&inports_)->InternalSwap(CastToBase(&other->inports_));
  CastToBase(&outports_)->InternalSwap(CastToBase(&other->outports_));
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  CastToBase(&notes_)->InternalSwap(CastToBase(&other->notes_));
  CastToBase(&settings_)->InternalSwap(CastToBase(&other->settings_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  library_.Swap(&other->library_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_.Swap(&other->method_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  script_.Swap(&other->script_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(delay_, other->delay_);
  swap(islogging_, other->islogging_);
  swap(isdebugging_, other->isdebugging_);
  swap(ispaused_, other->ispaused_);
  swap(isdisabled_, other->isdisabled_);
}

::google::protobuf::Metadata TideChartNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartRegion::InitAsDefaultInstance() {
}
class TideChartRegion::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartRegion::kNameFieldNumber;
const int TideChartRegion::kTitleFieldNumber;
const int TideChartRegion::kNodesFieldNumber;
const int TideChartRegion::kGroupFieldNumber;
const int TideChartRegion::kScopeFieldNumber;
const int TideChartRegion::kPropsFieldNumber;
const int TideChartRegion::kIsLoggingFieldNumber;
const int TideChartRegion::kIsDebuggingFieldNumber;
const int TideChartRegion::kIsPausedFieldNumber;
const int TideChartRegion::kIsDisabledFieldNumber;
const int TideChartRegion::kNotesFieldNumber;
const int TideChartRegion::kScriptFieldNumber;
const int TideChartRegion::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartRegion::TideChartRegion()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartRegion)
}
TideChartRegion::TideChartRegion(const TideChartRegion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_),
      props_(from.props_),
      notes_(from.notes_),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scope().size() > 0) {
    scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scope_);
  }
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.script().size() > 0) {
    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  ::memcpy(&group_, &from.group_,
    static_cast<size_t>(reinterpret_cast<char*>(&isdisabled_) -
    reinterpret_cast<char*>(&group_)) + sizeof(isdisabled_));
  // @@protoc_insertion_point(copy_constructor:TideChartRegion)
}

void TideChartRegion::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartRegion_tide_5fchart_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdisabled_) -
      reinterpret_cast<char*>(&group_)) + sizeof(isdisabled_));
}

TideChartRegion::~TideChartRegion() {
  // @@protoc_insertion_point(destructor:TideChartRegion)
  SharedDtor();
}

void TideChartRegion::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartRegion& TideChartRegion::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartRegion_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  props_.Clear();
  notes_.Clear();
  settings_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdisabled_) -
      reinterpret_cast<char*>(&group_)) + sizeof(isdisabled_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartRegion::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartRegion*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartRegion.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string title = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartRegion.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string nodes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("TideChartRegion.nodes");
          object = msg->add_nodes();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // int32 group = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string scope = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartRegion.scope");
        object = msg->mutable_scope();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .TideChartProperty props = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_props();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // bool isLogging = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_islogging(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isDebugging = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_isdebugging(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isPaused = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_ispaused(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isDisabled = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_isdisabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .TideChartNote notes = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartNote::_InternalParse;
          object = msg->add_notes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 418 && (ptr += 2));
        break;
      }
      // string script = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartRegion.script");
        object = msg->mutable_script();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .TideChartProperty settings = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 434 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartRegion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartRegion.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartRegion.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string nodes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nodes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nodes(this->nodes_size() - 1).data(),
            static_cast<int>(this->nodes(this->nodes_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartRegion.nodes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string scope = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scope()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scope().data(), static_cast<int>(this->scope().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartRegion.scope"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty props = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isLogging = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islogging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDebugging = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdebugging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isPaused = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispaused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDisabled = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdisabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartNote notes = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string script = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->script().data(), static_cast<int>(this->script().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartRegion.script"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty settings = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartRegion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartRegion.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartRegion.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // repeated string nodes = 3;
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nodes(i).data(), static_cast<int>(this->nodes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartRegion.nodes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nodes(i), output);
  }

  // int32 group = 4;
  if (this->group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->group(), output);
  }

  // string scope = 5;
  if (this->scope().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scope().data(), static_cast<int>(this->scope().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartRegion.scope");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->scope(), output);
  }

  // repeated .TideChartProperty props = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->props(static_cast<int>(i)),
      output);
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->islogging(), output);
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isdebugging(), output);
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->ispaused(), output);
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isdisabled(), output);
  }

  // repeated .TideChartNote notes = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->notes(static_cast<int>(i)),
      output);
  }

  // string script = 21;
  if (this->script().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartRegion.script");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->script(), output);
  }

  // repeated .TideChartProperty settings = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->settings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartRegion)
}

::google::protobuf::uint8* TideChartRegion::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartRegion.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartRegion.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // repeated string nodes = 3;
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nodes(i).data(), static_cast<int>(this->nodes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartRegion.nodes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->nodes(i), target);
  }

  // int32 group = 4;
  if (this->group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->group(), target);
  }

  // string scope = 5;
  if (this->scope().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scope().data(), static_cast<int>(this->scope().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartRegion.scope");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->scope(), target);
  }

  // repeated .TideChartProperty props = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->props(static_cast<int>(i)), target);
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->islogging(), target);
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isdebugging(), target);
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->ispaused(), target);
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isdisabled(), target);
  }

  // repeated .TideChartNote notes = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->notes(static_cast<int>(i)), target);
  }

  // string script = 21;
  if (this->script().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartRegion.script");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->script(), target);
  }

  // repeated .TideChartProperty settings = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->settings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartRegion)
  return target;
}

size_t TideChartRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartRegion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string nodes = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->nodes_size());
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nodes(i));
  }

  // repeated .TideChartProperty props = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // repeated .TideChartNote notes = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->notes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notes(static_cast<int>(i)));
    }
  }

  // repeated .TideChartProperty settings = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->settings(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string scope = 5;
  if (this->scope().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scope());
  }

  // string script = 21;
  if (this->script().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->script());
  }

  // int32 group = 4;
  if (this->group() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group());
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    total_size += 2 + 1;
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    total_size += 2 + 1;
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    total_size += 2 + 1;
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartRegion* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartRegion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartRegion)
    MergeFrom(*source);
  }
}

void TideChartRegion::MergeFrom(const TideChartRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  props_.MergeFrom(from.props_);
  notes_.MergeFrom(from.notes_);
  settings_.MergeFrom(from.settings_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.scope().size() > 0) {

    scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scope_);
  }
  if (from.script().size() > 0) {

    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  if (from.group() != 0) {
    set_group(from.group());
  }
  if (from.islogging() != 0) {
    set_islogging(from.islogging());
  }
  if (from.isdebugging() != 0) {
    set_isdebugging(from.isdebugging());
  }
  if (from.ispaused() != 0) {
    set_ispaused(from.ispaused());
  }
  if (from.isdisabled() != 0) {
    set_isdisabled(from.isdisabled());
  }
}

void TideChartRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartRegion::CopyFrom(const TideChartRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartRegion::IsInitialized() const {
  return true;
}

void TideChartRegion::Swap(TideChartRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartRegion::InternalSwap(TideChartRegion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodes_.InternalSwap(CastToBase(&other->nodes_));
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  CastToBase(&notes_)->InternalSwap(CastToBase(&other->notes_));
  CastToBase(&settings_)->InternalSwap(CastToBase(&other->settings_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  scope_.Swap(&other->scope_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  script_.Swap(&other->script_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_, other->group_);
  swap(islogging_, other->islogging_);
  swap(isdebugging_, other->isdebugging_);
  swap(ispaused_, other->ispaused_);
  swap(isdisabled_, other->isdisabled_);
}

::google::protobuf::Metadata TideChartRegion::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartGraph::InitAsDefaultInstance() {
}
class TideChartGraph::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartGraph::kIdFieldNumber;
const int TideChartGraph::kTypeFieldNumber;
const int TideChartGraph::kNameFieldNumber;
const int TideChartGraph::kTitleFieldNumber;
const int TideChartGraph::kIconFieldNumber;
const int TideChartGraph::kVersionFieldNumber;
const int TideChartGraph::kSourceFieldNumber;
const int TideChartGraph::kNodesFieldNumber;
const int TideChartGraph::kLinksFieldNumber;
const int TideChartGraph::kRegionsFieldNumber;
const int TideChartGraph::kCommentsFieldNumber;
const int TideChartGraph::kWidgetsFieldNumber;
const int TideChartGraph::kPropsFieldNumber;
const int TideChartGraph::kHistoryFieldNumber;
const int TideChartGraph::kIsLoggingFieldNumber;
const int TideChartGraph::kIsDebuggingFieldNumber;
const int TideChartGraph::kIsPausedFieldNumber;
const int TideChartGraph::kIsDisabledFieldNumber;
const int TideChartGraph::kNotesFieldNumber;
const int TideChartGraph::kScriptFieldNumber;
const int TideChartGraph::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartGraph::TideChartGraph()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartGraph)
}
TideChartGraph::TideChartGraph(const TideChartGraph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_),
      links_(from.links_),
      regions_(from.regions_),
      comments_(from.comments_),
      widgets_(from.widgets_),
      props_(from.props_),
      history_(from.history_),
      notes_(from.notes_),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.icon().size() > 0) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.script().size() > 0) {
    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  ::memcpy(&islogging_, &from.islogging_,
    static_cast<size_t>(reinterpret_cast<char*>(&isdisabled_) -
    reinterpret_cast<char*>(&islogging_)) + sizeof(isdisabled_));
  // @@protoc_insertion_point(copy_constructor:TideChartGraph)
}

void TideChartGraph::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartCommand_tide_5fchart_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&islogging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdisabled_) -
      reinterpret_cast<char*>(&islogging_)) + sizeof(isdisabled_));
}

TideChartGraph::~TideChartGraph() {
  // @@protoc_insertion_point(destructor:TideChartGraph)
  SharedDtor();
}

void TideChartGraph::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartGraph& TideChartGraph::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  links_.Clear();
  regions_.Clear();
  comments_.Clear();
  widgets_.Clear();
  props_.Clear();
  history_.Clear();
  notes_.Clear();
  settings_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&islogging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdisabled_) -
      reinterpret_cast<char*>(&islogging_)) + sizeof(isdisabled_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartGraph::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartGraph*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartGraph.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartGraph.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartGraph.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string title = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartGraph.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string icon = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartGraph.icon");
        object = msg->mutable_icon();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartGraph.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string source = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartGraph.source");
        object = msg->mutable_source();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .TideChartNode nodes = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartNode::_InternalParse;
          object = msg->add_nodes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // repeated .TideChartLink links = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartLink::_InternalParse;
          object = msg->add_links();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // repeated .TideChartRegion regions = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartRegion::_InternalParse;
          object = msg->add_regions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // repeated .TideChartCommentBox comments = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartCommentBox::_InternalParse;
          object = msg->add_comments();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // repeated .TideChartWidget widgets = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartWidget::_InternalParse;
          object = msg->add_widgets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      // repeated .TideChartProperty props = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_props();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 106 && (ptr += 1));
        break;
      }
      // repeated .TideChartCommand history = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartCommand::_InternalParse;
          object = msg->add_history();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 114 && (ptr += 1));
        break;
      }
      // bool isLogging = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_islogging(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isDebugging = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_isdebugging(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isPaused = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_ispaused(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isDisabled = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_isdisabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .TideChartNote notes = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartNote::_InternalParse;
          object = msg->add_notes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 418 && (ptr += 2));
        break;
      }
      // string script = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartGraph.script");
        object = msg->mutable_script();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .TideChartProperty settings = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 434 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartGraph)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartGraph.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartGraph.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartGraph.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartGraph.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string icon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->icon().data(), static_cast<int>(this->icon().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartGraph.icon"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartGraph.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartGraph.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartNode nodes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartLink links = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartRegion regions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartCommentBox comments = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_comments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartWidget widgets = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_widgets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty props = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartCommand history = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isLogging = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islogging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDebugging = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdebugging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isPaused = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispaused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDisabled = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdisabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartNote notes = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string script = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->script().data(), static_cast<int>(this->script().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartGraph.script"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty settings = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartGraph)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // string icon = 5;
  if (this->icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->icon(), output);
  }

  // string version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  // string source = 7;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->source(), output);
  }

  // repeated .TideChartNode nodes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->nodes(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartLink links = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->links(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartRegion regions = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->regions(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartCommentBox comments = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->comments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->comments(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartWidget widgets = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->widgets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->widgets(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartProperty props = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->props(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartCommand history = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->history(static_cast<int>(i)),
      output);
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->islogging(), output);
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isdebugging(), output);
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->ispaused(), output);
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isdisabled(), output);
  }

  // repeated .TideChartNote notes = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->notes(static_cast<int>(i)),
      output);
  }

  // string script = 21;
  if (this->script().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.script");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->script(), output);
  }

  // repeated .TideChartProperty settings = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->settings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartGraph)
}

::google::protobuf::uint8* TideChartGraph::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // string icon = 5;
  if (this->icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon(), target);
  }

  // string version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // string source = 7;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->source(), target);
  }

  // repeated .TideChartNode nodes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->nodes(static_cast<int>(i)), target);
  }

  // repeated .TideChartLink links = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->links(static_cast<int>(i)), target);
  }

  // repeated .TideChartRegion regions = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->regions(static_cast<int>(i)), target);
  }

  // repeated .TideChartCommentBox comments = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->comments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->comments(static_cast<int>(i)), target);
  }

  // repeated .TideChartWidget widgets = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->widgets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->widgets(static_cast<int>(i)), target);
  }

  // repeated .TideChartProperty props = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->props(static_cast<int>(i)), target);
  }

  // repeated .TideChartCommand history = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->history(static_cast<int>(i)), target);
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->islogging(), target);
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isdebugging(), target);
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->ispaused(), target);
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isdisabled(), target);
  }

  // repeated .TideChartNote notes = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->notes(static_cast<int>(i)), target);
  }

  // string script = 21;
  if (this->script().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartGraph.script");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->script(), target);
  }

  // repeated .TideChartProperty settings = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->settings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartGraph)
  return target;
}

size_t TideChartGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartGraph)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartNode nodes = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  // repeated .TideChartLink links = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->links(static_cast<int>(i)));
    }
  }

  // repeated .TideChartRegion regions = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->regions(static_cast<int>(i)));
    }
  }

  // repeated .TideChartCommentBox comments = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->comments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->comments(static_cast<int>(i)));
    }
  }

  // repeated .TideChartWidget widgets = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->widgets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->widgets(static_cast<int>(i)));
    }
  }

  // repeated .TideChartProperty props = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // repeated .TideChartCommand history = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->history(static_cast<int>(i)));
    }
  }

  // repeated .TideChartNote notes = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->notes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notes(static_cast<int>(i)));
    }
  }

  // repeated .TideChartProperty settings = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->settings(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string title = 4;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string icon = 5;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->icon());
  }

  // string version = 6;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string source = 7;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string script = 21;
  if (this->script().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->script());
  }

  // bool isLogging = 16;
  if (this->islogging() != 0) {
    total_size += 2 + 1;
  }

  // bool isDebugging = 17;
  if (this->isdebugging() != 0) {
    total_size += 2 + 1;
  }

  // bool isPaused = 18;
  if (this->ispaused() != 0) {
    total_size += 2 + 1;
  }

  // bool isDisabled = 19;
  if (this->isdisabled() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartGraph* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartGraph)
    MergeFrom(*source);
  }
}

void TideChartGraph::MergeFrom(const TideChartGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  links_.MergeFrom(from.links_);
  regions_.MergeFrom(from.regions_);
  comments_.MergeFrom(from.comments_);
  widgets_.MergeFrom(from.widgets_);
  props_.MergeFrom(from.props_);
  history_.MergeFrom(from.history_);
  notes_.MergeFrom(from.notes_);
  settings_.MergeFrom(from.settings_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.script().size() > 0) {

    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  if (from.islogging() != 0) {
    set_islogging(from.islogging());
  }
  if (from.isdebugging() != 0) {
    set_isdebugging(from.isdebugging());
  }
  if (from.ispaused() != 0) {
    set_ispaused(from.ispaused());
  }
  if (from.isdisabled() != 0) {
    set_isdisabled(from.isdisabled());
  }
}

void TideChartGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartGraph::CopyFrom(const TideChartGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartGraph::IsInitialized() const {
  return true;
}

void TideChartGraph::Swap(TideChartGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartGraph::InternalSwap(TideChartGraph* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  CastToBase(&links_)->InternalSwap(CastToBase(&other->links_));
  CastToBase(&regions_)->InternalSwap(CastToBase(&other->regions_));
  CastToBase(&comments_)->InternalSwap(CastToBase(&other->comments_));
  CastToBase(&widgets_)->InternalSwap(CastToBase(&other->widgets_));
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  CastToBase(&history_)->InternalSwap(CastToBase(&other->history_));
  CastToBase(&notes_)->InternalSwap(CastToBase(&other->notes_));
  CastToBase(&settings_)->InternalSwap(CastToBase(&other->settings_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  script_.Swap(&other->script_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(islogging_, other->islogging_);
  swap(isdebugging_, other->isdebugging_);
  swap(ispaused_, other->ispaused_);
  swap(isdisabled_, other->isdisabled_);
}

::google::protobuf::Metadata TideChartGraph::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartCommand::InitAsDefaultInstance() {
  ::_TideChartCommand_default_instance_.group_ = const_cast< ::TideChartGroupCommand*>(
      ::TideChartGroupCommand::internal_default_instance());
  ::_TideChartCommand_default_instance_.move_ = const_cast< ::TideChartMoveCommand*>(
      ::TideChartMoveCommand::internal_default_instance());
  ::_TideChartCommand_default_instance_.comment_ = const_cast< ::TideChartCommentBoxCommand*>(
      ::TideChartCommentBoxCommand::internal_default_instance());
  ::_TideChartCommand_default_instance_.widget_ = const_cast< ::TideChartWidgetCommand*>(
      ::TideChartWidgetCommand::internal_default_instance());
  ::_TideChartCommand_default_instance_.port_ = const_cast< ::TideChartPortCommand*>(
      ::TideChartPortCommand::internal_default_instance());
  ::_TideChartCommand_default_instance_.link_ = const_cast< ::TideChartLinkCommand*>(
      ::TideChartLinkCommand::internal_default_instance());
  ::_TideChartCommand_default_instance_.node_ = const_cast< ::TideChartNodeCommand*>(
      ::TideChartNodeCommand::internal_default_instance());
  ::_TideChartCommand_default_instance_.region_ = const_cast< ::TideChartRegionCommand*>(
      ::TideChartRegionCommand::internal_default_instance());
  ::_TideChartCommand_default_instance_.graph_ = const_cast< ::TideChartGraphCommand*>(
      ::TideChartGraphCommand::internal_default_instance());
  ::_TideChartCommand_default_instance_.props_ = const_cast< ::TideChartPropertyCommand*>(
      ::TideChartPropertyCommand::internal_default_instance());
  ::_TideChartCommand_default_instance_.note_ = const_cast< ::TideChartNoteCommand*>(
      ::TideChartNoteCommand::internal_default_instance());
}
class TideChartCommand::HasBitSetters {
 public:
  static const ::TideChartGroupCommand& group(const TideChartCommand* msg);
  static const ::TideChartMoveCommand& move(const TideChartCommand* msg);
  static const ::TideChartCommentBoxCommand& comment(const TideChartCommand* msg);
  static const ::TideChartWidgetCommand& widget(const TideChartCommand* msg);
  static const ::TideChartPortCommand& port(const TideChartCommand* msg);
  static const ::TideChartLinkCommand& link(const TideChartCommand* msg);
  static const ::TideChartNodeCommand& node(const TideChartCommand* msg);
  static const ::TideChartRegionCommand& region(const TideChartCommand* msg);
  static const ::TideChartGraphCommand& graph(const TideChartCommand* msg);
  static const ::TideChartPropertyCommand& props(const TideChartCommand* msg);
  static const ::TideChartNoteCommand& note(const TideChartCommand* msg);
};

const ::TideChartGroupCommand&
TideChartCommand::HasBitSetters::group(const TideChartCommand* msg) {
  return *msg->command_.group_;
}
const ::TideChartMoveCommand&
TideChartCommand::HasBitSetters::move(const TideChartCommand* msg) {
  return *msg->command_.move_;
}
const ::TideChartCommentBoxCommand&
TideChartCommand::HasBitSetters::comment(const TideChartCommand* msg) {
  return *msg->command_.comment_;
}
const ::TideChartWidgetCommand&
TideChartCommand::HasBitSetters::widget(const TideChartCommand* msg) {
  return *msg->command_.widget_;
}
const ::TideChartPortCommand&
TideChartCommand::HasBitSetters::port(const TideChartCommand* msg) {
  return *msg->command_.port_;
}
const ::TideChartLinkCommand&
TideChartCommand::HasBitSetters::link(const TideChartCommand* msg) {
  return *msg->command_.link_;
}
const ::TideChartNodeCommand&
TideChartCommand::HasBitSetters::node(const TideChartCommand* msg) {
  return *msg->command_.node_;
}
const ::TideChartRegionCommand&
TideChartCommand::HasBitSetters::region(const TideChartCommand* msg) {
  return *msg->command_.region_;
}
const ::TideChartGraphCommand&
TideChartCommand::HasBitSetters::graph(const TideChartCommand* msg) {
  return *msg->command_.graph_;
}
const ::TideChartPropertyCommand&
TideChartCommand::HasBitSetters::props(const TideChartCommand* msg) {
  return *msg->command_.props_;
}
const ::TideChartNoteCommand&
TideChartCommand::HasBitSetters::note(const TideChartCommand* msg) {
  return *msg->command_.note_;
}
void TideChartCommand::set_allocated_group(::TideChartGroupCommand* group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (group) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    set_has_group();
    command_.group_ = group;
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.group)
}
void TideChartCommand::set_allocated_move(::TideChartMoveCommand* move) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (move) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      move = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, move, submessage_arena);
    }
    set_has_move();
    command_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.move)
}
void TideChartCommand::set_allocated_comment(::TideChartCommentBoxCommand* comment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (comment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      comment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, comment, submessage_arena);
    }
    set_has_comment();
    command_.comment_ = comment;
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.comment)
}
void TideChartCommand::set_allocated_widget(::TideChartWidgetCommand* widget) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (widget) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      widget = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    set_has_widget();
    command_.widget_ = widget;
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.widget)
}
void TideChartCommand::set_allocated_port(::TideChartPortCommand* port) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (port) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      port = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, port, submessage_arena);
    }
    set_has_port();
    command_.port_ = port;
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.port)
}
void TideChartCommand::set_allocated_link(::TideChartLinkCommand* link) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (link) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    set_has_link();
    command_.link_ = link;
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.link)
}
void TideChartCommand::set_allocated_node(::TideChartNodeCommand* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
    command_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.node)
}
void TideChartCommand::set_allocated_region(::TideChartRegionCommand* region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (region) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    set_has_region();
    command_.region_ = region;
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.region)
}
void TideChartCommand::set_allocated_graph(::TideChartGraphCommand* graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (graph) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      graph = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    set_has_graph();
    command_.graph_ = graph;
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.graph)
}
void TideChartCommand::set_allocated_props(::TideChartPropertyCommand* props) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (props) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      props = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, props, submessage_arena);
    }
    set_has_props();
    command_.props_ = props;
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.props)
}
void TideChartCommand::set_allocated_note(::TideChartNoteCommand* note) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (note) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      note = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, note, submessage_arena);
    }
    set_has_note();
    command_.note_ = note;
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.note)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartCommand::kVersionFieldNumber;
const int TideChartCommand::kTargetFieldNumber;
const int TideChartCommand::kGroupFieldNumber;
const int TideChartCommand::kMoveFieldNumber;
const int TideChartCommand::kCommentFieldNumber;
const int TideChartCommand::kWidgetFieldNumber;
const int TideChartCommand::kPortFieldNumber;
const int TideChartCommand::kLinkFieldNumber;
const int TideChartCommand::kNodeFieldNumber;
const int TideChartCommand::kRegionFieldNumber;
const int TideChartCommand::kGraphFieldNumber;
const int TideChartCommand::kPropsFieldNumber;
const int TideChartCommand::kNoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartCommand::TideChartCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartCommand)
}
TideChartCommand::TideChartCommand(const TideChartCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.target().size() > 0) {
    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  clear_has_command();
  switch (from.command_case()) {
    case kGroup: {
      mutable_group()->::TideChartGroupCommand::MergeFrom(from.group());
      break;
    }
    case kMove: {
      mutable_move()->::TideChartMoveCommand::MergeFrom(from.move());
      break;
    }
    case kComment: {
      mutable_comment()->::TideChartCommentBoxCommand::MergeFrom(from.comment());
      break;
    }
    case kWidget: {
      mutable_widget()->::TideChartWidgetCommand::MergeFrom(from.widget());
      break;
    }
    case kPort: {
      mutable_port()->::TideChartPortCommand::MergeFrom(from.port());
      break;
    }
    case kLink: {
      mutable_link()->::TideChartLinkCommand::MergeFrom(from.link());
      break;
    }
    case kNode: {
      mutable_node()->::TideChartNodeCommand::MergeFrom(from.node());
      break;
    }
    case kRegion: {
      mutable_region()->::TideChartRegionCommand::MergeFrom(from.region());
      break;
    }
    case kGraph: {
      mutable_graph()->::TideChartGraphCommand::MergeFrom(from.graph());
      break;
    }
    case kProps: {
      mutable_props()->::TideChartPropertyCommand::MergeFrom(from.props());
      break;
    }
    case kNote: {
      mutable_note()->::TideChartNoteCommand::MergeFrom(from.note());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TideChartCommand)
}

void TideChartCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartCommand_tide_5fchart_2eproto.base);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}

TideChartCommand::~TideChartCommand() {
  // @@protoc_insertion_point(destructor:TideChartCommand)
  SharedDtor();
}

void TideChartCommand::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_command()) {
    clear_command();
  }
}

void TideChartCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartCommand& TideChartCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:TideChartCommand)
  switch (command_case()) {
    case kGroup: {
      delete command_.group_;
      break;
    }
    case kMove: {
      delete command_.move_;
      break;
    }
    case kComment: {
      delete command_.comment_;
      break;
    }
    case kWidget: {
      delete command_.widget_;
      break;
    }
    case kPort: {
      delete command_.port_;
      break;
    }
    case kLink: {
      delete command_.link_;
      break;
    }
    case kNode: {
      delete command_.node_;
      break;
    }
    case kRegion: {
      delete command_.region_;
      break;
    }
    case kGraph: {
      delete command_.graph_;
      break;
    }
    case kProps: {
      delete command_.props_;
      break;
    }
    case kNote: {
      delete command_.note_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void TideChartCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_command();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartCommand.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string target = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartCommand.target");
        object = msg->mutable_target();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .TideChartGroupCommand group = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartGroupCommand::_InternalParse;
        object = msg->mutable_group();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartMoveCommand move = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartMoveCommand::_InternalParse;
        object = msg->mutable_move();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartCommentBoxCommand comment = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartCommentBoxCommand::_InternalParse;
        object = msg->mutable_comment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartWidgetCommand widget = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartWidgetCommand::_InternalParse;
        object = msg->mutable_widget();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartPortCommand port = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartPortCommand::_InternalParse;
        object = msg->mutable_port();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartLinkCommand link = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartLinkCommand::_InternalParse;
        object = msg->mutable_link();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartNodeCommand node = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartNodeCommand::_InternalParse;
        object = msg->mutable_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartRegionCommand region = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartRegionCommand::_InternalParse;
        object = msg->mutable_region();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartGraphCommand graph = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartGraphCommand::_InternalParse;
        object = msg->mutable_graph();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartPropertyCommand props = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartPropertyCommand::_InternalParse;
        object = msg->mutable_props();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartNoteCommand note = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartNoteCommand::_InternalParse;
        object = msg->mutable_note();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartCommand.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), static_cast<int>(this->target().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartCommand.target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartGroupCommand group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartMoveCommand move = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartCommentBoxCommand comment = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_comment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartWidgetCommand widget = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_widget()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartPortCommand port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartLinkCommand link = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartNodeCommand node = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartRegionCommand region = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartGraphCommand graph = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartPropertyCommand props = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartNoteCommand note = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_note()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommand.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // string target = 2;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommand.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->target(), output);
  }

  // .TideChartGroupCommand group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::group(this), output);
  }

  // .TideChartMoveCommand move = 4;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::move(this), output);
  }

  // .TideChartCommentBoxCommand comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::comment(this), output);
  }

  // .TideChartWidgetCommand widget = 6;
  if (has_widget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::widget(this), output);
  }

  // .TideChartPortCommand port = 7;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::port(this), output);
  }

  // .TideChartLinkCommand link = 8;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::link(this), output);
  }

  // .TideChartNodeCommand node = 9;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::node(this), output);
  }

  // .TideChartRegionCommand region = 10;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::region(this), output);
  }

  // .TideChartGraphCommand graph = 11;
  if (has_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::graph(this), output);
  }

  // .TideChartPropertyCommand props = 12;
  if (has_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::props(this), output);
  }

  // .TideChartNoteCommand note = 13;
  if (has_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::note(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartCommand)
}

::google::protobuf::uint8* TideChartCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommand.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // string target = 2;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartCommand.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target(), target);
  }

  // .TideChartGroupCommand group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::group(this), target);
  }

  // .TideChartMoveCommand move = 4;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::move(this), target);
  }

  // .TideChartCommentBoxCommand comment = 5;
  if (has_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::comment(this), target);
  }

  // .TideChartWidgetCommand widget = 6;
  if (has_widget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::widget(this), target);
  }

  // .TideChartPortCommand port = 7;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::port(this), target);
  }

  // .TideChartLinkCommand link = 8;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::link(this), target);
  }

  // .TideChartNodeCommand node = 9;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::node(this), target);
  }

  // .TideChartRegionCommand region = 10;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::region(this), target);
  }

  // .TideChartGraphCommand graph = 11;
  if (has_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::graph(this), target);
  }

  // .TideChartPropertyCommand props = 12;
  if (has_props()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::props(this), target);
  }

  // .TideChartNoteCommand note = 13;
  if (has_note()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::note(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartCommand)
  return target;
}

size_t TideChartCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string target = 2;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target());
  }

  switch (command_case()) {
    // .TideChartGroupCommand group = 3;
    case kGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.group_);
      break;
    }
    // .TideChartMoveCommand move = 4;
    case kMove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.move_);
      break;
    }
    // .TideChartCommentBoxCommand comment = 5;
    case kComment: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.comment_);
      break;
    }
    // .TideChartWidgetCommand widget = 6;
    case kWidget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.widget_);
      break;
    }
    // .TideChartPortCommand port = 7;
    case kPort: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.port_);
      break;
    }
    // .TideChartLinkCommand link = 8;
    case kLink: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.link_);
      break;
    }
    // .TideChartNodeCommand node = 9;
    case kNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.node_);
      break;
    }
    // .TideChartRegionCommand region = 10;
    case kRegion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.region_);
      break;
    }
    // .TideChartGraphCommand graph = 11;
    case kGraph: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.graph_);
      break;
    }
    // .TideChartPropertyCommand props = 12;
    case kProps: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.props_);
      break;
    }
    // .TideChartNoteCommand note = 13;
    case kNote: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.note_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartCommand)
    MergeFrom(*source);
  }
}

void TideChartCommand::MergeFrom(const TideChartCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  switch (from.command_case()) {
    case kGroup: {
      mutable_group()->::TideChartGroupCommand::MergeFrom(from.group());
      break;
    }
    case kMove: {
      mutable_move()->::TideChartMoveCommand::MergeFrom(from.move());
      break;
    }
    case kComment: {
      mutable_comment()->::TideChartCommentBoxCommand::MergeFrom(from.comment());
      break;
    }
    case kWidget: {
      mutable_widget()->::TideChartWidgetCommand::MergeFrom(from.widget());
      break;
    }
    case kPort: {
      mutable_port()->::TideChartPortCommand::MergeFrom(from.port());
      break;
    }
    case kLink: {
      mutable_link()->::TideChartLinkCommand::MergeFrom(from.link());
      break;
    }
    case kNode: {
      mutable_node()->::TideChartNodeCommand::MergeFrom(from.node());
      break;
    }
    case kRegion: {
      mutable_region()->::TideChartRegionCommand::MergeFrom(from.region());
      break;
    }
    case kGraph: {
      mutable_graph()->::TideChartGraphCommand::MergeFrom(from.graph());
      break;
    }
    case kProps: {
      mutable_props()->::TideChartPropertyCommand::MergeFrom(from.props());
      break;
    }
    case kNote: {
      mutable_note()->::TideChartNoteCommand::MergeFrom(from.note());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void TideChartCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartCommand::CopyFrom(const TideChartCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartCommand::IsInitialized() const {
  return true;
}

void TideChartCommand::Swap(TideChartCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartCommand::InternalSwap(TideChartCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_.Swap(&other->target_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TideChartCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartGroupCommand::InitAsDefaultInstance() {
}
class TideChartGroupCommand::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartGroupCommand::kCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartGroupCommand::TideChartGroupCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartGroupCommand)
}
TideChartGroupCommand::TideChartGroupCommand(const TideChartGroupCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TideChartGroupCommand)
}

void TideChartGroupCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartCommand_tide_5fchart_2eproto.base);
}

TideChartGroupCommand::~TideChartGroupCommand() {
  // @@protoc_insertion_point(destructor:TideChartGroupCommand)
  SharedDtor();
}

void TideChartGroupCommand::SharedDtor() {
}

void TideChartGroupCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartGroupCommand& TideChartGroupCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartGroupCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartGroupCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartGroupCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartGroupCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .TideChartCommand commands = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartCommand::_InternalParse;
          object = msg->add_commands();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartGroupCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartGroupCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TideChartCommand commands = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartGroupCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartGroupCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartGroupCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartGroupCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TideChartCommand commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->commands_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->commands(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartGroupCommand)
}

::google::protobuf::uint8* TideChartGroupCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartGroupCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TideChartCommand commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->commands_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->commands(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartGroupCommand)
  return target;
}

size_t TideChartGroupCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartGroupCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartCommand commands = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->commands_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->commands(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartGroupCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartGroupCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartGroupCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartGroupCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartGroupCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartGroupCommand)
    MergeFrom(*source);
  }
}

void TideChartGroupCommand::MergeFrom(const TideChartGroupCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartGroupCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
}

void TideChartGroupCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartGroupCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartGroupCommand::CopyFrom(const TideChartGroupCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartGroupCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartGroupCommand::IsInitialized() const {
  return true;
}

void TideChartGroupCommand::Swap(TideChartGroupCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartGroupCommand::InternalSwap(TideChartGroupCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&commands_)->InternalSwap(CastToBase(&other->commands_));
}

::google::protobuf::Metadata TideChartGroupCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartMoveCommand::InitAsDefaultInstance() {
}
class TideChartMoveCommand::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartMoveCommand::kNodeFieldNumber;
const int TideChartMoveCommand::kFromPosXFieldNumber;
const int TideChartMoveCommand::kFromPosYFieldNumber;
const int TideChartMoveCommand::kToPosXFieldNumber;
const int TideChartMoveCommand::kToPosYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartMoveCommand::TideChartMoveCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartMoveCommand)
}
TideChartMoveCommand::TideChartMoveCommand(const TideChartMoveCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node().size() > 0) {
    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  ::memcpy(&fromposx_, &from.fromposx_,
    static_cast<size_t>(reinterpret_cast<char*>(&toposy_) -
    reinterpret_cast<char*>(&fromposx_)) + sizeof(toposy_));
  // @@protoc_insertion_point(copy_constructor:TideChartMoveCommand)
}

void TideChartMoveCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartMoveCommand_tide_5fchart_2eproto.base);
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fromposx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&toposy_) -
      reinterpret_cast<char*>(&fromposx_)) + sizeof(toposy_));
}

TideChartMoveCommand::~TideChartMoveCommand() {
  // @@protoc_insertion_point(destructor:TideChartMoveCommand)
  SharedDtor();
}

void TideChartMoveCommand::SharedDtor() {
  node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartMoveCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartMoveCommand& TideChartMoveCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartMoveCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartMoveCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartMoveCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fromposx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&toposy_) -
      reinterpret_cast<char*>(&fromposx_)) + sizeof(toposy_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartMoveCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartMoveCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string node = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartMoveCommand.node");
        object = msg->mutable_node();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // sint32 fromPosX = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fromposx(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // sint32 fromPosY = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_fromposy(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // sint32 toPosX = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_toposx(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // sint32 toPosY = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_toposy(::google::protobuf::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartMoveCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartMoveCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), static_cast<int>(this->node().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartMoveCommand.node"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 fromPosX = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fromposx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 fromPosY = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fromposy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 toPosX = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &toposx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 toPosY = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &toposy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartMoveCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartMoveCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartMoveCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartMoveCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node = 1;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartMoveCommand.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node(), output);
  }

  // sint32 fromPosX = 2;
  if (this->fromposx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->fromposx(), output);
  }

  // sint32 fromPosY = 3;
  if (this->fromposy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->fromposy(), output);
  }

  // sint32 toPosX = 4;
  if (this->toposx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->toposx(), output);
  }

  // sint32 toPosY = 5;
  if (this->toposy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->toposy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartMoveCommand)
}

::google::protobuf::uint8* TideChartMoveCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartMoveCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node = 1;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartMoveCommand.node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node(), target);
  }

  // sint32 fromPosX = 2;
  if (this->fromposx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->fromposx(), target);
  }

  // sint32 fromPosY = 3;
  if (this->fromposy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->fromposy(), target);
  }

  // sint32 toPosX = 4;
  if (this->toposx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->toposx(), target);
  }

  // sint32 toPosY = 5;
  if (this->toposy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->toposy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartMoveCommand)
  return target;
}

size_t TideChartMoveCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartMoveCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node = 1;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node());
  }

  // sint32 fromPosX = 2;
  if (this->fromposx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->fromposx());
  }

  // sint32 fromPosY = 3;
  if (this->fromposy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->fromposy());
  }

  // sint32 toPosX = 4;
  if (this->toposx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->toposx());
  }

  // sint32 toPosY = 5;
  if (this->toposy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->toposy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartMoveCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartMoveCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartMoveCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartMoveCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartMoveCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartMoveCommand)
    MergeFrom(*source);
  }
}

void TideChartMoveCommand::MergeFrom(const TideChartMoveCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartMoveCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node().size() > 0) {

    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  if (from.fromposx() != 0) {
    set_fromposx(from.fromposx());
  }
  if (from.fromposy() != 0) {
    set_fromposy(from.fromposy());
  }
  if (from.toposx() != 0) {
    set_toposx(from.toposx());
  }
  if (from.toposy() != 0) {
    set_toposy(from.toposy());
  }
}

void TideChartMoveCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartMoveCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartMoveCommand::CopyFrom(const TideChartMoveCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartMoveCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartMoveCommand::IsInitialized() const {
  return true;
}

void TideChartMoveCommand::Swap(TideChartMoveCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartMoveCommand::InternalSwap(TideChartMoveCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_.Swap(&other->node_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fromposx_, other->fromposx_);
  swap(fromposy_, other->fromposy_);
  swap(toposx_, other->toposx_);
  swap(toposy_, other->toposy_);
}

::google::protobuf::Metadata TideChartMoveCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartCommentBoxCommand::InitAsDefaultInstance() {
  ::_TideChartCommentBoxCommand_default_instance_._instance.get_mutable()->fromcomment_ = const_cast< ::TideChartCommentBox*>(
      ::TideChartCommentBox::internal_default_instance());
  ::_TideChartCommentBoxCommand_default_instance_._instance.get_mutable()->tocomment_ = const_cast< ::TideChartCommentBox*>(
      ::TideChartCommentBox::internal_default_instance());
}
class TideChartCommentBoxCommand::HasBitSetters {
 public:
  static const ::TideChartCommentBox& fromcomment(const TideChartCommentBoxCommand* msg);
  static const ::TideChartCommentBox& tocomment(const TideChartCommentBoxCommand* msg);
};

const ::TideChartCommentBox&
TideChartCommentBoxCommand::HasBitSetters::fromcomment(const TideChartCommentBoxCommand* msg) {
  return *msg->fromcomment_;
}
const ::TideChartCommentBox&
TideChartCommentBoxCommand::HasBitSetters::tocomment(const TideChartCommentBoxCommand* msg) {
  return *msg->tocomment_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartCommentBoxCommand::kFromCommentFieldNumber;
const int TideChartCommentBoxCommand::kToCommentFieldNumber;
const int TideChartCommentBoxCommand::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartCommentBoxCommand::TideChartCommentBoxCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartCommentBoxCommand)
}
TideChartCommentBoxCommand::TideChartCommentBoxCommand(const TideChartCommentBoxCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fromcomment()) {
    fromcomment_ = new ::TideChartCommentBox(*from.fromcomment_);
  } else {
    fromcomment_ = nullptr;
  }
  if (from.has_tocomment()) {
    tocomment_ = new ::TideChartCommentBox(*from.tocomment_);
  } else {
    tocomment_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TideChartCommentBoxCommand)
}

void TideChartCommentBoxCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartCommentBoxCommand_tide_5fchart_2eproto.base);
  ::memset(&fromcomment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fromcomment_)) + sizeof(type_));
}

TideChartCommentBoxCommand::~TideChartCommentBoxCommand() {
  // @@protoc_insertion_point(destructor:TideChartCommentBoxCommand)
  SharedDtor();
}

void TideChartCommentBoxCommand::SharedDtor() {
  if (this != internal_default_instance()) delete fromcomment_;
  if (this != internal_default_instance()) delete tocomment_;
}

void TideChartCommentBoxCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartCommentBoxCommand& TideChartCommentBoxCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartCommentBoxCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartCommentBoxCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartCommentBoxCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fromcomment_ != nullptr) {
    delete fromcomment_;
  }
  fromcomment_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tocomment_ != nullptr) {
    delete tocomment_;
  }
  tocomment_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartCommentBoxCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartCommentBoxCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .TideChartCommentBox fromComment = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartCommentBox::_InternalParse;
        object = msg->mutable_fromcomment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartCommentBox toComment = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartCommentBox::_InternalParse;
        object = msg->mutable_tocomment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::TideChartCommandUpdateType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartCommentBoxCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartCommentBoxCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TideChartCommentBox fromComment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fromcomment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartCommentBox toComment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tocomment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TideChartCommandUpdateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartCommentBoxCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartCommentBoxCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartCommentBoxCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartCommentBoxCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartCommentBox fromComment = 1;
  if (this->has_fromcomment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::fromcomment(this), output);
  }

  // .TideChartCommentBox toComment = 2;
  if (this->has_tocomment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tocomment(this), output);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartCommentBoxCommand)
}

::google::protobuf::uint8* TideChartCommentBoxCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartCommentBoxCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartCommentBox fromComment = 1;
  if (this->has_fromcomment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::fromcomment(this), target);
  }

  // .TideChartCommentBox toComment = 2;
  if (this->has_tocomment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tocomment(this), target);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartCommentBoxCommand)
  return target;
}

size_t TideChartCommentBoxCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartCommentBoxCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TideChartCommentBox fromComment = 1;
  if (this->has_fromcomment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fromcomment_);
  }

  // .TideChartCommentBox toComment = 2;
  if (this->has_tocomment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tocomment_);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartCommentBoxCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartCommentBoxCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartCommentBoxCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartCommentBoxCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartCommentBoxCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartCommentBoxCommand)
    MergeFrom(*source);
  }
}

void TideChartCommentBoxCommand::MergeFrom(const TideChartCommentBoxCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartCommentBoxCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fromcomment()) {
    mutable_fromcomment()->::TideChartCommentBox::MergeFrom(from.fromcomment());
  }
  if (from.has_tocomment()) {
    mutable_tocomment()->::TideChartCommentBox::MergeFrom(from.tocomment());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TideChartCommentBoxCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartCommentBoxCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartCommentBoxCommand::CopyFrom(const TideChartCommentBoxCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartCommentBoxCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartCommentBoxCommand::IsInitialized() const {
  return true;
}

void TideChartCommentBoxCommand::Swap(TideChartCommentBoxCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartCommentBoxCommand::InternalSwap(TideChartCommentBoxCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fromcomment_, other->fromcomment_);
  swap(tocomment_, other->tocomment_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata TideChartCommentBoxCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartWidgetCommand::InitAsDefaultInstance() {
  ::_TideChartWidgetCommand_default_instance_._instance.get_mutable()->fromwidget_ = const_cast< ::TideChartWidget*>(
      ::TideChartWidget::internal_default_instance());
  ::_TideChartWidgetCommand_default_instance_._instance.get_mutable()->towidget_ = const_cast< ::TideChartWidget*>(
      ::TideChartWidget::internal_default_instance());
}
class TideChartWidgetCommand::HasBitSetters {
 public:
  static const ::TideChartWidget& fromwidget(const TideChartWidgetCommand* msg);
  static const ::TideChartWidget& towidget(const TideChartWidgetCommand* msg);
};

const ::TideChartWidget&
TideChartWidgetCommand::HasBitSetters::fromwidget(const TideChartWidgetCommand* msg) {
  return *msg->fromwidget_;
}
const ::TideChartWidget&
TideChartWidgetCommand::HasBitSetters::towidget(const TideChartWidgetCommand* msg) {
  return *msg->towidget_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartWidgetCommand::kFromWidgetFieldNumber;
const int TideChartWidgetCommand::kToWidgetFieldNumber;
const int TideChartWidgetCommand::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartWidgetCommand::TideChartWidgetCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartWidgetCommand)
}
TideChartWidgetCommand::TideChartWidgetCommand(const TideChartWidgetCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fromwidget()) {
    fromwidget_ = new ::TideChartWidget(*from.fromwidget_);
  } else {
    fromwidget_ = nullptr;
  }
  if (from.has_towidget()) {
    towidget_ = new ::TideChartWidget(*from.towidget_);
  } else {
    towidget_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TideChartWidgetCommand)
}

void TideChartWidgetCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartWidgetCommand_tide_5fchart_2eproto.base);
  ::memset(&fromwidget_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fromwidget_)) + sizeof(type_));
}

TideChartWidgetCommand::~TideChartWidgetCommand() {
  // @@protoc_insertion_point(destructor:TideChartWidgetCommand)
  SharedDtor();
}

void TideChartWidgetCommand::SharedDtor() {
  if (this != internal_default_instance()) delete fromwidget_;
  if (this != internal_default_instance()) delete towidget_;
}

void TideChartWidgetCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartWidgetCommand& TideChartWidgetCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartWidgetCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartWidgetCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartWidgetCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fromwidget_ != nullptr) {
    delete fromwidget_;
  }
  fromwidget_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && towidget_ != nullptr) {
    delete towidget_;
  }
  towidget_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartWidgetCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartWidgetCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .TideChartWidget fromWidget = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartWidget::_InternalParse;
        object = msg->mutable_fromwidget();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartWidget toWidget = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartWidget::_InternalParse;
        object = msg->mutable_towidget();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::TideChartCommandUpdateType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartWidgetCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartWidgetCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TideChartWidget fromWidget = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fromwidget()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartWidget toWidget = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_towidget()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TideChartCommandUpdateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartWidgetCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartWidgetCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartWidgetCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartWidgetCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartWidget fromWidget = 1;
  if (this->has_fromwidget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::fromwidget(this), output);
  }

  // .TideChartWidget toWidget = 2;
  if (this->has_towidget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::towidget(this), output);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartWidgetCommand)
}

::google::protobuf::uint8* TideChartWidgetCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartWidgetCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartWidget fromWidget = 1;
  if (this->has_fromwidget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::fromwidget(this), target);
  }

  // .TideChartWidget toWidget = 2;
  if (this->has_towidget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::towidget(this), target);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartWidgetCommand)
  return target;
}

size_t TideChartWidgetCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartWidgetCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TideChartWidget fromWidget = 1;
  if (this->has_fromwidget()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fromwidget_);
  }

  // .TideChartWidget toWidget = 2;
  if (this->has_towidget()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *towidget_);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartWidgetCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartWidgetCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartWidgetCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartWidgetCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartWidgetCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartWidgetCommand)
    MergeFrom(*source);
  }
}

void TideChartWidgetCommand::MergeFrom(const TideChartWidgetCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartWidgetCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fromwidget()) {
    mutable_fromwidget()->::TideChartWidget::MergeFrom(from.fromwidget());
  }
  if (from.has_towidget()) {
    mutable_towidget()->::TideChartWidget::MergeFrom(from.towidget());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TideChartWidgetCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartWidgetCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartWidgetCommand::CopyFrom(const TideChartWidgetCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartWidgetCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartWidgetCommand::IsInitialized() const {
  return true;
}

void TideChartWidgetCommand::Swap(TideChartWidgetCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartWidgetCommand::InternalSwap(TideChartWidgetCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fromwidget_, other->fromwidget_);
  swap(towidget_, other->towidget_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata TideChartWidgetCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartPortCommand::InitAsDefaultInstance() {
  ::_TideChartPortCommand_default_instance_._instance.get_mutable()->fromport_ = const_cast< ::TideChartPort*>(
      ::TideChartPort::internal_default_instance());
  ::_TideChartPortCommand_default_instance_._instance.get_mutable()->toport_ = const_cast< ::TideChartPort*>(
      ::TideChartPort::internal_default_instance());
}
class TideChartPortCommand::HasBitSetters {
 public:
  static const ::TideChartPort& fromport(const TideChartPortCommand* msg);
  static const ::TideChartPort& toport(const TideChartPortCommand* msg);
};

const ::TideChartPort&
TideChartPortCommand::HasBitSetters::fromport(const TideChartPortCommand* msg) {
  return *msg->fromport_;
}
const ::TideChartPort&
TideChartPortCommand::HasBitSetters::toport(const TideChartPortCommand* msg) {
  return *msg->toport_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartPortCommand::kFromPortFieldNumber;
const int TideChartPortCommand::kToPortFieldNumber;
const int TideChartPortCommand::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartPortCommand::TideChartPortCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartPortCommand)
}
TideChartPortCommand::TideChartPortCommand(const TideChartPortCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fromport()) {
    fromport_ = new ::TideChartPort(*from.fromport_);
  } else {
    fromport_ = nullptr;
  }
  if (from.has_toport()) {
    toport_ = new ::TideChartPort(*from.toport_);
  } else {
    toport_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TideChartPortCommand)
}

void TideChartPortCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartPortCommand_tide_5fchart_2eproto.base);
  ::memset(&fromport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fromport_)) + sizeof(type_));
}

TideChartPortCommand::~TideChartPortCommand() {
  // @@protoc_insertion_point(destructor:TideChartPortCommand)
  SharedDtor();
}

void TideChartPortCommand::SharedDtor() {
  if (this != internal_default_instance()) delete fromport_;
  if (this != internal_default_instance()) delete toport_;
}

void TideChartPortCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartPortCommand& TideChartPortCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartPortCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartPortCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartPortCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fromport_ != nullptr) {
    delete fromport_;
  }
  fromport_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && toport_ != nullptr) {
    delete toport_;
  }
  toport_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartPortCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartPortCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .TideChartPort fromPort = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartPort::_InternalParse;
        object = msg->mutable_fromport();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartPort toPort = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartPort::_InternalParse;
        object = msg->mutable_toport();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::TideChartCommandUpdateType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartPortCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartPortCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TideChartPort fromPort = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fromport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartPort toPort = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_toport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TideChartCommandUpdateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartPortCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartPortCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartPortCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartPortCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartPort fromPort = 1;
  if (this->has_fromport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::fromport(this), output);
  }

  // .TideChartPort toPort = 2;
  if (this->has_toport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::toport(this), output);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartPortCommand)
}

::google::protobuf::uint8* TideChartPortCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartPortCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartPort fromPort = 1;
  if (this->has_fromport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::fromport(this), target);
  }

  // .TideChartPort toPort = 2;
  if (this->has_toport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::toport(this), target);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartPortCommand)
  return target;
}

size_t TideChartPortCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartPortCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TideChartPort fromPort = 1;
  if (this->has_fromport()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fromport_);
  }

  // .TideChartPort toPort = 2;
  if (this->has_toport()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *toport_);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartPortCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartPortCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartPortCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartPortCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartPortCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartPortCommand)
    MergeFrom(*source);
  }
}

void TideChartPortCommand::MergeFrom(const TideChartPortCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartPortCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fromport()) {
    mutable_fromport()->::TideChartPort::MergeFrom(from.fromport());
  }
  if (from.has_toport()) {
    mutable_toport()->::TideChartPort::MergeFrom(from.toport());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TideChartPortCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartPortCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartPortCommand::CopyFrom(const TideChartPortCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartPortCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartPortCommand::IsInitialized() const {
  return true;
}

void TideChartPortCommand::Swap(TideChartPortCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartPortCommand::InternalSwap(TideChartPortCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fromport_, other->fromport_);
  swap(toport_, other->toport_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata TideChartPortCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartLinkCommand::InitAsDefaultInstance() {
  ::_TideChartLinkCommand_default_instance_._instance.get_mutable()->fromlink_ = const_cast< ::TideChartLink*>(
      ::TideChartLink::internal_default_instance());
  ::_TideChartLinkCommand_default_instance_._instance.get_mutable()->tolink_ = const_cast< ::TideChartLink*>(
      ::TideChartLink::internal_default_instance());
}
class TideChartLinkCommand::HasBitSetters {
 public:
  static const ::TideChartLink& fromlink(const TideChartLinkCommand* msg);
  static const ::TideChartLink& tolink(const TideChartLinkCommand* msg);
};

const ::TideChartLink&
TideChartLinkCommand::HasBitSetters::fromlink(const TideChartLinkCommand* msg) {
  return *msg->fromlink_;
}
const ::TideChartLink&
TideChartLinkCommand::HasBitSetters::tolink(const TideChartLinkCommand* msg) {
  return *msg->tolink_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartLinkCommand::kFromLinkFieldNumber;
const int TideChartLinkCommand::kToLinkFieldNumber;
const int TideChartLinkCommand::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartLinkCommand::TideChartLinkCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartLinkCommand)
}
TideChartLinkCommand::TideChartLinkCommand(const TideChartLinkCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fromlink()) {
    fromlink_ = new ::TideChartLink(*from.fromlink_);
  } else {
    fromlink_ = nullptr;
  }
  if (from.has_tolink()) {
    tolink_ = new ::TideChartLink(*from.tolink_);
  } else {
    tolink_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TideChartLinkCommand)
}

void TideChartLinkCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartLinkCommand_tide_5fchart_2eproto.base);
  ::memset(&fromlink_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fromlink_)) + sizeof(type_));
}

TideChartLinkCommand::~TideChartLinkCommand() {
  // @@protoc_insertion_point(destructor:TideChartLinkCommand)
  SharedDtor();
}

void TideChartLinkCommand::SharedDtor() {
  if (this != internal_default_instance()) delete fromlink_;
  if (this != internal_default_instance()) delete tolink_;
}

void TideChartLinkCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartLinkCommand& TideChartLinkCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartLinkCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartLinkCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartLinkCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fromlink_ != nullptr) {
    delete fromlink_;
  }
  fromlink_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tolink_ != nullptr) {
    delete tolink_;
  }
  tolink_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartLinkCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartLinkCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .TideChartLink fromLink = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartLink::_InternalParse;
        object = msg->mutable_fromlink();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartLink toLink = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartLink::_InternalParse;
        object = msg->mutable_tolink();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::TideChartCommandUpdateType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartLinkCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartLinkCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TideChartLink fromLink = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fromlink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartLink toLink = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tolink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TideChartCommandUpdateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartLinkCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartLinkCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartLinkCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartLinkCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartLink fromLink = 1;
  if (this->has_fromlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::fromlink(this), output);
  }

  // .TideChartLink toLink = 2;
  if (this->has_tolink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tolink(this), output);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartLinkCommand)
}

::google::protobuf::uint8* TideChartLinkCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartLinkCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartLink fromLink = 1;
  if (this->has_fromlink()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::fromlink(this), target);
  }

  // .TideChartLink toLink = 2;
  if (this->has_tolink()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tolink(this), target);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartLinkCommand)
  return target;
}

size_t TideChartLinkCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartLinkCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TideChartLink fromLink = 1;
  if (this->has_fromlink()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fromlink_);
  }

  // .TideChartLink toLink = 2;
  if (this->has_tolink()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tolink_);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartLinkCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartLinkCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartLinkCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartLinkCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartLinkCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartLinkCommand)
    MergeFrom(*source);
  }
}

void TideChartLinkCommand::MergeFrom(const TideChartLinkCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartLinkCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fromlink()) {
    mutable_fromlink()->::TideChartLink::MergeFrom(from.fromlink());
  }
  if (from.has_tolink()) {
    mutable_tolink()->::TideChartLink::MergeFrom(from.tolink());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TideChartLinkCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartLinkCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartLinkCommand::CopyFrom(const TideChartLinkCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartLinkCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartLinkCommand::IsInitialized() const {
  return true;
}

void TideChartLinkCommand::Swap(TideChartLinkCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartLinkCommand::InternalSwap(TideChartLinkCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fromlink_, other->fromlink_);
  swap(tolink_, other->tolink_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata TideChartLinkCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartNodeCommand::InitAsDefaultInstance() {
  ::_TideChartNodeCommand_default_instance_._instance.get_mutable()->fromnode_ = const_cast< ::TideChartNode*>(
      ::TideChartNode::internal_default_instance());
  ::_TideChartNodeCommand_default_instance_._instance.get_mutable()->tonode_ = const_cast< ::TideChartNode*>(
      ::TideChartNode::internal_default_instance());
}
class TideChartNodeCommand::HasBitSetters {
 public:
  static const ::TideChartNode& fromnode(const TideChartNodeCommand* msg);
  static const ::TideChartNode& tonode(const TideChartNodeCommand* msg);
};

const ::TideChartNode&
TideChartNodeCommand::HasBitSetters::fromnode(const TideChartNodeCommand* msg) {
  return *msg->fromnode_;
}
const ::TideChartNode&
TideChartNodeCommand::HasBitSetters::tonode(const TideChartNodeCommand* msg) {
  return *msg->tonode_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartNodeCommand::kFromNodeFieldNumber;
const int TideChartNodeCommand::kToNodeFieldNumber;
const int TideChartNodeCommand::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartNodeCommand::TideChartNodeCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartNodeCommand)
}
TideChartNodeCommand::TideChartNodeCommand(const TideChartNodeCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fromnode()) {
    fromnode_ = new ::TideChartNode(*from.fromnode_);
  } else {
    fromnode_ = nullptr;
  }
  if (from.has_tonode()) {
    tonode_ = new ::TideChartNode(*from.tonode_);
  } else {
    tonode_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TideChartNodeCommand)
}

void TideChartNodeCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartNodeCommand_tide_5fchart_2eproto.base);
  ::memset(&fromnode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fromnode_)) + sizeof(type_));
}

TideChartNodeCommand::~TideChartNodeCommand() {
  // @@protoc_insertion_point(destructor:TideChartNodeCommand)
  SharedDtor();
}

void TideChartNodeCommand::SharedDtor() {
  if (this != internal_default_instance()) delete fromnode_;
  if (this != internal_default_instance()) delete tonode_;
}

void TideChartNodeCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartNodeCommand& TideChartNodeCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartNodeCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartNodeCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartNodeCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fromnode_ != nullptr) {
    delete fromnode_;
  }
  fromnode_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tonode_ != nullptr) {
    delete tonode_;
  }
  tonode_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartNodeCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartNodeCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .TideChartNode fromNode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartNode::_InternalParse;
        object = msg->mutable_fromnode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartNode toNode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartNode::_InternalParse;
        object = msg->mutable_tonode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::TideChartCommandUpdateType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartNodeCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartNodeCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TideChartNode fromNode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fromnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartNode toNode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tonode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TideChartCommandUpdateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartNodeCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartNodeCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartNodeCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartNodeCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartNode fromNode = 1;
  if (this->has_fromnode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::fromnode(this), output);
  }

  // .TideChartNode toNode = 2;
  if (this->has_tonode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tonode(this), output);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartNodeCommand)
}

::google::protobuf::uint8* TideChartNodeCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartNodeCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartNode fromNode = 1;
  if (this->has_fromnode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::fromnode(this), target);
  }

  // .TideChartNode toNode = 2;
  if (this->has_tonode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tonode(this), target);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartNodeCommand)
  return target;
}

size_t TideChartNodeCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartNodeCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TideChartNode fromNode = 1;
  if (this->has_fromnode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fromnode_);
  }

  // .TideChartNode toNode = 2;
  if (this->has_tonode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tonode_);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartNodeCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartNodeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartNodeCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartNodeCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartNodeCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartNodeCommand)
    MergeFrom(*source);
  }
}

void TideChartNodeCommand::MergeFrom(const TideChartNodeCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartNodeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fromnode()) {
    mutable_fromnode()->::TideChartNode::MergeFrom(from.fromnode());
  }
  if (from.has_tonode()) {
    mutable_tonode()->::TideChartNode::MergeFrom(from.tonode());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TideChartNodeCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartNodeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartNodeCommand::CopyFrom(const TideChartNodeCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartNodeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartNodeCommand::IsInitialized() const {
  return true;
}

void TideChartNodeCommand::Swap(TideChartNodeCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartNodeCommand::InternalSwap(TideChartNodeCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fromnode_, other->fromnode_);
  swap(tonode_, other->tonode_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata TideChartNodeCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartRegionCommand::InitAsDefaultInstance() {
  ::_TideChartRegionCommand_default_instance_._instance.get_mutable()->fromregion_ = const_cast< ::TideChartRegion*>(
      ::TideChartRegion::internal_default_instance());
  ::_TideChartRegionCommand_default_instance_._instance.get_mutable()->toregion_ = const_cast< ::TideChartRegion*>(
      ::TideChartRegion::internal_default_instance());
}
class TideChartRegionCommand::HasBitSetters {
 public:
  static const ::TideChartRegion& fromregion(const TideChartRegionCommand* msg);
  static const ::TideChartRegion& toregion(const TideChartRegionCommand* msg);
};

const ::TideChartRegion&
TideChartRegionCommand::HasBitSetters::fromregion(const TideChartRegionCommand* msg) {
  return *msg->fromregion_;
}
const ::TideChartRegion&
TideChartRegionCommand::HasBitSetters::toregion(const TideChartRegionCommand* msg) {
  return *msg->toregion_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartRegionCommand::kFromRegionFieldNumber;
const int TideChartRegionCommand::kToRegionFieldNumber;
const int TideChartRegionCommand::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartRegionCommand::TideChartRegionCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartRegionCommand)
}
TideChartRegionCommand::TideChartRegionCommand(const TideChartRegionCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fromregion()) {
    fromregion_ = new ::TideChartRegion(*from.fromregion_);
  } else {
    fromregion_ = nullptr;
  }
  if (from.has_toregion()) {
    toregion_ = new ::TideChartRegion(*from.toregion_);
  } else {
    toregion_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TideChartRegionCommand)
}

void TideChartRegionCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartRegionCommand_tide_5fchart_2eproto.base);
  ::memset(&fromregion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fromregion_)) + sizeof(type_));
}

TideChartRegionCommand::~TideChartRegionCommand() {
  // @@protoc_insertion_point(destructor:TideChartRegionCommand)
  SharedDtor();
}

void TideChartRegionCommand::SharedDtor() {
  if (this != internal_default_instance()) delete fromregion_;
  if (this != internal_default_instance()) delete toregion_;
}

void TideChartRegionCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartRegionCommand& TideChartRegionCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartRegionCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartRegionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartRegionCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fromregion_ != nullptr) {
    delete fromregion_;
  }
  fromregion_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && toregion_ != nullptr) {
    delete toregion_;
  }
  toregion_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartRegionCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartRegionCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .TideChartRegion fromRegion = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartRegion::_InternalParse;
        object = msg->mutable_fromregion();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartRegion toRegion = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartRegion::_InternalParse;
        object = msg->mutable_toregion();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::TideChartCommandUpdateType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartRegionCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartRegionCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TideChartRegion fromRegion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fromregion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartRegion toRegion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_toregion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TideChartCommandUpdateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartRegionCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartRegionCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartRegionCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartRegionCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartRegion fromRegion = 1;
  if (this->has_fromregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::fromregion(this), output);
  }

  // .TideChartRegion toRegion = 2;
  if (this->has_toregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::toregion(this), output);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartRegionCommand)
}

::google::protobuf::uint8* TideChartRegionCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartRegionCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartRegion fromRegion = 1;
  if (this->has_fromregion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::fromregion(this), target);
  }

  // .TideChartRegion toRegion = 2;
  if (this->has_toregion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::toregion(this), target);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartRegionCommand)
  return target;
}

size_t TideChartRegionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartRegionCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TideChartRegion fromRegion = 1;
  if (this->has_fromregion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fromregion_);
  }

  // .TideChartRegion toRegion = 2;
  if (this->has_toregion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *toregion_);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartRegionCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartRegionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartRegionCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartRegionCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartRegionCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartRegionCommand)
    MergeFrom(*source);
  }
}

void TideChartRegionCommand::MergeFrom(const TideChartRegionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartRegionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fromregion()) {
    mutable_fromregion()->::TideChartRegion::MergeFrom(from.fromregion());
  }
  if (from.has_toregion()) {
    mutable_toregion()->::TideChartRegion::MergeFrom(from.toregion());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TideChartRegionCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartRegionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartRegionCommand::CopyFrom(const TideChartRegionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartRegionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartRegionCommand::IsInitialized() const {
  return true;
}

void TideChartRegionCommand::Swap(TideChartRegionCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartRegionCommand::InternalSwap(TideChartRegionCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fromregion_, other->fromregion_);
  swap(toregion_, other->toregion_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata TideChartRegionCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartGraphCommand::InitAsDefaultInstance() {
  ::_TideChartGraphCommand_default_instance_._instance.get_mutable()->fromgraph_ = const_cast< ::TideChartGraph*>(
      ::TideChartGraph::internal_default_instance());
  ::_TideChartGraphCommand_default_instance_._instance.get_mutable()->tograph_ = const_cast< ::TideChartGraph*>(
      ::TideChartGraph::internal_default_instance());
}
class TideChartGraphCommand::HasBitSetters {
 public:
  static const ::TideChartGraph& fromgraph(const TideChartGraphCommand* msg);
  static const ::TideChartGraph& tograph(const TideChartGraphCommand* msg);
};

const ::TideChartGraph&
TideChartGraphCommand::HasBitSetters::fromgraph(const TideChartGraphCommand* msg) {
  return *msg->fromgraph_;
}
const ::TideChartGraph&
TideChartGraphCommand::HasBitSetters::tograph(const TideChartGraphCommand* msg) {
  return *msg->tograph_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartGraphCommand::kFromGraphFieldNumber;
const int TideChartGraphCommand::kToGraphFieldNumber;
const int TideChartGraphCommand::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartGraphCommand::TideChartGraphCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartGraphCommand)
}
TideChartGraphCommand::TideChartGraphCommand(const TideChartGraphCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fromgraph()) {
    fromgraph_ = new ::TideChartGraph(*from.fromgraph_);
  } else {
    fromgraph_ = nullptr;
  }
  if (from.has_tograph()) {
    tograph_ = new ::TideChartGraph(*from.tograph_);
  } else {
    tograph_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TideChartGraphCommand)
}

void TideChartGraphCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartCommand_tide_5fchart_2eproto.base);
  ::memset(&fromgraph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fromgraph_)) + sizeof(type_));
}

TideChartGraphCommand::~TideChartGraphCommand() {
  // @@protoc_insertion_point(destructor:TideChartGraphCommand)
  SharedDtor();
}

void TideChartGraphCommand::SharedDtor() {
  if (this != internal_default_instance()) delete fromgraph_;
  if (this != internal_default_instance()) delete tograph_;
}

void TideChartGraphCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartGraphCommand& TideChartGraphCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartGraphCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartGraphCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fromgraph_ != nullptr) {
    delete fromgraph_;
  }
  fromgraph_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tograph_ != nullptr) {
    delete tograph_;
  }
  tograph_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartGraphCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartGraphCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .TideChartGraph fromGraph = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartGraph::_InternalParse;
        object = msg->mutable_fromgraph();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartGraph toGraph = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartGraph::_InternalParse;
        object = msg->mutable_tograph();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::TideChartCommandUpdateType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartGraphCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartGraphCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TideChartGraph fromGraph = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fromgraph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartGraph toGraph = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tograph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TideChartCommandUpdateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartGraphCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartGraphCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartGraphCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartGraphCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartGraph fromGraph = 1;
  if (this->has_fromgraph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::fromgraph(this), output);
  }

  // .TideChartGraph toGraph = 2;
  if (this->has_tograph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tograph(this), output);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartGraphCommand)
}

::google::protobuf::uint8* TideChartGraphCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartGraphCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TideChartGraph fromGraph = 1;
  if (this->has_fromgraph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::fromgraph(this), target);
  }

  // .TideChartGraph toGraph = 2;
  if (this->has_tograph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tograph(this), target);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartGraphCommand)
  return target;
}

size_t TideChartGraphCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartGraphCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TideChartGraph fromGraph = 1;
  if (this->has_fromgraph()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fromgraph_);
  }

  // .TideChartGraph toGraph = 2;
  if (this->has_tograph()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tograph_);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartGraphCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartGraphCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartGraphCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartGraphCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartGraphCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartGraphCommand)
    MergeFrom(*source);
  }
}

void TideChartGraphCommand::MergeFrom(const TideChartGraphCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartGraphCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fromgraph()) {
    mutable_fromgraph()->::TideChartGraph::MergeFrom(from.fromgraph());
  }
  if (from.has_tograph()) {
    mutable_tograph()->::TideChartGraph::MergeFrom(from.tograph());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TideChartGraphCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartGraphCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartGraphCommand::CopyFrom(const TideChartGraphCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartGraphCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartGraphCommand::IsInitialized() const {
  return true;
}

void TideChartGraphCommand::Swap(TideChartGraphCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartGraphCommand::InternalSwap(TideChartGraphCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fromgraph_, other->fromgraph_);
  swap(tograph_, other->tograph_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata TideChartGraphCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartPropertyCommand::InitAsDefaultInstance() {
  ::_TideChartPropertyCommand_default_instance_.node_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartPropertyCommand_default_instance_.region_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartPropertyCommand_default_instance_.widget_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartPropertyCommand_default_instance_.graph_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class TideChartPropertyCommand::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartPropertyCommand::kFromPropsFieldNumber;
const int TideChartPropertyCommand::kToPropsFieldNumber;
const int TideChartPropertyCommand::kTypeFieldNumber;
const int TideChartPropertyCommand::kNodeFieldNumber;
const int TideChartPropertyCommand::kRegionFieldNumber;
const int TideChartPropertyCommand::kWidgetFieldNumber;
const int TideChartPropertyCommand::kGraphFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartPropertyCommand::TideChartPropertyCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartPropertyCommand)
}
TideChartPropertyCommand::TideChartPropertyCommand(const TideChartPropertyCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fromprops_(from.fromprops_),
      toprops_(from.toprops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_target();
  switch (from.target_case()) {
    case kNode: {
      set_node(from.node());
      break;
    }
    case kRegion: {
      set_region(from.region());
      break;
    }
    case kWidget: {
      set_widget(from.widget());
      break;
    }
    case kGraph: {
      set_graph(from.graph());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TideChartPropertyCommand)
}

void TideChartPropertyCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartPropertyCommand_tide_5fchart_2eproto.base);
  type_ = 0;
  clear_has_target();
}

TideChartPropertyCommand::~TideChartPropertyCommand() {
  // @@protoc_insertion_point(destructor:TideChartPropertyCommand)
  SharedDtor();
}

void TideChartPropertyCommand::SharedDtor() {
  if (has_target()) {
    clear_target();
  }
}

void TideChartPropertyCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartPropertyCommand& TideChartPropertyCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartPropertyCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartPropertyCommand::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:TideChartPropertyCommand)
  switch (target_case()) {
    case kNode: {
      target_.node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRegion: {
      target_.region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kWidget: {
      target_.widget_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGraph: {
      target_.graph_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void TideChartPropertyCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartPropertyCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fromprops_.Clear();
  toprops_.Clear();
  type_ = 0;
  clear_target();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartPropertyCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartPropertyCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .TideChartProperty fromProps = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_fromprops();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .TideChartProperty toProps = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_toprops();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::TideChartCommandUpdateType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string node = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPropertyCommand.node");
        object = msg->mutable_node();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string region = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPropertyCommand.region");
        object = msg->mutable_region();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string widget = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPropertyCommand.widget");
        object = msg->mutable_widget();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string graph = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartPropertyCommand.graph");
        object = msg->mutable_graph();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartPropertyCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartPropertyCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TideChartProperty fromProps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fromprops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty toProps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_toprops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartCommandUpdateType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TideChartCommandUpdateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), static_cast<int>(this->node().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPropertyCommand.node"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), static_cast<int>(this->region().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPropertyCommand.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string widget = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_widget()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->widget().data(), static_cast<int>(this->widget().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPropertyCommand.widget"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string graph = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph().data(), static_cast<int>(this->graph().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartPropertyCommand.graph"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartPropertyCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartPropertyCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartPropertyCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartPropertyCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TideChartProperty fromProps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fromprops_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->fromprops(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartProperty toProps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->toprops_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->toprops(static_cast<int>(i)),
      output);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // string node = 5;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPropertyCommand.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->node(), output);
  }

  // string region = 6;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPropertyCommand.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->region(), output);
  }

  // string widget = 7;
  if (has_widget()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->widget().data(), static_cast<int>(this->widget().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPropertyCommand.widget");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->widget(), output);
  }

  // string graph = 8;
  if (has_graph()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph().data(), static_cast<int>(this->graph().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPropertyCommand.graph");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->graph(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartPropertyCommand)
}

::google::protobuf::uint8* TideChartPropertyCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartPropertyCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TideChartProperty fromProps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fromprops_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->fromprops(static_cast<int>(i)), target);
  }

  // repeated .TideChartProperty toProps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->toprops_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->toprops(static_cast<int>(i)), target);
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // string node = 5;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPropertyCommand.node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->node(), target);
  }

  // string region = 6;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPropertyCommand.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->region(), target);
  }

  // string widget = 7;
  if (has_widget()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->widget().data(), static_cast<int>(this->widget().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPropertyCommand.widget");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->widget(), target);
  }

  // string graph = 8;
  if (has_graph()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph().data(), static_cast<int>(this->graph().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartPropertyCommand.graph");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->graph(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartPropertyCommand)
  return target;
}

size_t TideChartPropertyCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartPropertyCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartProperty fromProps = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fromprops_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fromprops(static_cast<int>(i)));
    }
  }

  // repeated .TideChartProperty toProps = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->toprops_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->toprops(static_cast<int>(i)));
    }
  }

  // .TideChartCommandUpdateType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (target_case()) {
    // string node = 5;
    case kNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node());
      break;
    }
    // string region = 6;
    case kRegion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
      break;
    }
    // string widget = 7;
    case kWidget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->widget());
      break;
    }
    // string graph = 8;
    case kGraph: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->graph());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartPropertyCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartPropertyCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartPropertyCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartPropertyCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartPropertyCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartPropertyCommand)
    MergeFrom(*source);
  }
}

void TideChartPropertyCommand::MergeFrom(const TideChartPropertyCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartPropertyCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fromprops_.MergeFrom(from.fromprops_);
  toprops_.MergeFrom(from.toprops_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.target_case()) {
    case kNode: {
      set_node(from.node());
      break;
    }
    case kRegion: {
      set_region(from.region());
      break;
    }
    case kWidget: {
      set_widget(from.widget());
      break;
    }
    case kGraph: {
      set_graph(from.graph());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void TideChartPropertyCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartPropertyCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartPropertyCommand::CopyFrom(const TideChartPropertyCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartPropertyCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartPropertyCommand::IsInitialized() const {
  return true;
}

void TideChartPropertyCommand::Swap(TideChartPropertyCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartPropertyCommand::InternalSwap(TideChartPropertyCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fromprops_)->InternalSwap(CastToBase(&other->fromprops_));
  CastToBase(&toprops_)->InternalSwap(CastToBase(&other->toprops_));
  swap(type_, other->type_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TideChartPropertyCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartNoteCommand::InitAsDefaultInstance() {
  ::_TideChartNoteCommand_default_instance_.node_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartNoteCommand_default_instance_.region_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartNoteCommand_default_instance_.graph_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class TideChartNoteCommand::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartNoteCommand::kNotesFieldNumber;
const int TideChartNoteCommand::kTypeFieldNumber;
const int TideChartNoteCommand::kNodeFieldNumber;
const int TideChartNoteCommand::kRegionFieldNumber;
const int TideChartNoteCommand::kGraphFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartNoteCommand::TideChartNoteCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartNoteCommand)
}
TideChartNoteCommand::TideChartNoteCommand(const TideChartNoteCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      notes_(from.notes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_target();
  switch (from.target_case()) {
    case kNode: {
      set_node(from.node());
      break;
    }
    case kRegion: {
      set_region(from.region());
      break;
    }
    case kGraph: {
      set_graph(from.graph());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TideChartNoteCommand)
}

void TideChartNoteCommand::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartNoteCommand_tide_5fchart_2eproto.base);
  type_ = 0;
  clear_has_target();
}

TideChartNoteCommand::~TideChartNoteCommand() {
  // @@protoc_insertion_point(destructor:TideChartNoteCommand)
  SharedDtor();
}

void TideChartNoteCommand::SharedDtor() {
  if (has_target()) {
    clear_target();
  }
}

void TideChartNoteCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartNoteCommand& TideChartNoteCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartNoteCommand_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartNoteCommand::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:TideChartNoteCommand)
  switch (target_case()) {
    case kNode: {
      target_.node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRegion: {
      target_.region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGraph: {
      target_.graph_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void TideChartNoteCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartNoteCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notes_.Clear();
  type_ = 0;
  clear_target();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartNoteCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartNoteCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .TideChartNote notes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartNote::_InternalParse;
          object = msg->add_notes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .TideChartCommandUpdateType type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::TideChartCommandUpdateType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string node = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNoteCommand.node");
        object = msg->mutable_node();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string region = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNoteCommand.region");
        object = msg->mutable_region();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string graph = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartNoteCommand.graph");
        object = msg->mutable_graph();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartNoteCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartNoteCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TideChartNote notes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartCommandUpdateType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TideChartCommandUpdateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), static_cast<int>(this->node().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNoteCommand.node"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), static_cast<int>(this->region().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNoteCommand.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string graph = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph().data(), static_cast<int>(this->graph().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartNoteCommand.graph"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartNoteCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartNoteCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartNoteCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartNoteCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TideChartNote notes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notes(static_cast<int>(i)),
      output);
  }

  // .TideChartCommandUpdateType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string node = 3;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNoteCommand.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node(), output);
  }

  // string region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNoteCommand.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->region(), output);
  }

  // string graph = 5;
  if (has_graph()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph().data(), static_cast<int>(this->graph().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNoteCommand.graph");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->graph(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartNoteCommand)
}

::google::protobuf::uint8* TideChartNoteCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartNoteCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TideChartNote notes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notes(static_cast<int>(i)), target);
  }

  // .TideChartCommandUpdateType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string node = 3;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNoteCommand.node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node(), target);
  }

  // string region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNoteCommand.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->region(), target);
  }

  // string graph = 5;
  if (has_graph()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph().data(), static_cast<int>(this->graph().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartNoteCommand.graph");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->graph(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartNoteCommand)
  return target;
}

size_t TideChartNoteCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartNoteCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartNote notes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notes(static_cast<int>(i)));
    }
  }

  // .TideChartCommandUpdateType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (target_case()) {
    // string node = 3;
    case kNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node());
      break;
    }
    // string region = 4;
    case kRegion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
      break;
    }
    // string graph = 5;
    case kGraph: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->graph());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartNoteCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartNoteCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartNoteCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartNoteCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartNoteCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartNoteCommand)
    MergeFrom(*source);
  }
}

void TideChartNoteCommand::MergeFrom(const TideChartNoteCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartNoteCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notes_.MergeFrom(from.notes_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.target_case()) {
    case kNode: {
      set_node(from.node());
      break;
    }
    case kRegion: {
      set_region(from.region());
      break;
    }
    case kGraph: {
      set_graph(from.graph());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void TideChartNoteCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartNoteCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartNoteCommand::CopyFrom(const TideChartNoteCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartNoteCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartNoteCommand::IsInitialized() const {
  return true;
}

void TideChartNoteCommand::Swap(TideChartNoteCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartNoteCommand::InternalSwap(TideChartNoteCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&notes_)->InternalSwap(CastToBase(&other->notes_));
  swap(type_, other->type_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TideChartNoteCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartSource::InitAsDefaultInstance() {
  ::_TideChartSource_default_instance_.version_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartSource_default_instance_.script_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class TideChartSource::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartSource::kIdFieldNumber;
const int TideChartSource::kNameFieldNumber;
const int TideChartSource::kPathFieldNumber;
const int TideChartSource::kModifiedDateFieldNumber;
const int TideChartSource::kModifiedByFieldNumber;
const int TideChartSource::kVersionFieldNumber;
const int TideChartSource::kScriptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartSource::TideChartSource()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartSource)
}
TideChartSource::TideChartSource(const TideChartSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  modifieddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modifieddate().size() > 0) {
    modifieddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
  }
  modifiedby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modifiedby().size() > 0) {
    modifiedby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifiedby_);
  }
  clear_has_content();
  switch (from.content_case()) {
    case kVersion: {
      set_version(from.version());
      break;
    }
    case kScript: {
      set_script(from.script());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TideChartSource)
}

void TideChartSource::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartSource_tide_5fchart_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}

TideChartSource::~TideChartSource() {
  // @@protoc_insertion_point(destructor:TideChartSource)
  SharedDtor();
}

void TideChartSource::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_content()) {
    clear_content();
  }
}

void TideChartSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartSource& TideChartSource::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartSource_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartSource::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:TideChartSource)
  switch (content_case()) {
    case kVersion: {
      content_.version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kScript: {
      content_.script_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void TideChartSource::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_content();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartSource::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartSource*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSource.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSource.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSource.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string modifiedDate = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSource.modifiedDate");
        object = msg->mutable_modifieddate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string modifiedBy = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSource.modifiedBy");
        object = msg->mutable_modifiedby();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSource.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string script = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSource.script");
        object = msg->mutable_script();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartSource)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSource.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSource.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSource.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modifiedDate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifieddate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSource.modifiedDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modifiedBy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifiedby()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSource.modifiedBy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSource.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string script = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->script().data(), static_cast<int>(this->script().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSource.script"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.modifiedDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->modifieddate(), output);
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.modifiedBy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->modifiedby(), output);
  }

  // string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->version(), output);
  }

  // string script = 8;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.script");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->script(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartSource)
}

::google::protobuf::uint8* TideChartSource::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.modifiedDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->modifieddate(), target);
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.modifiedBy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->modifiedby(), target);
  }

  // string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }

  // string script = 8;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSource.script");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->script(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartSource)
  return target;
}

size_t TideChartSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifieddate());
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifiedby());
  }

  switch (content_case()) {
    // string version = 7;
    case kVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
      break;
    }
    // string script = 8;
    case kScript: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartSource)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartSource* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartSource)
    MergeFrom(*source);
  }
}

void TideChartSource::MergeFrom(const TideChartSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.modifieddate().size() > 0) {

    modifieddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
  }
  if (from.modifiedby().size() > 0) {

    modifiedby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifiedby_);
  }
  switch (from.content_case()) {
    case kVersion: {
      set_version(from.version());
      break;
    }
    case kScript: {
      set_script(from.script());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void TideChartSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartSource::CopyFrom(const TideChartSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartSource::IsInitialized() const {
  return true;
}

void TideChartSource::Swap(TideChartSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartSource::InternalSwap(TideChartSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modifieddate_.Swap(&other->modifieddate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modifiedby_.Swap(&other->modifiedby_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TideChartSource::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartLibrary::InitAsDefaultInstance() {
  ::_TideChartLibrary_default_instance_._instance.get_mutable()->methods_ = const_cast< ::TideChartData*>(
      ::TideChartData::internal_default_instance());
}
class TideChartLibrary::HasBitSetters {
 public:
  static const ::TideChartData& methods(const TideChartLibrary* msg);
};

const ::TideChartData&
TideChartLibrary::HasBitSetters::methods(const TideChartLibrary* msg) {
  return *msg->methods_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartLibrary::kIdFieldNumber;
const int TideChartLibrary::kNameFieldNumber;
const int TideChartLibrary::kTitleFieldNumber;
const int TideChartLibrary::kOriginFieldNumber;
const int TideChartLibrary::kBranchFieldNumber;
const int TideChartLibrary::kPathFieldNumber;
const int TideChartLibrary::kFilesFieldNumber;
const int TideChartLibrary::kMethodsFieldNumber;
const int TideChartLibrary::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartLibrary::TideChartLibrary()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartLibrary)
}
TideChartLibrary::TideChartLibrary(const TideChartLibrary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      files_(from.files_),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.origin().size() > 0) {
    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.branch().size() > 0) {
    branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_methods()) {
    methods_ = new ::TideChartData(*from.methods_);
  } else {
    methods_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TideChartLibrary)
}

void TideChartLibrary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartData_tide_5fchart_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  methods_ = nullptr;
}

TideChartLibrary::~TideChartLibrary() {
  // @@protoc_insertion_point(destructor:TideChartLibrary)
  SharedDtor();
}

void TideChartLibrary::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete methods_;
}

void TideChartLibrary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartLibrary& TideChartLibrary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartData_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartLibrary::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartLibrary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  settings_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && methods_ != nullptr) {
    delete methods_;
  }
  methods_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartLibrary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartLibrary*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLibrary.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLibrary.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string title = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLibrary.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string origin = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLibrary.origin");
        object = msg->mutable_origin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string branch = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLibrary.branch");
        object = msg->mutable_branch();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string path = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLibrary.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .TideChartSource files = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartSource::_InternalParse;
          object = msg->add_files();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 114 && (ptr += 1));
        break;
      }
      // .TideChartData methods = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartData::_InternalParse;
        object = msg->mutable_methods();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .TideChartProperty settings = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 386 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartLibrary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartLibrary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLibrary.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLibrary.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLibrary.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string origin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->origin().data(), static_cast<int>(this->origin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLibrary.origin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string branch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->branch().data(), static_cast<int>(this->branch().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLibrary.branch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLibrary.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartSource files = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartData methods = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_methods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty settings = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartLibrary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartLibrary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartLibrary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartLibrary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // string origin = 10;
  if (this->origin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.origin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->origin(), output);
  }

  // string branch = 11;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.branch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->branch(), output);
  }

  // string path = 12;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->path(), output);
  }

  // repeated .TideChartSource files = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->files(static_cast<int>(i)),
      output);
  }

  // .TideChartData methods = 15;
  if (this->has_methods()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::methods(this), output);
  }

  // repeated .TideChartProperty settings = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->settings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartLibrary)
}

::google::protobuf::uint8* TideChartLibrary::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartLibrary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // string origin = 10;
  if (this->origin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.origin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->origin(), target);
  }

  // string branch = 11;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.branch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->branch(), target);
  }

  // string path = 12;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLibrary.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->path(), target);
  }

  // repeated .TideChartSource files = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->files(static_cast<int>(i)), target);
  }

  // .TideChartData methods = 15;
  if (this->has_methods()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::methods(this), target);
  }

  // repeated .TideChartProperty settings = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->settings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartLibrary)
  return target;
}

size_t TideChartLibrary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartLibrary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartSource files = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->files(static_cast<int>(i)));
    }
  }

  // repeated .TideChartProperty settings = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->settings(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string origin = 10;
  if (this->origin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->origin());
  }

  // string branch = 11;
  if (this->branch().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->branch());
  }

  // string path = 12;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .TideChartData methods = 15;
  if (this->has_methods()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *methods_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartLibrary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartLibrary)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartLibrary* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartLibrary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartLibrary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartLibrary)
    MergeFrom(*source);
  }
}

void TideChartLibrary::MergeFrom(const TideChartLibrary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartLibrary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  settings_.MergeFrom(from.settings_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.origin().size() > 0) {

    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  if (from.branch().size() > 0) {

    branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_methods()) {
    mutable_methods()->::TideChartData::MergeFrom(from.methods());
  }
}

void TideChartLibrary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartLibrary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartLibrary::CopyFrom(const TideChartLibrary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartLibrary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartLibrary::IsInitialized() const {
  return true;
}

void TideChartLibrary::Swap(TideChartLibrary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartLibrary::InternalSwap(TideChartLibrary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&files_)->InternalSwap(CastToBase(&other->files_));
  CastToBase(&settings_)->InternalSwap(CastToBase(&other->settings_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  origin_.Swap(&other->origin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  branch_.Swap(&other->branch_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(methods_, other->methods_);
}

::google::protobuf::Metadata TideChartLibrary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartSite::InitAsDefaultInstance() {
}
class TideChartSite::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartSite::kIndexFieldNumber;
const int TideChartSite::kStackFieldNumber;
const int TideChartSite::kPathFieldNumber;
const int TideChartSite::kTriggerFieldNumber;
const int TideChartSite::kEventFieldNumber;
const int TideChartSite::kScopeFieldNumber;
const int TideChartSite::kFilterFieldNumber;
const int TideChartSite::kGraphFieldNumber;
const int TideChartSite::kRegionFieldNumber;
const int TideChartSite::kNodeFieldNumber;
const int TideChartSite::kPortFieldNumber;
const int TideChartSite::kLocalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartSite::TideChartSite()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartSite)
}
TideChartSite::TideChartSite(const TideChartSite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      stack_(from.stack_),
      scope_(from.scope_),
      local_(from.local_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  trigger_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trigger().size() > 0) {
    trigger_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_);
  }
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event().size() > 0) {
    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.graph().size() > 0) {
    graph_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node().size() > 0) {
    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port().size() > 0) {
    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TideChartSite)
}

void TideChartSite::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartSite_tide_5fchart_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = PROTOBUF_LONGLONG(0);
}

TideChartSite::~TideChartSite() {
  // @@protoc_insertion_point(destructor:TideChartSite)
  SharedDtor();
}

void TideChartSite::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartSite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartSite& TideChartSite::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartSite_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartSite::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stack_.Clear();
  scope_.Clear();
  local_.Clear();
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartSite::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartSite*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .TideChartSite stack = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartSite::_InternalParse;
          object = msg->add_stack();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // string path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSite.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string trigger = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSite.trigger");
        object = msg->mutable_trigger();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string event = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSite.event");
        object = msg->mutable_event();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string scope = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("TideChartSite.scope");
          object = msg->add_scope();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // string filter = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSite.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string graph = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSite.graph");
        object = msg->mutable_graph();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string region = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSite.region");
        object = msg->mutable_region();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string node = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSite.node");
        object = msg->mutable_node();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string port = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartSite.port");
        object = msg->mutable_port();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .TideChartProperty local = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_local();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartSite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartSite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartSite stack = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSite.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trigger = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trigger().data(), static_cast<int>(this->trigger().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSite.trigger"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string event = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event().data(), static_cast<int>(this->event().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSite.event"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string scope = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_scope()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scope(this->scope_size() - 1).data(),
            static_cast<int>(this->scope(this->scope_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSite.scope"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSite.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string graph = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph().data(), static_cast<int>(this->graph().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSite.graph"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), static_cast<int>(this->region().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSite.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), static_cast<int>(this->node().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSite.node"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port().data(), static_cast<int>(this->port().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartSite.port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty local = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_local()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartSite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartSite)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartSite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->index(), output);
  }

  // repeated .TideChartSite stack = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stack_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stack(static_cast<int>(i)),
      output);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // string trigger = 4;
  if (this->trigger().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger().data(), static_cast<int>(this->trigger().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.trigger");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->trigger(), output);
  }

  // string event = 5;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->event(), output);
  }

  // repeated string scope = 6;
  for (int i = 0, n = this->scope_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scope(i).data(), static_cast<int>(this->scope(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.scope");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->scope(i), output);
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filter(), output);
  }

  // string graph = 8;
  if (this->graph().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph().data(), static_cast<int>(this->graph().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.graph");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->graph(), output);
  }

  // string region = 9;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->region(), output);
  }

  // string node = 10;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->node(), output);
  }

  // string port = 11;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->port(), output);
  }

  // repeated .TideChartProperty local = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->local_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->local(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartSite)
}

::google::protobuf::uint8* TideChartSite::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->index(), target);
  }

  // repeated .TideChartSite stack = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stack_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stack(static_cast<int>(i)), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // string trigger = 4;
  if (this->trigger().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger().data(), static_cast<int>(this->trigger().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.trigger");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->trigger(), target);
  }

  // string event = 5;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->event(), target);
  }

  // repeated string scope = 6;
  for (int i = 0, n = this->scope_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scope(i).data(), static_cast<int>(this->scope(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.scope");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->scope(i), target);
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filter(), target);
  }

  // string graph = 8;
  if (this->graph().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph().data(), static_cast<int>(this->graph().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.graph");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->graph(), target);
  }

  // string region = 9;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), static_cast<int>(this->region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->region(), target);
  }

  // string node = 10;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->node(), target);
  }

  // string port = 11;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartSite.port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->port(), target);
  }

  // repeated .TideChartProperty local = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->local_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->local(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartSite)
  return target;
}

size_t TideChartSite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartSite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartSite stack = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stack_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stack(static_cast<int>(i)));
    }
  }

  // repeated string scope = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->scope_size());
  for (int i = 0, n = this->scope_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->scope(i));
  }

  // repeated .TideChartProperty local = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->local_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->local(static_cast<int>(i)));
    }
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string trigger = 4;
  if (this->trigger().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trigger());
  }

  // string event = 5;
  if (this->event().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event());
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string graph = 8;
  if (this->graph().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph());
  }

  // string region = 9;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  // string node = 10;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node());
  }

  // string port = 11;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port());
  }

  // int64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartSite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartSite)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartSite* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartSite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartSite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartSite)
    MergeFrom(*source);
  }
}

void TideChartSite::MergeFrom(const TideChartSite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartSite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stack_.MergeFrom(from.stack_);
  scope_.MergeFrom(from.scope_);
  local_.MergeFrom(from.local_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.trigger().size() > 0) {

    trigger_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_);
  }
  if (from.event().size() > 0) {

    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.graph().size() > 0) {

    graph_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.node().size() > 0) {

    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  if (from.port().size() > 0) {

    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void TideChartSite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartSite::CopyFrom(const TideChartSite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartSite::IsInitialized() const {
  return true;
}

void TideChartSite::Swap(TideChartSite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartSite::InternalSwap(TideChartSite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&stack_)->InternalSwap(CastToBase(&other->stack_));
  scope_.InternalSwap(CastToBase(&other->scope_));
  CastToBase(&local_)->InternalSwap(CastToBase(&other->local_));
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trigger_.Swap(&other->trigger_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_.Swap(&other->event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  graph_.Swap(&other->graph_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_.Swap(&other->region_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_.Swap(&other->node_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  port_.Swap(&other->port_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
}

::google::protobuf::Metadata TideChartSite::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartMessage::InitAsDefaultInstance() {
  ::_TideChartMessage_default_instance_.jsoncontent_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_TideChartMessage_default_instance_.msgcontent_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class TideChartMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartMessage::kIndexFieldNumber;
const int TideChartMessage::kTimestampFieldNumber;
const int TideChartMessage::kOriginFieldNumber;
const int TideChartMessage::kPreviousFieldNumber;
const int TideChartMessage::kSourceFieldNumber;
const int TideChartMessage::kTargetFieldNumber;
const int TideChartMessage::kDelayUntilFieldNumber;
const int TideChartMessage::kHoldTokenFieldNumber;
const int TideChartMessage::kCancelTokenFieldNumber;
const int TideChartMessage::kTypeFieldNumber;
const int TideChartMessage::kVersionFieldNumber;
const int TideChartMessage::kJsonContentFieldNumber;
const int TideChartMessage::kMsgContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartMessage::TideChartMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartMessage)
}
TideChartMessage::TideChartMessage(const TideChartMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&index_)) + sizeof(version_));
  clear_has_content();
  switch (from.content_case()) {
    case kJsonContent: {
      set_jsoncontent(from.jsoncontent());
      break;
    }
    case kMsgContent: {
      set_msgcontent(from.msgcontent());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TideChartMessage)
}

void TideChartMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartMessage_tide_5fchart_2eproto.base);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&index_)) + sizeof(version_));
  clear_has_content();
}

TideChartMessage::~TideChartMessage() {
  // @@protoc_insertion_point(destructor:TideChartMessage)
  SharedDtor();
}

void TideChartMessage::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_content()) {
    clear_content();
  }
}

void TideChartMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartMessage& TideChartMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartMessage_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartMessage::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:TideChartMessage)
  switch (content_case()) {
    case kJsonContent: {
      content_.jsoncontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kMsgContent: {
      content_.msgcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void TideChartMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&index_)) + sizeof(version_));
  clear_content();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 origin = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_origin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 previous = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_previous(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 source = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_source(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 target = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_target(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 delayUntil = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_delayuntil(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 holdToken = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_holdtoken(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 cancelToken = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_canceltoken(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string type = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartMessage.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 version = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string jsonContent = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartMessage.jsonContent");
        object = msg->mutable_jsoncontent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes msgContent = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_msgcontent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 origin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 previous = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &previous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 source = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 delayUntil = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delayuntil_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 holdToken = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &holdtoken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cancelToken = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &canceltoken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartMessage.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string jsonContent = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsoncontent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jsoncontent().data(), static_cast<int>(this->jsoncontent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartMessage.jsonContent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msgContent = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->index(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // int64 origin = 4;
  if (this->origin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->origin(), output);
  }

  // int64 previous = 5;
  if (this->previous() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->previous(), output);
  }

  // int64 source = 7;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->source(), output);
  }

  // int64 target = 8;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->target(), output);
  }

  // int64 delayUntil = 9;
  if (this->delayuntil() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->delayuntil(), output);
  }

  // int64 holdToken = 10;
  if (this->holdtoken() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->holdtoken(), output);
  }

  // int64 cancelToken = 11;
  if (this->canceltoken() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->canceltoken(), output);
  }

  // string type = 12;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartMessage.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->type(), output);
  }

  // int32 version = 13;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->version(), output);
  }

  // string jsonContent = 14;
  if (has_jsoncontent()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsoncontent().data(), static_cast<int>(this->jsoncontent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartMessage.jsonContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->jsoncontent(), output);
  }

  // bytes msgContent = 15;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->msgcontent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartMessage)
}

::google::protobuf::uint8* TideChartMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->index(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // int64 origin = 4;
  if (this->origin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->origin(), target);
  }

  // int64 previous = 5;
  if (this->previous() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->previous(), target);
  }

  // int64 source = 7;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->source(), target);
  }

  // int64 target = 8;
  if (this->target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->target(), target);
  }

  // int64 delayUntil = 9;
  if (this->delayuntil() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->delayuntil(), target);
  }

  // int64 holdToken = 10;
  if (this->holdtoken() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->holdtoken(), target);
  }

  // int64 cancelToken = 11;
  if (this->canceltoken() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->canceltoken(), target);
  }

  // string type = 12;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartMessage.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->type(), target);
  }

  // int32 version = 13;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->version(), target);
  }

  // string jsonContent = 14;
  if (has_jsoncontent()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsoncontent().data(), static_cast<int>(this->jsoncontent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartMessage.jsonContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->jsoncontent(), target);
  }

  // bytes msgContent = 15;
  if (has_msgcontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->msgcontent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartMessage)
  return target;
}

size_t TideChartMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 12;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // int64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 origin = 4;
  if (this->origin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->origin());
  }

  // int64 previous = 5;
  if (this->previous() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->previous());
  }

  // int64 source = 7;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source());
  }

  // int64 target = 8;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target());
  }

  // int64 delayUntil = 9;
  if (this->delayuntil() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->delayuntil());
  }

  // int64 holdToken = 10;
  if (this->holdtoken() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->holdtoken());
  }

  // int64 cancelToken = 11;
  if (this->canceltoken() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->canceltoken());
  }

  // int32 version = 13;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  switch (content_case()) {
    // string jsonContent = 14;
    case kJsonContent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsoncontent());
      break;
    }
    // bytes msgContent = 15;
    case kMsgContent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgcontent());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartMessage* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartMessage)
    MergeFrom(*source);
  }
}

void TideChartMessage::MergeFrom(const TideChartMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.origin() != 0) {
    set_origin(from.origin());
  }
  if (from.previous() != 0) {
    set_previous(from.previous());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
  if (from.delayuntil() != 0) {
    set_delayuntil(from.delayuntil());
  }
  if (from.holdtoken() != 0) {
    set_holdtoken(from.holdtoken());
  }
  if (from.canceltoken() != 0) {
    set_canceltoken(from.canceltoken());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  switch (from.content_case()) {
    case kJsonContent: {
      set_jsoncontent(from.jsoncontent());
      break;
    }
    case kMsgContent: {
      set_msgcontent(from.msgcontent());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void TideChartMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartMessage::CopyFrom(const TideChartMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartMessage::IsInitialized() const {
  return true;
}

void TideChartMessage::Swap(TideChartMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartMessage::InternalSwap(TideChartMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(timestamp_, other->timestamp_);
  swap(origin_, other->origin_);
  swap(previous_, other->previous_);
  swap(source_, other->source_);
  swap(target_, other->target_);
  swap(delayuntil_, other->delayuntil_);
  swap(holdtoken_, other->holdtoken_);
  swap(canceltoken_, other->canceltoken_);
  swap(version_, other->version_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TideChartMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartContextChange::InitAsDefaultInstance() {
}
class TideChartContextChange::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartContextChange::kIndexFieldNumber;
const int TideChartContextChange::kTimestampFieldNumber;
const int TideChartContextChange::kTypeFieldNumber;
const int TideChartContextChange::kPropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartContextChange::TideChartContextChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartContextChange)
}
TideChartContextChange::TideChartContextChange(const TideChartContextChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      props_(from.props_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&index_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:TideChartContextChange)
}

void TideChartContextChange::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartContextChange_tide_5fchart_2eproto.base);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&index_)) + sizeof(timestamp_));
}

TideChartContextChange::~TideChartContextChange() {
  // @@protoc_insertion_point(destructor:TideChartContextChange)
  SharedDtor();
}

void TideChartContextChange::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartContextChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartContextChange& TideChartContextChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartContextChange_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartContextChange::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartContextChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&index_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartContextChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartContextChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartContextChange.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .TideChartProperty props = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_props();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartContextChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartContextChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartContextChange.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty props = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartContextChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartContextChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartContextChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartContextChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->index(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartContextChange.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // repeated .TideChartProperty props = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->props(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartContextChange)
}

::google::protobuf::uint8* TideChartContextChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartContextChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->index(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartContextChange.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // repeated .TideChartProperty props = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->props(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartContextChange)
  return target;
}

size_t TideChartContextChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartContextChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartProperty props = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // int64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartContextChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartContextChange)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartContextChange* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartContextChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartContextChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartContextChange)
    MergeFrom(*source);
  }
}

void TideChartContextChange::MergeFrom(const TideChartContextChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartContextChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void TideChartContextChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartContextChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartContextChange::CopyFrom(const TideChartContextChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartContextChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartContextChange::IsInitialized() const {
  return true;
}

void TideChartContextChange::Swap(TideChartContextChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartContextChange::InternalSwap(TideChartContextChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata TideChartContextChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartLogEntry::InitAsDefaultInstance() {
}
class TideChartLogEntry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartLogEntry::kIndexFieldNumber;
const int TideChartLogEntry::kTimestampFieldNumber;
const int TideChartLogEntry::kSourceFieldNumber;
const int TideChartLogEntry::kLevelFieldNumber;
const int TideChartLogEntry::kTagsFieldNumber;
const int TideChartLogEntry::kMessageFieldNumber;
const int TideChartLogEntry::kRefsFieldNumber;
const int TideChartLogEntry::kPropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartLogEntry::TideChartLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartLogEntry)
}
TideChartLogEntry::TideChartLogEntry(const TideChartLogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_),
      refs_(from.refs_),
      props_(from.props_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&index_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:TideChartLogEntry)
}

void TideChartLogEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartLogEntry_tide_5fchart_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&index_)) + sizeof(level_));
}

TideChartLogEntry::~TideChartLogEntry() {
  // @@protoc_insertion_point(destructor:TideChartLogEntry)
  SharedDtor();
}

void TideChartLogEntry::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartLogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartLogEntry& TideChartLogEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartLogEntry_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  refs_.Clear();
  props_.Clear();
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&index_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartLogEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartLogEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 source = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_source(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .TideChartLogLevel level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_level(static_cast<::TideChartLogLevel>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string tags = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("TideChartLogEntry.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // string message = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartLogEntry.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated int64 refs = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 58) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_refs();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        do {
          msg->add_refs(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 56 && (ptr += 1));
        break;
      }
      // repeated .TideChartProperty props = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_props();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartLogEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartLogLevel level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::TideChartLogLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLogEntry.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartLogEntry.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 refs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_refs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 58u, input, this->mutable_refs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty props = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartLogEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->index(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // int64 source = 3;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->source(), output);
  }

  // .TideChartLogLevel level = 4;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->level(), output);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLogEntry.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tags(i), output);
  }

  // string message = 6;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLogEntry.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->message(), output);
  }

  // repeated int64 refs = 7;
  if (this->refs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_refs_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->refs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->refs(i), output);
  }

  // repeated .TideChartProperty props = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->props(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartLogEntry)
}

::google::protobuf::uint8* TideChartLogEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->index(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // int64 source = 3;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->source(), target);
  }

  // .TideChartLogLevel level = 4;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->level(), target);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLogEntry.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->tags(i), target);
  }

  // string message = 6;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartLogEntry.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->message(), target);
  }

  // repeated int64 refs = 7;
  if (this->refs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _refs_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->refs_, target);
  }

  // repeated .TideChartProperty props = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->props(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartLogEntry)
  return target;
}

size_t TideChartLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartLogEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated int64 refs = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->refs_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _refs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TideChartProperty props = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // string message = 6;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // int64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 source = 3;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source());
  }

  // .TideChartLogLevel level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartLogEntry* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartLogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartLogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartLogEntry)
    MergeFrom(*source);
  }
}

void TideChartLogEntry::MergeFrom(const TideChartLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  refs_.MergeFrom(from.refs_);
  props_.MergeFrom(from.props_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void TideChartLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartLogEntry::CopyFrom(const TideChartLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartLogEntry::IsInitialized() const {
  return true;
}

void TideChartLogEntry::Swap(TideChartLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartLogEntry::InternalSwap(TideChartLogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(CastToBase(&other->tags_));
  refs_.InternalSwap(&other->refs_);
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(timestamp_, other->timestamp_);
  swap(source_, other->source_);
  swap(level_, other->level_);
}

::google::protobuf::Metadata TideChartLogEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartContext::InitAsDefaultInstance() {
}
class TideChartContext::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartContext::kIdFieldNumber;
const int TideChartContext::kIndexFieldNumber;
const int TideChartContext::kTimestampFieldNumber;
const int TideChartContext::kVersionFieldNumber;
const int TideChartContext::kSitesFieldNumber;
const int TideChartContext::kMessagesFieldNumber;
const int TideChartContext::kGlobalFieldNumber;
const int TideChartContext::kStartTimeFieldNumber;
const int TideChartContext::kStartIndexFieldNumber;
const int TideChartContext::kActiveFieldNumber;
const int TideChartContext::kWaitingFieldNumber;
const int TideChartContext::kPausedFieldNumber;
const int TideChartContext::kDisabledFieldNumber;
const int TideChartContext::kEventsFieldNumber;
const int TideChartContext::kLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartContext::TideChartContext()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartContext)
}
TideChartContext::TideChartContext(const TideChartContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      sites_(from.sites_),
      messages_(from.messages_),
      global_(from.global_),
      active_(from.active_),
      waiting_(from.waiting_),
      paused_(from.paused_),
      disabled_(from.disabled_),
      events_(from.events_),
      log_(from.log_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&startindex_) -
    reinterpret_cast<char*>(&index_)) + sizeof(startindex_));
  // @@protoc_insertion_point(copy_constructor:TideChartContext)
}

void TideChartContext::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartContext_tide_5fchart_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startindex_) -
      reinterpret_cast<char*>(&index_)) + sizeof(startindex_));
}

TideChartContext::~TideChartContext() {
  // @@protoc_insertion_point(destructor:TideChartContext)
  SharedDtor();
}

void TideChartContext::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartContext& TideChartContext::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartContext_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartContext::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sites_.Clear();
  messages_.Clear();
  global_.Clear();
  active_.Clear();
  waiting_.Clear();
  paused_.Clear();
  disabled_.Clear();
  events_.Clear();
  log_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startindex_) -
      reinterpret_cast<char*>(&index_)) + sizeof(startindex_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartContext::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartContext*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartContext.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartContext.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .TideChartSite sites = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartSite::_InternalParse;
          object = msg->add_sites();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .TideChartMessage messages = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartMessage::_InternalParse;
          object = msg->add_messages();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .TideChartProperty global = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_global();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // int64 startTime = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_starttime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 startIndex = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_startindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int64 active = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 82) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_active();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        do {
          msg->add_active(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 80 && (ptr += 1));
        break;
      }
      // repeated int64 waiting = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) == 90) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_waiting();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        do {
          msg->add_waiting(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 88 && (ptr += 1));
        break;
      }
      // repeated int64 paused = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) == 98) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_paused();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        do {
          msg->add_paused(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 96 && (ptr += 1));
        break;
      }
      // repeated int64 disabled = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) == 106) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_disabled();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        do {
          msg->add_disabled(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 104 && (ptr += 1));
        break;
      }
      // repeated .TideChartContextChange events = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartContextChange::_InternalParse;
          object = msg->add_events();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 114 && (ptr += 1));
        break;
      }
      // repeated .TideChartLogEntry log = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartLogEntry::_InternalParse;
          object = msg->add_log();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 122 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartContext)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartContext.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartContext.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartSite sites = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartMessage messages = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty global = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_global()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 startTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 startIndex = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 active = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_active())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 82u, input, this->mutable_active())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 waiting = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_waiting())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 90u, input, this->mutable_waiting())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 paused = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_paused())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 98u, input, this->mutable_paused())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 disabled = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_disabled())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 106u, input, this->mutable_disabled())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartContextChange events = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartLogEntry log = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartContext)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartContext.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // int64 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->index(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartContext.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // repeated .TideChartSite sites = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sites_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->sites(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartMessage messages = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->messages(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartProperty global = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->global_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->global(static_cast<int>(i)),
      output);
  }

  // int64 startTime = 8;
  if (this->starttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->starttime(), output);
  }

  // int64 startIndex = 9;
  if (this->startindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->startindex(), output);
  }

  // repeated int64 active = 10;
  if (this->active_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_active_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->active_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->active(i), output);
  }

  // repeated int64 waiting = 11;
  if (this->waiting_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_waiting_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->waiting_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->waiting(i), output);
  }

  // repeated int64 paused = 12;
  if (this->paused_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_paused_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->paused_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->paused(i), output);
  }

  // repeated int64 disabled = 13;
  if (this->disabled_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_disabled_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->disabled_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->disabled(i), output);
  }

  // repeated .TideChartContextChange events = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->events(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartLogEntry log = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->log(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartContext)
}

::google::protobuf::uint8* TideChartContext::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartContext.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // int64 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->index(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartContext.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // repeated .TideChartSite sites = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sites_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->sites(static_cast<int>(i)), target);
  }

  // repeated .TideChartMessage messages = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->messages(static_cast<int>(i)), target);
  }

  // repeated .TideChartProperty global = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->global_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->global(static_cast<int>(i)), target);
  }

  // int64 startTime = 8;
  if (this->starttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->starttime(), target);
  }

  // int64 startIndex = 9;
  if (this->startindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->startindex(), target);
  }

  // repeated int64 active = 10;
  if (this->active_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _active_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->active_, target);
  }

  // repeated int64 waiting = 11;
  if (this->waiting_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _waiting_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->waiting_, target);
  }

  // repeated int64 paused = 12;
  if (this->paused_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _paused_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->paused_, target);
  }

  // repeated int64 disabled = 13;
  if (this->disabled_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _disabled_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->disabled_, target);
  }

  // repeated .TideChartContextChange events = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->events(static_cast<int>(i)), target);
  }

  // repeated .TideChartLogEntry log = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->log(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartContext)
  return target;
}

size_t TideChartContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartContext)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartSite sites = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->sites_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sites(static_cast<int>(i)));
    }
  }

  // repeated .TideChartMessage messages = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  // repeated .TideChartProperty global = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->global_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->global(static_cast<int>(i)));
    }
  }

  // repeated int64 active = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->active_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _active_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 waiting = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->waiting_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _waiting_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 paused = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->paused_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _paused_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 disabled = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->disabled_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _disabled_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TideChartContextChange events = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // repeated .TideChartLogEntry log = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->log_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->log(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // int64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 startTime = 8;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->starttime());
  }

  // int64 startIndex = 9;
  if (this->startindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->startindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartContext)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartContext* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartContext)
    MergeFrom(*source);
  }
}

void TideChartContext::MergeFrom(const TideChartContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sites_.MergeFrom(from.sites_);
  messages_.MergeFrom(from.messages_);
  global_.MergeFrom(from.global_);
  active_.MergeFrom(from.active_);
  waiting_.MergeFrom(from.waiting_);
  paused_.MergeFrom(from.paused_);
  disabled_.MergeFrom(from.disabled_);
  events_.MergeFrom(from.events_);
  log_.MergeFrom(from.log_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.starttime() != 0) {
    set_starttime(from.starttime());
  }
  if (from.startindex() != 0) {
    set_startindex(from.startindex());
  }
}

void TideChartContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartContext::CopyFrom(const TideChartContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartContext::IsInitialized() const {
  return true;
}

void TideChartContext::Swap(TideChartContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartContext::InternalSwap(TideChartContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sites_)->InternalSwap(CastToBase(&other->sites_));
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
  CastToBase(&global_)->InternalSwap(CastToBase(&other->global_));
  active_.InternalSwap(&other->active_);
  waiting_.InternalSwap(&other->waiting_);
  paused_.InternalSwap(&other->paused_);
  disabled_.InternalSwap(&other->disabled_);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  CastToBase(&log_)->InternalSwap(CastToBase(&other->log_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(timestamp_, other->timestamp_);
  swap(starttime_, other->starttime_);
  swap(startindex_, other->startindex_);
}

::google::protobuf::Metadata TideChartContext::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartData::InitAsDefaultInstance() {
}
class TideChartData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartData::kVersionFieldNumber;
const int TideChartData::kBranchFieldNumber;
const int TideChartData::kSourceFieldNumber;
const int TideChartData::kMergeFieldNumber;
const int TideChartData::kCommitDateFieldNumber;
const int TideChartData::kCommitByFieldNumber;
const int TideChartData::kCommitDescFieldNumber;
const int TideChartData::kCommitNotesFieldNumber;
const int TideChartData::kSheetsFieldNumber;
const int TideChartData::kPropsFieldNumber;
const int TideChartData::kNotesFieldNumber;
const int TideChartData::kLibraryFieldNumber;
const int TideChartData::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartData::TideChartData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartData)
}
TideChartData::TideChartData(const TideChartData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      sheets_(from.sheets_),
      props_(from.props_),
      notes_(from.notes_),
      library_(from.library_),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.branch().size() > 0) {
    branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  merge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.merge().size() > 0) {
    merge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merge_);
  }
  commitdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.commitdate().size() > 0) {
    commitdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitdate_);
  }
  commitby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.commitby().size() > 0) {
    commitby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitby_);
  }
  commitdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.commitdesc().size() > 0) {
    commitdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitdesc_);
  }
  commitnotes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.commitnotes().size() > 0) {
    commitnotes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitnotes_);
  }
  // @@protoc_insertion_point(copy_constructor:TideChartData)
}

void TideChartData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartData_tide_5fchart_2eproto.base);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitnotes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TideChartData::~TideChartData() {
  // @@protoc_insertion_point(destructor:TideChartData)
  SharedDtor();
}

void TideChartData::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitby_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitnotes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartData& TideChartData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartData_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartData::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sheets_.Clear();
  props_.Clear();
  notes_.Clear();
  library_.Clear();
  settings_.Clear();
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitnotes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartData.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string branch = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartData.branch");
        object = msg->mutable_branch();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string source = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartData.source");
        object = msg->mutable_source();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string merge = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartData.merge");
        object = msg->mutable_merge();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string commitDate = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartData.commitDate");
        object = msg->mutable_commitdate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string commitBy = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartData.commitBy");
        object = msg->mutable_commitby();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string commitDesc = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartData.commitDesc");
        object = msg->mutable_commitdesc();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string commitNotes = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartData.commitNotes");
        object = msg->mutable_commitnotes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .TideChartGraph sheets = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartGraph::_InternalParse;
          object = msg->add_sheets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // repeated .TideChartProperty props = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_props();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // repeated .TideChartNote notes = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartNote::_InternalParse;
          object = msg->add_notes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // repeated .TideChartLibrary library = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartLibrary::_InternalParse;
          object = msg->add_library();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      // repeated .TideChartProperty settings = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartProperty::_InternalParse;
          object = msg->add_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 434 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartData.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string branch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->branch().data(), static_cast<int>(this->branch().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartData.branch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartData.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string merge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merge()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->merge().data(), static_cast<int>(this->merge().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartData.merge"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string commitDate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commitdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->commitdate().data(), static_cast<int>(this->commitdate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartData.commitDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string commitBy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commitby()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->commitby().data(), static_cast<int>(this->commitby().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartData.commitBy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string commitDesc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commitdesc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->commitdesc().data(), static_cast<int>(this->commitdesc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartData.commitDesc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string commitNotes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commitnotes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->commitnotes().data(), static_cast<int>(this->commitnotes().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartData.commitNotes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartGraph sheets = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sheets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty props = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartNote notes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartLibrary library = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_library()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartProperty settings = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // string branch = 2;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.branch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->branch(), output);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source(), output);
  }

  // string merge = 4;
  if (this->merge().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->merge().data(), static_cast<int>(this->merge().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.merge");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->merge(), output);
  }

  // string commitDate = 5;
  if (this->commitdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitdate().data(), static_cast<int>(this->commitdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.commitDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->commitdate(), output);
  }

  // string commitBy = 6;
  if (this->commitby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitby().data(), static_cast<int>(this->commitby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.commitBy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->commitby(), output);
  }

  // string commitDesc = 7;
  if (this->commitdesc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitdesc().data(), static_cast<int>(this->commitdesc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.commitDesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->commitdesc(), output);
  }

  // string commitNotes = 8;
  if (this->commitnotes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitnotes().data(), static_cast<int>(this->commitnotes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.commitNotes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->commitnotes(), output);
  }

  // repeated .TideChartGraph sheets = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sheets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->sheets(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartProperty props = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->props(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartNote notes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->notes(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartLibrary library = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->library_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->library(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartProperty settings = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->settings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartData)
}

::google::protobuf::uint8* TideChartData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // string branch = 2;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.branch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->branch(), target);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source(), target);
  }

  // string merge = 4;
  if (this->merge().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->merge().data(), static_cast<int>(this->merge().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.merge");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->merge(), target);
  }

  // string commitDate = 5;
  if (this->commitdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitdate().data(), static_cast<int>(this->commitdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.commitDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->commitdate(), target);
  }

  // string commitBy = 6;
  if (this->commitby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitby().data(), static_cast<int>(this->commitby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.commitBy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->commitby(), target);
  }

  // string commitDesc = 7;
  if (this->commitdesc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitdesc().data(), static_cast<int>(this->commitdesc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.commitDesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->commitdesc(), target);
  }

  // string commitNotes = 8;
  if (this->commitnotes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitnotes().data(), static_cast<int>(this->commitnotes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartData.commitNotes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->commitnotes(), target);
  }

  // repeated .TideChartGraph sheets = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sheets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->sheets(static_cast<int>(i)), target);
  }

  // repeated .TideChartProperty props = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->props(static_cast<int>(i)), target);
  }

  // repeated .TideChartNote notes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->notes(static_cast<int>(i)), target);
  }

  // repeated .TideChartLibrary library = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->library_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->library(static_cast<int>(i)), target);
  }

  // repeated .TideChartProperty settings = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->settings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartData)
  return target;
}

size_t TideChartData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartGraph sheets = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->sheets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sheets(static_cast<int>(i)));
    }
  }

  // repeated .TideChartProperty props = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // repeated .TideChartNote notes = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->notes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notes(static_cast<int>(i)));
    }
  }

  // repeated .TideChartLibrary library = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->library_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->library(static_cast<int>(i)));
    }
  }

  // repeated .TideChartProperty settings = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->settings(static_cast<int>(i)));
    }
  }

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string branch = 2;
  if (this->branch().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->branch());
  }

  // string source = 3;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string merge = 4;
  if (this->merge().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merge());
  }

  // string commitDate = 5;
  if (this->commitdate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->commitdate());
  }

  // string commitBy = 6;
  if (this->commitby().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->commitby());
  }

  // string commitDesc = 7;
  if (this->commitdesc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->commitdesc());
  }

  // string commitNotes = 8;
  if (this->commitnotes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->commitnotes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartData)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartData* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartData)
    MergeFrom(*source);
  }
}

void TideChartData::MergeFrom(const TideChartData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sheets_.MergeFrom(from.sheets_);
  props_.MergeFrom(from.props_);
  notes_.MergeFrom(from.notes_);
  library_.MergeFrom(from.library_);
  settings_.MergeFrom(from.settings_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.branch().size() > 0) {

    branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.merge().size() > 0) {

    merge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merge_);
  }
  if (from.commitdate().size() > 0) {

    commitdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitdate_);
  }
  if (from.commitby().size() > 0) {

    commitby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitby_);
  }
  if (from.commitdesc().size() > 0) {

    commitdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitdesc_);
  }
  if (from.commitnotes().size() > 0) {

    commitnotes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitnotes_);
  }
}

void TideChartData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartData::CopyFrom(const TideChartData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartData::IsInitialized() const {
  return true;
}

void TideChartData::Swap(TideChartData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartData::InternalSwap(TideChartData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sheets_)->InternalSwap(CastToBase(&other->sheets_));
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  CastToBase(&notes_)->InternalSwap(CastToBase(&other->notes_));
  CastToBase(&library_)->InternalSwap(CastToBase(&other->library_));
  CastToBase(&settings_)->InternalSwap(CastToBase(&other->settings_));
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  branch_.Swap(&other->branch_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merge_.Swap(&other->merge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commitdate_.Swap(&other->commitdate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commitby_.Swap(&other->commitby_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commitdesc_.Swap(&other->commitdesc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commitnotes_.Swap(&other->commitnotes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TideChartData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartHeader::InitAsDefaultInstance() {
}
class TideChartHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartHeader::kVersionFieldNumber;
const int TideChartHeader::kBranchFieldNumber;
const int TideChartHeader::kSourceFieldNumber;
const int TideChartHeader::kMergeFieldNumber;
const int TideChartHeader::kCommitDateFieldNumber;
const int TideChartHeader::kCommitByFieldNumber;
const int TideChartHeader::kCommitDescFieldNumber;
const int TideChartHeader::kCommitNotesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartHeader::TideChartHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartHeader)
}
TideChartHeader::TideChartHeader(const TideChartHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.branch().size() > 0) {
    branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  merge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.merge().size() > 0) {
    merge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merge_);
  }
  commitdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.commitdate().size() > 0) {
    commitdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitdate_);
  }
  commitby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.commitby().size() > 0) {
    commitby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitby_);
  }
  commitdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.commitdesc().size() > 0) {
    commitdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitdesc_);
  }
  commitnotes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.commitnotes().size() > 0) {
    commitnotes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitnotes_);
  }
  // @@protoc_insertion_point(copy_constructor:TideChartHeader)
}

void TideChartHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartHeader_tide_5fchart_2eproto.base);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitnotes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TideChartHeader::~TideChartHeader() {
  // @@protoc_insertion_point(destructor:TideChartHeader)
  SharedDtor();
}

void TideChartHeader::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitby_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitnotes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartHeader& TideChartHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartHeader_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitnotes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartHeader.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string branch = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartHeader.branch");
        object = msg->mutable_branch();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string source = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartHeader.source");
        object = msg->mutable_source();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string merge = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartHeader.merge");
        object = msg->mutable_merge();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string commitDate = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartHeader.commitDate");
        object = msg->mutable_commitdate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string commitBy = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartHeader.commitBy");
        object = msg->mutable_commitby();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string commitDesc = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartHeader.commitDesc");
        object = msg->mutable_commitdesc();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string commitNotes = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartHeader.commitNotes");
        object = msg->mutable_commitnotes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartHeader.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string branch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->branch().data(), static_cast<int>(this->branch().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartHeader.branch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartHeader.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string merge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merge()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->merge().data(), static_cast<int>(this->merge().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartHeader.merge"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string commitDate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commitdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->commitdate().data(), static_cast<int>(this->commitdate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartHeader.commitDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string commitBy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commitby()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->commitby().data(), static_cast<int>(this->commitby().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartHeader.commitBy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string commitDesc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commitdesc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->commitdesc().data(), static_cast<int>(this->commitdesc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartHeader.commitDesc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string commitNotes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commitnotes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->commitnotes().data(), static_cast<int>(this->commitnotes().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartHeader.commitNotes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // string branch = 2;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.branch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->branch(), output);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source(), output);
  }

  // string merge = 4;
  if (this->merge().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->merge().data(), static_cast<int>(this->merge().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.merge");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->merge(), output);
  }

  // string commitDate = 5;
  if (this->commitdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitdate().data(), static_cast<int>(this->commitdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.commitDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->commitdate(), output);
  }

  // string commitBy = 6;
  if (this->commitby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitby().data(), static_cast<int>(this->commitby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.commitBy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->commitby(), output);
  }

  // string commitDesc = 7;
  if (this->commitdesc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitdesc().data(), static_cast<int>(this->commitdesc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.commitDesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->commitdesc(), output);
  }

  // string commitNotes = 8;
  if (this->commitnotes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitnotes().data(), static_cast<int>(this->commitnotes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.commitNotes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->commitnotes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartHeader)
}

::google::protobuf::uint8* TideChartHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // string branch = 2;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.branch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->branch(), target);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source(), target);
  }

  // string merge = 4;
  if (this->merge().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->merge().data(), static_cast<int>(this->merge().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.merge");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->merge(), target);
  }

  // string commitDate = 5;
  if (this->commitdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitdate().data(), static_cast<int>(this->commitdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.commitDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->commitdate(), target);
  }

  // string commitBy = 6;
  if (this->commitby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitby().data(), static_cast<int>(this->commitby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.commitBy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->commitby(), target);
  }

  // string commitDesc = 7;
  if (this->commitdesc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitdesc().data(), static_cast<int>(this->commitdesc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.commitDesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->commitdesc(), target);
  }

  // string commitNotes = 8;
  if (this->commitnotes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commitnotes().data(), static_cast<int>(this->commitnotes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartHeader.commitNotes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->commitnotes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartHeader)
  return target;
}

size_t TideChartHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string branch = 2;
  if (this->branch().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->branch());
  }

  // string source = 3;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string merge = 4;
  if (this->merge().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merge());
  }

  // string commitDate = 5;
  if (this->commitdate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->commitdate());
  }

  // string commitBy = 6;
  if (this->commitby().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->commitby());
  }

  // string commitDesc = 7;
  if (this->commitdesc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->commitdesc());
  }

  // string commitNotes = 8;
  if (this->commitnotes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->commitnotes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartHeader* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartHeader)
    MergeFrom(*source);
  }
}

void TideChartHeader::MergeFrom(const TideChartHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.branch().size() > 0) {

    branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.merge().size() > 0) {

    merge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merge_);
  }
  if (from.commitdate().size() > 0) {

    commitdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitdate_);
  }
  if (from.commitby().size() > 0) {

    commitby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitby_);
  }
  if (from.commitdesc().size() > 0) {

    commitdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitdesc_);
  }
  if (from.commitnotes().size() > 0) {

    commitnotes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitnotes_);
  }
}

void TideChartHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartHeader::CopyFrom(const TideChartHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartHeader::IsInitialized() const {
  return true;
}

void TideChartHeader::Swap(TideChartHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartHeader::InternalSwap(TideChartHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  branch_.Swap(&other->branch_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merge_.Swap(&other->merge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commitdate_.Swap(&other->commitdate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commitby_.Swap(&other->commitby_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commitdesc_.Swap(&other->commitdesc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commitnotes_.Swap(&other->commitnotes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TideChartHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartFile::InitAsDefaultInstance() {
  ::_TideChartFile_default_instance_._instance.get_mutable()->chart_ = const_cast< ::TideChartData*>(
      ::TideChartData::internal_default_instance());
}
class TideChartFile::HasBitSetters {
 public:
  static const ::TideChartData& chart(const TideChartFile* msg);
};

const ::TideChartData&
TideChartFile::HasBitSetters::chart(const TideChartFile* msg) {
  return *msg->chart_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartFile::kIdFieldNumber;
const int TideChartFile::kNameFieldNumber;
const int TideChartFile::kPathFieldNumber;
const int TideChartFile::kOriginFieldNumber;
const int TideChartFile::kModifiedDateFieldNumber;
const int TideChartFile::kModifiedByFieldNumber;
const int TideChartFile::kChartFieldNumber;
const int TideChartFile::kWorkingFieldNumber;
const int TideChartFile::kRemoteFieldNumber;
const int TideChartFile::kHistoryFieldNumber;
const int TideChartFile::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartFile::TideChartFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartFile)
}
TideChartFile::TideChartFile(const TideChartFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      working_(from.working_),
      remote_(from.remote_),
      history_(from.history_),
      context_(from.context_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.origin().size() > 0) {
    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  modifieddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modifieddate().size() > 0) {
    modifieddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
  }
  modifiedby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modifiedby().size() > 0) {
    modifiedby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifiedby_);
  }
  if (from.has_chart()) {
    chart_ = new ::TideChartData(*from.chart_);
  } else {
    chart_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TideChartFile)
}

void TideChartFile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartFile_tide_5fchart_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chart_ = nullptr;
}

TideChartFile::~TideChartFile() {
  // @@protoc_insertion_point(destructor:TideChartFile)
  SharedDtor();
}

void TideChartFile::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chart_;
}

void TideChartFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartFile& TideChartFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartFile_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartFile::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  working_.Clear();
  remote_.Clear();
  history_.Clear();
  context_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && chart_ != nullptr) {
    delete chart_;
  }
  chart_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFile.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFile.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFile.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string origin = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFile.origin");
        object = msg->mutable_origin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string modifiedDate = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFile.modifiedDate");
        object = msg->mutable_modifieddate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string modifiedBy = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFile.modifiedBy");
        object = msg->mutable_modifiedby();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .TideChartData chart = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartData::_InternalParse;
        object = msg->mutable_chart();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .TideChartCommand working = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartCommand::_InternalParse;
          object = msg->add_working();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // repeated .TideChartCommand remote = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartCommand::_InternalParse;
          object = msg->add_remote();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // repeated .TideChartData history = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartData::_InternalParse;
          object = msg->add_history();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // repeated .TideChartContext context = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TideChartContext::_InternalParse;
          object = msg->add_context();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFile.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFile.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFile.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string origin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->origin().data(), static_cast<int>(this->origin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFile.origin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modifiedDate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifieddate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFile.modifiedDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modifiedBy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifiedby()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFile.modifiedBy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartData chart = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartCommand working = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_working()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartCommand remote = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_remote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartData history = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TideChartContext context = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // string origin = 4;
  if (this->origin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.origin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->origin(), output);
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.modifiedDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->modifieddate(), output);
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.modifiedBy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->modifiedby(), output);
  }

  // .TideChartData chart = 7;
  if (this->has_chart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::chart(this), output);
  }

  // repeated .TideChartCommand working = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->working_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->working(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartCommand remote = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->remote_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->remote(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartData history = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->history(static_cast<int>(i)),
      output);
  }

  // repeated .TideChartContext context = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->context_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->context(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartFile)
}

::google::protobuf::uint8* TideChartFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // string origin = 4;
  if (this->origin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.origin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->origin(), target);
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.modifiedDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->modifieddate(), target);
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFile.modifiedBy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->modifiedby(), target);
  }

  // .TideChartData chart = 7;
  if (this->has_chart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::chart(this), target);
  }

  // repeated .TideChartCommand working = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->working_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->working(static_cast<int>(i)), target);
  }

  // repeated .TideChartCommand remote = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->remote_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->remote(static_cast<int>(i)), target);
  }

  // repeated .TideChartData history = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->history(static_cast<int>(i)), target);
  }

  // repeated .TideChartContext context = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->context_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->context(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartFile)
  return target;
}

size_t TideChartFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TideChartCommand working = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->working_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->working(static_cast<int>(i)));
    }
  }

  // repeated .TideChartCommand remote = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->remote_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->remote(static_cast<int>(i)));
    }
  }

  // repeated .TideChartData history = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->history(static_cast<int>(i)));
    }
  }

  // repeated .TideChartContext context = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->context_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->context(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string origin = 4;
  if (this->origin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->origin());
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifieddate());
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifiedby());
  }

  // .TideChartData chart = 7;
  if (this->has_chart()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chart_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartFile)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartFile* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartFile)
    MergeFrom(*source);
  }
}

void TideChartFile::MergeFrom(const TideChartFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  working_.MergeFrom(from.working_);
  remote_.MergeFrom(from.remote_);
  history_.MergeFrom(from.history_);
  context_.MergeFrom(from.context_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.origin().size() > 0) {

    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  if (from.modifieddate().size() > 0) {

    modifieddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
  }
  if (from.modifiedby().size() > 0) {

    modifiedby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifiedby_);
  }
  if (from.has_chart()) {
    mutable_chart()->::TideChartData::MergeFrom(from.chart());
  }
}

void TideChartFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartFile::CopyFrom(const TideChartFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartFile::IsInitialized() const {
  return true;
}

void TideChartFile::Swap(TideChartFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartFile::InternalSwap(TideChartFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&working_)->InternalSwap(CastToBase(&other->working_));
  CastToBase(&remote_)->InternalSwap(CastToBase(&other->remote_));
  CastToBase(&history_)->InternalSwap(CastToBase(&other->history_));
  CastToBase(&context_)->InternalSwap(CastToBase(&other->context_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  origin_.Swap(&other->origin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modifieddate_.Swap(&other->modifieddate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modifiedby_.Swap(&other->modifiedby_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chart_, other->chart_);
}

::google::protobuf::Metadata TideChartFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartFileHeader::InitAsDefaultInstance() {
}
class TideChartFileHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartFileHeader::kIdFieldNumber;
const int TideChartFileHeader::kNameFieldNumber;
const int TideChartFileHeader::kPathFieldNumber;
const int TideChartFileHeader::kOriginFieldNumber;
const int TideChartFileHeader::kModifiedDateFieldNumber;
const int TideChartFileHeader::kModifiedByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartFileHeader::TideChartFileHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartFileHeader)
}
TideChartFileHeader::TideChartFileHeader(const TideChartFileHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.origin().size() > 0) {
    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  modifieddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modifieddate().size() > 0) {
    modifieddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
  }
  modifiedby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modifiedby().size() > 0) {
    modifiedby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifiedby_);
  }
  // @@protoc_insertion_point(copy_constructor:TideChartFileHeader)
}

void TideChartFileHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartFileHeader_tide_5fchart_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TideChartFileHeader::~TideChartFileHeader() {
  // @@protoc_insertion_point(destructor:TideChartFileHeader)
  SharedDtor();
}

void TideChartFileHeader::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TideChartFileHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartFileHeader& TideChartFileHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartFileHeader_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartFileHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartFileHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartFileHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartFileHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileHeader.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileHeader.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileHeader.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string origin = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileHeader.origin");
        object = msg->mutable_origin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string modifiedDate = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileHeader.modifiedDate");
        object = msg->mutable_modifieddate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string modifiedBy = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileHeader.modifiedBy");
        object = msg->mutable_modifiedby();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartFileHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartFileHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileHeader.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileHeader.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileHeader.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string origin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->origin().data(), static_cast<int>(this->origin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileHeader.origin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modifiedDate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifieddate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileHeader.modifiedDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modifiedBy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifiedby()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileHeader.modifiedBy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartFileHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartFileHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartFileHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartFileHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // string origin = 4;
  if (this->origin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.origin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->origin(), output);
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.modifiedDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->modifieddate(), output);
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.modifiedBy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->modifiedby(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartFileHeader)
}

::google::protobuf::uint8* TideChartFileHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartFileHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // string origin = 4;
  if (this->origin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.origin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->origin(), target);
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.modifiedDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->modifieddate(), target);
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileHeader.modifiedBy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->modifiedby(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartFileHeader)
  return target;
}

size_t TideChartFileHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartFileHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string origin = 4;
  if (this->origin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->origin());
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifieddate());
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifiedby());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartFileHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartFileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartFileHeader* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartFileHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartFileHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartFileHeader)
    MergeFrom(*source);
  }
}

void TideChartFileHeader::MergeFrom(const TideChartFileHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartFileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.origin().size() > 0) {

    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  if (from.modifieddate().size() > 0) {

    modifieddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
  }
  if (from.modifiedby().size() > 0) {

    modifiedby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifiedby_);
  }
}

void TideChartFileHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartFileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartFileHeader::CopyFrom(const TideChartFileHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartFileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartFileHeader::IsInitialized() const {
  return true;
}

void TideChartFileHeader::Swap(TideChartFileHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartFileHeader::InternalSwap(TideChartFileHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  origin_.Swap(&other->origin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modifieddate_.Swap(&other->modifieddate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modifiedby_.Swap(&other->modifiedby_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TideChartFileHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TideChartFileCurrent::InitAsDefaultInstance() {
  ::_TideChartFileCurrent_default_instance_._instance.get_mutable()->chart_ = const_cast< ::TideChartData*>(
      ::TideChartData::internal_default_instance());
}
class TideChartFileCurrent::HasBitSetters {
 public:
  static const ::TideChartData& chart(const TideChartFileCurrent* msg);
};

const ::TideChartData&
TideChartFileCurrent::HasBitSetters::chart(const TideChartFileCurrent* msg) {
  return *msg->chart_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TideChartFileCurrent::kIdFieldNumber;
const int TideChartFileCurrent::kNameFieldNumber;
const int TideChartFileCurrent::kPathFieldNumber;
const int TideChartFileCurrent::kOriginFieldNumber;
const int TideChartFileCurrent::kModifiedDateFieldNumber;
const int TideChartFileCurrent::kModifiedByFieldNumber;
const int TideChartFileCurrent::kChartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TideChartFileCurrent::TideChartFileCurrent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TideChartFileCurrent)
}
TideChartFileCurrent::TideChartFileCurrent(const TideChartFileCurrent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.origin().size() > 0) {
    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  modifieddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modifieddate().size() > 0) {
    modifieddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
  }
  modifiedby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modifiedby().size() > 0) {
    modifiedby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifiedby_);
  }
  if (from.has_chart()) {
    chart_ = new ::TideChartData(*from.chart_);
  } else {
    chart_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TideChartFileCurrent)
}

void TideChartFileCurrent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TideChartFileCurrent_tide_5fchart_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chart_ = nullptr;
}

TideChartFileCurrent::~TideChartFileCurrent() {
  // @@protoc_insertion_point(destructor:TideChartFileCurrent)
  SharedDtor();
}

void TideChartFileCurrent::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chart_;
}

void TideChartFileCurrent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TideChartFileCurrent& TideChartFileCurrent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TideChartFileCurrent_tide_5fchart_2eproto.base);
  return *internal_default_instance();
}


void TideChartFileCurrent::Clear() {
// @@protoc_insertion_point(message_clear_start:TideChartFileCurrent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && chart_ != nullptr) {
    delete chart_;
  }
  chart_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TideChartFileCurrent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TideChartFileCurrent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileCurrent.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileCurrent.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileCurrent.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string origin = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileCurrent.origin");
        object = msg->mutable_origin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string modifiedDate = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileCurrent.modifiedDate");
        object = msg->mutable_modifieddate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string modifiedBy = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TideChartFileCurrent.modifiedBy");
        object = msg->mutable_modifiedby();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .TideChartData chart = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TideChartData::_InternalParse;
        object = msg->mutable_chart();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TideChartFileCurrent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TideChartFileCurrent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileCurrent.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileCurrent.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileCurrent.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string origin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->origin().data(), static_cast<int>(this->origin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileCurrent.origin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modifiedDate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifieddate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileCurrent.modifiedDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modifiedBy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifiedby()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TideChartFileCurrent.modifiedBy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TideChartData chart = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TideChartFileCurrent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TideChartFileCurrent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TideChartFileCurrent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TideChartFileCurrent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // string origin = 4;
  if (this->origin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.origin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->origin(), output);
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.modifiedDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->modifieddate(), output);
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.modifiedBy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->modifiedby(), output);
  }

  // .TideChartData chart = 7;
  if (this->has_chart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::chart(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TideChartFileCurrent)
}

::google::protobuf::uint8* TideChartFileCurrent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TideChartFileCurrent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // string origin = 4;
  if (this->origin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.origin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->origin(), target);
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.modifiedDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->modifieddate(), target);
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifiedby().data(), static_cast<int>(this->modifiedby().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TideChartFileCurrent.modifiedBy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->modifiedby(), target);
  }

  // .TideChartData chart = 7;
  if (this->has_chart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::chart(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TideChartFileCurrent)
  return target;
}

size_t TideChartFileCurrent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TideChartFileCurrent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string origin = 4;
  if (this->origin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->origin());
  }

  // string modifiedDate = 5;
  if (this->modifieddate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifieddate());
  }

  // string modifiedBy = 6;
  if (this->modifiedby().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifiedby());
  }

  // .TideChartData chart = 7;
  if (this->has_chart()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chart_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TideChartFileCurrent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TideChartFileCurrent)
  GOOGLE_DCHECK_NE(&from, this);
  const TideChartFileCurrent* source =
      ::google::protobuf::DynamicCastToGenerated<TideChartFileCurrent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TideChartFileCurrent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TideChartFileCurrent)
    MergeFrom(*source);
  }
}

void TideChartFileCurrent::MergeFrom(const TideChartFileCurrent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TideChartFileCurrent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.origin().size() > 0) {

    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  if (from.modifieddate().size() > 0) {

    modifieddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
  }
  if (from.modifiedby().size() > 0) {

    modifiedby_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifiedby_);
  }
  if (from.has_chart()) {
    mutable_chart()->::TideChartData::MergeFrom(from.chart());
  }
}

void TideChartFileCurrent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TideChartFileCurrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TideChartFileCurrent::CopyFrom(const TideChartFileCurrent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TideChartFileCurrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TideChartFileCurrent::IsInitialized() const {
  return true;
}

void TideChartFileCurrent::Swap(TideChartFileCurrent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TideChartFileCurrent::InternalSwap(TideChartFileCurrent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  origin_.Swap(&other->origin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modifieddate_.Swap(&other->modifieddate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modifiedby_.Swap(&other->modifiedby_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chart_, other->chart_);
}

::google::protobuf::Metadata TideChartFileCurrent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tide_5fchart_2eproto);
  return ::file_level_metadata_tide_5fchart_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::TideChartProperty* Arena::CreateMaybeMessage< ::TideChartProperty >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartCommentBox* Arena::CreateMaybeMessage< ::TideChartCommentBox >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartCommentBox >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartWidget* Arena::CreateMaybeMessage< ::TideChartWidget >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartWidget >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartPort* Arena::CreateMaybeMessage< ::TideChartPort >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartPort >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartLink* Arena::CreateMaybeMessage< ::TideChartLink >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartLink >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartNote* Arena::CreateMaybeMessage< ::TideChartNote >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartNote >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartNode* Arena::CreateMaybeMessage< ::TideChartNode >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartNode >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartRegion* Arena::CreateMaybeMessage< ::TideChartRegion >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartGraph* Arena::CreateMaybeMessage< ::TideChartGraph >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartCommand* Arena::CreateMaybeMessage< ::TideChartCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartGroupCommand* Arena::CreateMaybeMessage< ::TideChartGroupCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartGroupCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartMoveCommand* Arena::CreateMaybeMessage< ::TideChartMoveCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartMoveCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartCommentBoxCommand* Arena::CreateMaybeMessage< ::TideChartCommentBoxCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartCommentBoxCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartWidgetCommand* Arena::CreateMaybeMessage< ::TideChartWidgetCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartWidgetCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartPortCommand* Arena::CreateMaybeMessage< ::TideChartPortCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartPortCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartLinkCommand* Arena::CreateMaybeMessage< ::TideChartLinkCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartLinkCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartNodeCommand* Arena::CreateMaybeMessage< ::TideChartNodeCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartNodeCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartRegionCommand* Arena::CreateMaybeMessage< ::TideChartRegionCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartRegionCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartGraphCommand* Arena::CreateMaybeMessage< ::TideChartGraphCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartGraphCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartPropertyCommand* Arena::CreateMaybeMessage< ::TideChartPropertyCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartPropertyCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartNoteCommand* Arena::CreateMaybeMessage< ::TideChartNoteCommand >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartNoteCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartSource* Arena::CreateMaybeMessage< ::TideChartSource >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartSource >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartLibrary* Arena::CreateMaybeMessage< ::TideChartLibrary >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartLibrary >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartSite* Arena::CreateMaybeMessage< ::TideChartSite >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartSite >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartMessage* Arena::CreateMaybeMessage< ::TideChartMessage >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartContextChange* Arena::CreateMaybeMessage< ::TideChartContextChange >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartContextChange >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartLogEntry* Arena::CreateMaybeMessage< ::TideChartLogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartLogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartContext* Arena::CreateMaybeMessage< ::TideChartContext >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartContext >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartData* Arena::CreateMaybeMessage< ::TideChartData >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartData >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartHeader* Arena::CreateMaybeMessage< ::TideChartHeader >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartFile* Arena::CreateMaybeMessage< ::TideChartFile >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartFile >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartFileHeader* Arena::CreateMaybeMessage< ::TideChartFileHeader >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartFileHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::TideChartFileCurrent* Arena::CreateMaybeMessage< ::TideChartFileCurrent >(Arena* arena) {
  return Arena::CreateInternal< ::TideChartFileCurrent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
