// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tide_chart.proto

#ifndef PROTOBUF_INCLUDED_tide_5fchart_2eproto
#define PROTOBUF_INCLUDED_tide_5fchart_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tide_5fchart_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_tide_5fchart_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_tide_5fchart_2eproto();
class TideChartCommand;
class TideChartCommandDefaultTypeInternal;
extern TideChartCommandDefaultTypeInternal _TideChartCommand_default_instance_;
class TideChartCommentBox;
class TideChartCommentBoxDefaultTypeInternal;
extern TideChartCommentBoxDefaultTypeInternal _TideChartCommentBox_default_instance_;
class TideChartCommentBoxCommand;
class TideChartCommentBoxCommandDefaultTypeInternal;
extern TideChartCommentBoxCommandDefaultTypeInternal _TideChartCommentBoxCommand_default_instance_;
class TideChartContext;
class TideChartContextDefaultTypeInternal;
extern TideChartContextDefaultTypeInternal _TideChartContext_default_instance_;
class TideChartContextChange;
class TideChartContextChangeDefaultTypeInternal;
extern TideChartContextChangeDefaultTypeInternal _TideChartContextChange_default_instance_;
class TideChartData;
class TideChartDataDefaultTypeInternal;
extern TideChartDataDefaultTypeInternal _TideChartData_default_instance_;
class TideChartFile;
class TideChartFileDefaultTypeInternal;
extern TideChartFileDefaultTypeInternal _TideChartFile_default_instance_;
class TideChartFileCurrent;
class TideChartFileCurrentDefaultTypeInternal;
extern TideChartFileCurrentDefaultTypeInternal _TideChartFileCurrent_default_instance_;
class TideChartFileHeader;
class TideChartFileHeaderDefaultTypeInternal;
extern TideChartFileHeaderDefaultTypeInternal _TideChartFileHeader_default_instance_;
class TideChartGraph;
class TideChartGraphDefaultTypeInternal;
extern TideChartGraphDefaultTypeInternal _TideChartGraph_default_instance_;
class TideChartGraphCommand;
class TideChartGraphCommandDefaultTypeInternal;
extern TideChartGraphCommandDefaultTypeInternal _TideChartGraphCommand_default_instance_;
class TideChartGroupCommand;
class TideChartGroupCommandDefaultTypeInternal;
extern TideChartGroupCommandDefaultTypeInternal _TideChartGroupCommand_default_instance_;
class TideChartHeader;
class TideChartHeaderDefaultTypeInternal;
extern TideChartHeaderDefaultTypeInternal _TideChartHeader_default_instance_;
class TideChartLibrary;
class TideChartLibraryDefaultTypeInternal;
extern TideChartLibraryDefaultTypeInternal _TideChartLibrary_default_instance_;
class TideChartLink;
class TideChartLinkDefaultTypeInternal;
extern TideChartLinkDefaultTypeInternal _TideChartLink_default_instance_;
class TideChartLinkCommand;
class TideChartLinkCommandDefaultTypeInternal;
extern TideChartLinkCommandDefaultTypeInternal _TideChartLinkCommand_default_instance_;
class TideChartLogEntry;
class TideChartLogEntryDefaultTypeInternal;
extern TideChartLogEntryDefaultTypeInternal _TideChartLogEntry_default_instance_;
class TideChartMessage;
class TideChartMessageDefaultTypeInternal;
extern TideChartMessageDefaultTypeInternal _TideChartMessage_default_instance_;
class TideChartMoveCommand;
class TideChartMoveCommandDefaultTypeInternal;
extern TideChartMoveCommandDefaultTypeInternal _TideChartMoveCommand_default_instance_;
class TideChartNode;
class TideChartNodeDefaultTypeInternal;
extern TideChartNodeDefaultTypeInternal _TideChartNode_default_instance_;
class TideChartNodeCommand;
class TideChartNodeCommandDefaultTypeInternal;
extern TideChartNodeCommandDefaultTypeInternal _TideChartNodeCommand_default_instance_;
class TideChartNote;
class TideChartNoteDefaultTypeInternal;
extern TideChartNoteDefaultTypeInternal _TideChartNote_default_instance_;
class TideChartNoteCommand;
class TideChartNoteCommandDefaultTypeInternal;
extern TideChartNoteCommandDefaultTypeInternal _TideChartNoteCommand_default_instance_;
class TideChartPort;
class TideChartPortDefaultTypeInternal;
extern TideChartPortDefaultTypeInternal _TideChartPort_default_instance_;
class TideChartPortCommand;
class TideChartPortCommandDefaultTypeInternal;
extern TideChartPortCommandDefaultTypeInternal _TideChartPortCommand_default_instance_;
class TideChartProperty;
class TideChartPropertyDefaultTypeInternal;
extern TideChartPropertyDefaultTypeInternal _TideChartProperty_default_instance_;
class TideChartPropertyCommand;
class TideChartPropertyCommandDefaultTypeInternal;
extern TideChartPropertyCommandDefaultTypeInternal _TideChartPropertyCommand_default_instance_;
class TideChartRegion;
class TideChartRegionDefaultTypeInternal;
extern TideChartRegionDefaultTypeInternal _TideChartRegion_default_instance_;
class TideChartRegionCommand;
class TideChartRegionCommandDefaultTypeInternal;
extern TideChartRegionCommandDefaultTypeInternal _TideChartRegionCommand_default_instance_;
class TideChartSite;
class TideChartSiteDefaultTypeInternal;
extern TideChartSiteDefaultTypeInternal _TideChartSite_default_instance_;
class TideChartSource;
class TideChartSourceDefaultTypeInternal;
extern TideChartSourceDefaultTypeInternal _TideChartSource_default_instance_;
class TideChartWidget;
class TideChartWidgetDefaultTypeInternal;
extern TideChartWidgetDefaultTypeInternal _TideChartWidget_default_instance_;
class TideChartWidgetCommand;
class TideChartWidgetCommandDefaultTypeInternal;
extern TideChartWidgetCommandDefaultTypeInternal _TideChartWidgetCommand_default_instance_;
namespace google {
namespace protobuf {
template<> ::TideChartCommand* Arena::CreateMaybeMessage<::TideChartCommand>(Arena*);
template<> ::TideChartCommentBox* Arena::CreateMaybeMessage<::TideChartCommentBox>(Arena*);
template<> ::TideChartCommentBoxCommand* Arena::CreateMaybeMessage<::TideChartCommentBoxCommand>(Arena*);
template<> ::TideChartContext* Arena::CreateMaybeMessage<::TideChartContext>(Arena*);
template<> ::TideChartContextChange* Arena::CreateMaybeMessage<::TideChartContextChange>(Arena*);
template<> ::TideChartData* Arena::CreateMaybeMessage<::TideChartData>(Arena*);
template<> ::TideChartFile* Arena::CreateMaybeMessage<::TideChartFile>(Arena*);
template<> ::TideChartFileCurrent* Arena::CreateMaybeMessage<::TideChartFileCurrent>(Arena*);
template<> ::TideChartFileHeader* Arena::CreateMaybeMessage<::TideChartFileHeader>(Arena*);
template<> ::TideChartGraph* Arena::CreateMaybeMessage<::TideChartGraph>(Arena*);
template<> ::TideChartGraphCommand* Arena::CreateMaybeMessage<::TideChartGraphCommand>(Arena*);
template<> ::TideChartGroupCommand* Arena::CreateMaybeMessage<::TideChartGroupCommand>(Arena*);
template<> ::TideChartHeader* Arena::CreateMaybeMessage<::TideChartHeader>(Arena*);
template<> ::TideChartLibrary* Arena::CreateMaybeMessage<::TideChartLibrary>(Arena*);
template<> ::TideChartLink* Arena::CreateMaybeMessage<::TideChartLink>(Arena*);
template<> ::TideChartLinkCommand* Arena::CreateMaybeMessage<::TideChartLinkCommand>(Arena*);
template<> ::TideChartLogEntry* Arena::CreateMaybeMessage<::TideChartLogEntry>(Arena*);
template<> ::TideChartMessage* Arena::CreateMaybeMessage<::TideChartMessage>(Arena*);
template<> ::TideChartMoveCommand* Arena::CreateMaybeMessage<::TideChartMoveCommand>(Arena*);
template<> ::TideChartNode* Arena::CreateMaybeMessage<::TideChartNode>(Arena*);
template<> ::TideChartNodeCommand* Arena::CreateMaybeMessage<::TideChartNodeCommand>(Arena*);
template<> ::TideChartNote* Arena::CreateMaybeMessage<::TideChartNote>(Arena*);
template<> ::TideChartNoteCommand* Arena::CreateMaybeMessage<::TideChartNoteCommand>(Arena*);
template<> ::TideChartPort* Arena::CreateMaybeMessage<::TideChartPort>(Arena*);
template<> ::TideChartPortCommand* Arena::CreateMaybeMessage<::TideChartPortCommand>(Arena*);
template<> ::TideChartProperty* Arena::CreateMaybeMessage<::TideChartProperty>(Arena*);
template<> ::TideChartPropertyCommand* Arena::CreateMaybeMessage<::TideChartPropertyCommand>(Arena*);
template<> ::TideChartRegion* Arena::CreateMaybeMessage<::TideChartRegion>(Arena*);
template<> ::TideChartRegionCommand* Arena::CreateMaybeMessage<::TideChartRegionCommand>(Arena*);
template<> ::TideChartSite* Arena::CreateMaybeMessage<::TideChartSite>(Arena*);
template<> ::TideChartSource* Arena::CreateMaybeMessage<::TideChartSource>(Arena*);
template<> ::TideChartWidget* Arena::CreateMaybeMessage<::TideChartWidget>(Arena*);
template<> ::TideChartWidgetCommand* Arena::CreateMaybeMessage<::TideChartWidgetCommand>(Arena*);
}  // namespace protobuf
}  // namespace google

enum TideChartCommandUpdateType {
  add = 0,
  remove = 1,
  update = 2,
  TideChartCommandUpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  TideChartCommandUpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool TideChartCommandUpdateType_IsValid(int value);
const TideChartCommandUpdateType TideChartCommandUpdateType_MIN = add;
const TideChartCommandUpdateType TideChartCommandUpdateType_MAX = update;
const int TideChartCommandUpdateType_ARRAYSIZE = TideChartCommandUpdateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TideChartCommandUpdateType_descriptor();
inline const ::std::string& TideChartCommandUpdateType_Name(TideChartCommandUpdateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TideChartCommandUpdateType_descriptor(), value);
}
inline bool TideChartCommandUpdateType_Parse(
    const ::std::string& name, TideChartCommandUpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TideChartCommandUpdateType>(
    TideChartCommandUpdateType_descriptor(), name, value);
}
enum TideChartLogLevel {
  none = 0,
  fatal = 1,
  error = 2,
  exception = 3,
  warning = 4,
  info = 5,
  message = 6,
  debug = 7,
  check = 8,
  verbose = 9,
  trace = 10,
  all = 11,
  TideChartLogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  TideChartLogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool TideChartLogLevel_IsValid(int value);
const TideChartLogLevel TideChartLogLevel_MIN = none;
const TideChartLogLevel TideChartLogLevel_MAX = all;
const int TideChartLogLevel_ARRAYSIZE = TideChartLogLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* TideChartLogLevel_descriptor();
inline const ::std::string& TideChartLogLevel_Name(TideChartLogLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    TideChartLogLevel_descriptor(), value);
}
inline bool TideChartLogLevel_Parse(
    const ::std::string& name, TideChartLogLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TideChartLogLevel>(
    TideChartLogLevel_descriptor(), name, value);
}
// ===================================================================

class TideChartProperty final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartProperty) */ {
 public:
  TideChartProperty();
  virtual ~TideChartProperty();

  TideChartProperty(const TideChartProperty& from);

  inline TideChartProperty& operator=(const TideChartProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartProperty(TideChartProperty&& from) noexcept
    : TideChartProperty() {
    *this = ::std::move(from);
  }

  inline TideChartProperty& operator=(TideChartProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartProperty& default_instance();

  enum ValueCase {
    kBoolValue = 2,
    kStrValue = 3,
    kLongValue = 4,
    kDoubleValue = 5,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartProperty* internal_default_instance() {
    return reinterpret_cast<const TideChartProperty*>(
               &_TideChartProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TideChartProperty* other);
  friend void swap(TideChartProperty& a, TideChartProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartProperty* New() const final {
    return CreateMaybeMessage<TideChartProperty>(nullptr);
  }

  TideChartProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartProperty& from);
  void MergeFrom(const TideChartProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartProperty props = 6;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 6;
  ::TideChartProperty* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_props();
  const ::TideChartProperty& props(int index) const;
  ::TideChartProperty* add_props();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      props() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool boolValue = 2;
  private:
  bool has_boolvalue() const;
  public:
  void clear_boolvalue();
  static const int kBoolValueFieldNumber = 2;
  bool boolvalue() const;
  void set_boolvalue(bool value);

  // string strValue = 3;
  private:
  bool has_strvalue() const;
  public:
  void clear_strvalue();
  static const int kStrValueFieldNumber = 3;
  const ::std::string& strvalue() const;
  void set_strvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_strvalue(::std::string&& value);
  #endif
  void set_strvalue(const char* value);
  void set_strvalue(const char* value, size_t size);
  ::std::string* mutable_strvalue();
  ::std::string* release_strvalue();
  void set_allocated_strvalue(::std::string* strvalue);

  // sint64 longValue = 4;
  private:
  bool has_longvalue() const;
  public:
  void clear_longvalue();
  static const int kLongValueFieldNumber = 4;
  ::google::protobuf::int64 longvalue() const;
  void set_longvalue(::google::protobuf::int64 value);

  // double doubleValue = 5;
  private:
  bool has_doublevalue() const;
  public:
  void clear_doublevalue();
  static const int kDoubleValueFieldNumber = 5;
  double doublevalue() const;
  void set_doublevalue(double value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:TideChartProperty)
 private:
  class HasBitSetters;
  void set_has_boolvalue();
  void set_has_strvalue();
  void set_has_longvalue();
  void set_has_doublevalue();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > props_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    bool boolvalue_;
    ::google::protobuf::internal::ArenaStringPtr strvalue_;
    ::google::protobuf::int64 longvalue_;
    double doublevalue_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartCommentBox final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartCommentBox) */ {
 public:
  TideChartCommentBox();
  virtual ~TideChartCommentBox();

  TideChartCommentBox(const TideChartCommentBox& from);

  inline TideChartCommentBox& operator=(const TideChartCommentBox& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartCommentBox(TideChartCommentBox&& from) noexcept
    : TideChartCommentBox() {
    *this = ::std::move(from);
  }

  inline TideChartCommentBox& operator=(TideChartCommentBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartCommentBox& default_instance();

  enum ContentCase {
    kText = 7,
    kImage = 8,
    kIcon = 9,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartCommentBox* internal_default_instance() {
    return reinterpret_cast<const TideChartCommentBox*>(
               &_TideChartCommentBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TideChartCommentBox* other);
  friend void swap(TideChartCommentBox& a, TideChartCommentBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartCommentBox* New() const final {
    return CreateMaybeMessage<TideChartCommentBox>(nullptr);
  }

  TideChartCommentBox* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartCommentBox>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartCommentBox& from);
  void MergeFrom(const TideChartCommentBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartCommentBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint32 alignment = 12;
  int alignment_size() const;
  void clear_alignment();
  static const int kAlignmentFieldNumber = 12;
  ::google::protobuf::int32 alignment(int index) const;
  void set_alignment(int index, ::google::protobuf::int32 value);
  void add_alignment(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      alignment() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_alignment();

  // repeated int32 border = 15;
  int border_size() const;
  void clear_border();
  static const int kBorderFieldNumber = 15;
  ::google::protobuf::int32 border(int index) const;
  void set_border(int index, ::google::protobuf::int32 value);
  void add_border(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      border() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_border();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string region = 2;
  void clear_region();
  static const int kRegionFieldNumber = 2;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // string fontStyle = 11;
  void clear_fontstyle();
  static const int kFontStyleFieldNumber = 11;
  const ::std::string& fontstyle() const;
  void set_fontstyle(const ::std::string& value);
  #if LANG_CXX11
  void set_fontstyle(::std::string&& value);
  #endif
  void set_fontstyle(const char* value);
  void set_fontstyle(const char* value, size_t size);
  ::std::string* mutable_fontstyle();
  ::std::string* release_fontstyle();
  void set_allocated_fontstyle(::std::string* fontstyle);

  // sint32 posX = 3;
  void clear_posx();
  static const int kPosXFieldNumber = 3;
  ::google::protobuf::int32 posx() const;
  void set_posx(::google::protobuf::int32 value);

  // sint32 posY = 4;
  void clear_posy();
  static const int kPosYFieldNumber = 4;
  ::google::protobuf::int32 posy() const;
  void set_posy(::google::protobuf::int32 value);

  // int32 width = 5;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // double fontSize = 10;
  void clear_fontsize();
  static const int kFontSizeFieldNumber = 10;
  double fontsize() const;
  void set_fontsize(double value);

  // int32 color = 13;
  void clear_color();
  static const int kColorFieldNumber = 13;
  ::google::protobuf::int32 color() const;
  void set_color(::google::protobuf::int32 value);

  // int32 background = 14;
  void clear_background();
  static const int kBackgroundFieldNumber = 14;
  ::google::protobuf::int32 background() const;
  void set_background(::google::protobuf::int32 value);

  // bool isRaised = 16;
  void clear_israised();
  static const int kIsRaisedFieldNumber = 16;
  bool israised() const;
  void set_israised(bool value);

  // bool isReversed = 17;
  void clear_isreversed();
  static const int kIsReversedFieldNumber = 17;
  bool isreversed() const;
  void set_isreversed(bool value);

  // string text = 7;
  private:
  bool has_text() const;
  public:
  void clear_text();
  static const int kTextFieldNumber = 7;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // bytes image = 8;
  private:
  bool has_image() const;
  public:
  void clear_image();
  static const int kImageFieldNumber = 8;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // string icon = 9;
  private:
  bool has_icon() const;
  public:
  void clear_icon();
  static const int kIconFieldNumber = 9;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:TideChartCommentBox)
 private:
  class HasBitSetters;
  void set_has_text();
  void set_has_image();
  void set_has_icon();

  inline bool has_content() const;
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > alignment_;
  mutable std::atomic<int> _alignment_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > border_;
  mutable std::atomic<int> _border_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::internal::ArenaStringPtr fontstyle_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  double fontsize_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 background_;
  bool israised_;
  bool isreversed_;
  union ContentUnion {
    ContentUnion() {}
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr image_;
    ::google::protobuf::internal::ArenaStringPtr icon_;
  } content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartWidget final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartWidget) */ {
 public:
  TideChartWidget();
  virtual ~TideChartWidget();

  TideChartWidget(const TideChartWidget& from);

  inline TideChartWidget& operator=(const TideChartWidget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartWidget(TideChartWidget&& from) noexcept
    : TideChartWidget() {
    *this = ::std::move(from);
  }

  inline TideChartWidget& operator=(TideChartWidget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartWidget& default_instance();

  enum TargetCase {
    kLink = 9,
    kPort = 10,
    kNode = 11,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartWidget* internal_default_instance() {
    return reinterpret_cast<const TideChartWidget*>(
               &_TideChartWidget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TideChartWidget* other);
  friend void swap(TideChartWidget& a, TideChartWidget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartWidget* New() const final {
    return CreateMaybeMessage<TideChartWidget>(nullptr);
  }

  TideChartWidget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartWidget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartWidget& from);
  void MergeFrom(const TideChartWidget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartWidget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartProperty props = 12;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 12;
  ::TideChartProperty* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_props();
  const ::TideChartProperty& props(int index) const;
  ::TideChartProperty* add_props();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      props() const;

  // repeated .TideChartProperty settings = 22;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 22;
  ::TideChartProperty* mutable_settings(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_settings();
  const ::TideChartProperty& settings(int index) const;
  ::TideChartProperty* add_settings();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      settings() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string region = 4;
  void clear_region();
  static const int kRegionFieldNumber = 4;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // sint32 posX = 5;
  void clear_posx();
  static const int kPosXFieldNumber = 5;
  ::google::protobuf::int32 posx() const;
  void set_posx(::google::protobuf::int32 value);

  // sint32 posY = 6;
  void clear_posy();
  static const int kPosYFieldNumber = 6;
  ::google::protobuf::int32 posy() const;
  void set_posy(::google::protobuf::int32 value);

  // int32 width = 7;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 8;
  void clear_height();
  static const int kHeightFieldNumber = 8;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // string link = 9;
  private:
  bool has_link() const;
  public:
  void clear_link();
  static const int kLinkFieldNumber = 9;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  #if LANG_CXX11
  void set_link(::std::string&& value);
  #endif
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // string port = 10;
  private:
  bool has_port() const;
  public:
  void clear_port();
  static const int kPortFieldNumber = 10;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  #if LANG_CXX11
  void set_port(::std::string&& value);
  #endif
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // string node = 11;
  private:
  bool has_node() const;
  public:
  void clear_node();
  static const int kNodeFieldNumber = 11;
  const ::std::string& node() const;
  void set_node(const ::std::string& value);
  #if LANG_CXX11
  void set_node(::std::string&& value);
  #endif
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  ::std::string* mutable_node();
  ::std::string* release_node();
  void set_allocated_node(::std::string* node);

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:TideChartWidget)
 private:
  class HasBitSetters;
  void set_has_link();
  void set_has_port();
  void set_has_node();

  inline bool has_target() const;
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > props_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > settings_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  union TargetUnion {
    TargetUnion() {}
    ::google::protobuf::internal::ArenaStringPtr link_;
    ::google::protobuf::internal::ArenaStringPtr port_;
    ::google::protobuf::internal::ArenaStringPtr node_;
  } target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartPort final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartPort) */ {
 public:
  TideChartPort();
  virtual ~TideChartPort();

  TideChartPort(const TideChartPort& from);

  inline TideChartPort& operator=(const TideChartPort& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartPort(TideChartPort&& from) noexcept
    : TideChartPort() {
    *this = ::std::move(from);
  }

  inline TideChartPort& operator=(TideChartPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartPort* internal_default_instance() {
    return reinterpret_cast<const TideChartPort*>(
               &_TideChartPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TideChartPort* other);
  friend void swap(TideChartPort& a, TideChartPort& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartPort* New() const final {
    return CreateMaybeMessage<TideChartPort>(nullptr);
  }

  TideChartPort* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartPort>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartPort& from);
  void MergeFrom(const TideChartPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartPort* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string allowed = 7;
  int allowed_size() const;
  void clear_allowed();
  static const int kAllowedFieldNumber = 7;
  const ::std::string& allowed(int index) const;
  ::std::string* mutable_allowed(int index);
  void set_allowed(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allowed(int index, ::std::string&& value);
  #endif
  void set_allowed(int index, const char* value);
  void set_allowed(int index, const char* value, size_t size);
  ::std::string* add_allowed();
  void add_allowed(const ::std::string& value);
  #if LANG_CXX11
  void add_allowed(::std::string&& value);
  #endif
  void add_allowed(const char* value);
  void add_allowed(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& allowed() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_allowed();

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string node = 2;
  void clear_node();
  static const int kNodeFieldNumber = 2;
  const ::std::string& node() const;
  void set_node(const ::std::string& value);
  #if LANG_CXX11
  void set_node(::std::string&& value);
  #endif
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  ::std::string* mutable_node();
  ::std::string* release_node();
  void set_allocated_node(::std::string* node);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string hint = 8;
  void clear_hint();
  static const int kHintFieldNumber = 8;
  const ::std::string& hint() const;
  void set_hint(const ::std::string& value);
  #if LANG_CXX11
  void set_hint(::std::string&& value);
  #endif
  void set_hint(const char* value);
  void set_hint(const char* value, size_t size);
  ::std::string* mutable_hint();
  ::std::string* release_hint();
  void set_allocated_hint(::std::string* hint);

  // string value = 9;
  void clear_value();
  static const int kValueFieldNumber = 9;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string trigger = 10;
  void clear_trigger();
  static const int kTriggerFieldNumber = 10;
  const ::std::string& trigger() const;
  void set_trigger(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger(::std::string&& value);
  #endif
  void set_trigger(const char* value);
  void set_trigger(const char* value, size_t size);
  ::std::string* mutable_trigger();
  ::std::string* release_trigger();
  void set_allocated_trigger(::std::string* trigger);

  // string link = 11;
  void clear_link();
  static const int kLinkFieldNumber = 11;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  #if LANG_CXX11
  void set_link(::std::string&& value);
  #endif
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // string event = 12;
  void clear_event();
  static const int kEventFieldNumber = 12;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);

  // string syncGroup = 13;
  void clear_syncgroup();
  static const int kSyncGroupFieldNumber = 13;
  const ::std::string& syncgroup() const;
  void set_syncgroup(const ::std::string& value);
  #if LANG_CXX11
  void set_syncgroup(::std::string&& value);
  #endif
  void set_syncgroup(const char* value);
  void set_syncgroup(const char* value, size_t size);
  ::std::string* mutable_syncgroup();
  ::std::string* release_syncgroup();
  void set_allocated_syncgroup(::std::string* syncgroup);

  // int32 ordinal = 4;
  void clear_ordinal();
  static const int kOrdinalFieldNumber = 4;
  ::google::protobuf::int32 ordinal() const;
  void set_ordinal(::google::protobuf::int32 value);

  // bool isDefault = 5;
  void clear_isdefault();
  static const int kIsDefaultFieldNumber = 5;
  bool isdefault() const;
  void set_isdefault(bool value);

  // bool isRequired = 6;
  void clear_isrequired();
  static const int kIsRequiredFieldNumber = 6;
  bool isrequired() const;
  void set_isrequired(bool value);

  // bool isBlocking = 14;
  void clear_isblocking();
  static const int kIsBlockingFieldNumber = 14;
  bool isblocking() const;
  void set_isblocking(bool value);

  // bool isQueuing = 15;
  void clear_isqueuing();
  static const int kIsQueuingFieldNumber = 15;
  bool isqueuing() const;
  void set_isqueuing(bool value);

  // @@protoc_insertion_point(class_scope:TideChartPort)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> allowed_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr node_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr hint_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr trigger_;
  ::google::protobuf::internal::ArenaStringPtr link_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  ::google::protobuf::internal::ArenaStringPtr syncgroup_;
  ::google::protobuf::int32 ordinal_;
  bool isdefault_;
  bool isrequired_;
  bool isblocking_;
  bool isqueuing_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartLink final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartLink) */ {
 public:
  TideChartLink();
  virtual ~TideChartLink();

  TideChartLink(const TideChartLink& from);

  inline TideChartLink& operator=(const TideChartLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartLink(TideChartLink&& from) noexcept
    : TideChartLink() {
    *this = ::std::move(from);
  }

  inline TideChartLink& operator=(TideChartLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartLink* internal_default_instance() {
    return reinterpret_cast<const TideChartLink*>(
               &_TideChartLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TideChartLink* other);
  friend void swap(TideChartLink& a, TideChartLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartLink* New() const final {
    return CreateMaybeMessage<TideChartLink>(nullptr);
  }

  TideChartLink* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartLink>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartLink& from);
  void MergeFrom(const TideChartLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string outNode = 1;
  void clear_outnode();
  static const int kOutNodeFieldNumber = 1;
  const ::std::string& outnode() const;
  void set_outnode(const ::std::string& value);
  #if LANG_CXX11
  void set_outnode(::std::string&& value);
  #endif
  void set_outnode(const char* value);
  void set_outnode(const char* value, size_t size);
  ::std::string* mutable_outnode();
  ::std::string* release_outnode();
  void set_allocated_outnode(::std::string* outnode);

  // string outPort = 2;
  void clear_outport();
  static const int kOutPortFieldNumber = 2;
  const ::std::string& outport() const;
  void set_outport(const ::std::string& value);
  #if LANG_CXX11
  void set_outport(::std::string&& value);
  #endif
  void set_outport(const char* value);
  void set_outport(const char* value, size_t size);
  ::std::string* mutable_outport();
  ::std::string* release_outport();
  void set_allocated_outport(::std::string* outport);

  // string inNode = 3;
  void clear_innode();
  static const int kInNodeFieldNumber = 3;
  const ::std::string& innode() const;
  void set_innode(const ::std::string& value);
  #if LANG_CXX11
  void set_innode(::std::string&& value);
  #endif
  void set_innode(const char* value);
  void set_innode(const char* value, size_t size);
  ::std::string* mutable_innode();
  ::std::string* release_innode();
  void set_allocated_innode(::std::string* innode);

  // string inPort = 4;
  void clear_inport();
  static const int kInPortFieldNumber = 4;
  const ::std::string& inport() const;
  void set_inport(const ::std::string& value);
  #if LANG_CXX11
  void set_inport(::std::string&& value);
  #endif
  void set_inport(const char* value);
  void set_inport(const char* value, size_t size);
  ::std::string* mutable_inport();
  ::std::string* release_inport();
  void set_allocated_inport(::std::string* inport);

  // string link = 7;
  void clear_link();
  static const int kLinkFieldNumber = 7;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  #if LANG_CXX11
  void set_link(::std::string&& value);
  #endif
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // int32 group = 5;
  void clear_group();
  static const int kGroupFieldNumber = 5;
  ::google::protobuf::int32 group() const;
  void set_group(::google::protobuf::int32 value);

  // int32 delay = 6;
  void clear_delay();
  static const int kDelayFieldNumber = 6;
  ::google::protobuf::int32 delay() const;
  void set_delay(::google::protobuf::int32 value);

  // bool isLogging = 16;
  void clear_islogging();
  static const int kIsLoggingFieldNumber = 16;
  bool islogging() const;
  void set_islogging(bool value);

  // bool isDebugging = 17;
  void clear_isdebugging();
  static const int kIsDebuggingFieldNumber = 17;
  bool isdebugging() const;
  void set_isdebugging(bool value);

  // bool isPaused = 18;
  void clear_ispaused();
  static const int kIsPausedFieldNumber = 18;
  bool ispaused() const;
  void set_ispaused(bool value);

  // bool isDisabled = 19;
  void clear_isdisabled();
  static const int kIsDisabledFieldNumber = 19;
  bool isdisabled() const;
  void set_isdisabled(bool value);

  // @@protoc_insertion_point(class_scope:TideChartLink)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr outnode_;
  ::google::protobuf::internal::ArenaStringPtr outport_;
  ::google::protobuf::internal::ArenaStringPtr innode_;
  ::google::protobuf::internal::ArenaStringPtr inport_;
  ::google::protobuf::internal::ArenaStringPtr link_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 delay_;
  bool islogging_;
  bool isdebugging_;
  bool ispaused_;
  bool isdisabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartNote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartNote) */ {
 public:
  TideChartNote();
  virtual ~TideChartNote();

  TideChartNote(const TideChartNote& from);

  inline TideChartNote& operator=(const TideChartNote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartNote(TideChartNote&& from) noexcept
    : TideChartNote() {
    *this = ::std::move(from);
  }

  inline TideChartNote& operator=(TideChartNote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartNote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartNote* internal_default_instance() {
    return reinterpret_cast<const TideChartNote*>(
               &_TideChartNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TideChartNote* other);
  friend void swap(TideChartNote& a, TideChartNote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartNote* New() const final {
    return CreateMaybeMessage<TideChartNote>(nullptr);
  }

  TideChartNote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartNote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartNote& from);
  void MergeFrom(const TideChartNote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartNote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string replyTo = 2;
  void clear_replyto();
  static const int kReplyToFieldNumber = 2;
  const ::std::string& replyto() const;
  void set_replyto(const ::std::string& value);
  #if LANG_CXX11
  void set_replyto(::std::string&& value);
  #endif
  void set_replyto(const char* value);
  void set_replyto(const char* value, size_t size);
  ::std::string* mutable_replyto();
  ::std::string* release_replyto();
  void set_allocated_replyto(::std::string* replyto);

  // string changeTo = 3;
  void clear_changeto();
  static const int kChangeToFieldNumber = 3;
  const ::std::string& changeto() const;
  void set_changeto(const ::std::string& value);
  #if LANG_CXX11
  void set_changeto(::std::string&& value);
  #endif
  void set_changeto(const char* value);
  void set_changeto(const char* value, size_t size);
  ::std::string* mutable_changeto();
  ::std::string* release_changeto();
  void set_allocated_changeto(::std::string* changeto);

  // string content = 4;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string createdBy = 5;
  void clear_createdby();
  static const int kCreatedByFieldNumber = 5;
  const ::std::string& createdby() const;
  void set_createdby(const ::std::string& value);
  #if LANG_CXX11
  void set_createdby(::std::string&& value);
  #endif
  void set_createdby(const char* value);
  void set_createdby(const char* value, size_t size);
  ::std::string* mutable_createdby();
  ::std::string* release_createdby();
  void set_allocated_createdby(::std::string* createdby);

  // string createdDate = 6;
  void clear_createddate();
  static const int kCreatedDateFieldNumber = 6;
  const ::std::string& createddate() const;
  void set_createddate(const ::std::string& value);
  #if LANG_CXX11
  void set_createddate(::std::string&& value);
  #endif
  void set_createddate(const char* value);
  void set_createddate(const char* value, size_t size);
  ::std::string* mutable_createddate();
  ::std::string* release_createddate();
  void set_allocated_createddate(::std::string* createddate);

  // @@protoc_insertion_point(class_scope:TideChartNote)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr replyto_;
  ::google::protobuf::internal::ArenaStringPtr changeto_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr createdby_;
  ::google::protobuf::internal::ArenaStringPtr createddate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartNode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartNode) */ {
 public:
  TideChartNode();
  virtual ~TideChartNode();

  TideChartNode(const TideChartNode& from);

  inline TideChartNode& operator=(const TideChartNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartNode(TideChartNode&& from) noexcept
    : TideChartNode() {
    *this = ::std::move(from);
  }

  inline TideChartNode& operator=(TideChartNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartNode* internal_default_instance() {
    return reinterpret_cast<const TideChartNode*>(
               &_TideChartNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TideChartNode* other);
  friend void swap(TideChartNode& a, TideChartNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartNode* New() const final {
    return CreateMaybeMessage<TideChartNode>(nullptr);
  }

  TideChartNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartNode& from);
  void MergeFrom(const TideChartNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartPort inports = 10;
  int inports_size() const;
  void clear_inports();
  static const int kInportsFieldNumber = 10;
  ::TideChartPort* mutable_inports(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartPort >*
      mutable_inports();
  const ::TideChartPort& inports(int index) const;
  ::TideChartPort* add_inports();
  const ::google::protobuf::RepeatedPtrField< ::TideChartPort >&
      inports() const;

  // repeated .TideChartPort outports = 11;
  int outports_size() const;
  void clear_outports();
  static const int kOutportsFieldNumber = 11;
  ::TideChartPort* mutable_outports(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartPort >*
      mutable_outports();
  const ::TideChartPort& outports(int index) const;
  ::TideChartPort* add_outports();
  const ::google::protobuf::RepeatedPtrField< ::TideChartPort >&
      outports() const;

  // repeated .TideChartProperty props = 12;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 12;
  ::TideChartProperty* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_props();
  const ::TideChartProperty& props(int index) const;
  ::TideChartProperty* add_props();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      props() const;

  // repeated .TideChartNote notes = 20;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 20;
  ::TideChartNote* mutable_notes(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartNote >*
      mutable_notes();
  const ::TideChartNote& notes(int index) const;
  ::TideChartNote* add_notes();
  const ::google::protobuf::RepeatedPtrField< ::TideChartNote >&
      notes() const;

  // repeated .TideChartProperty settings = 22;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 22;
  ::TideChartProperty* mutable_settings(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_settings();
  const ::TideChartProperty& settings(int index) const;
  ::TideChartProperty* add_settings();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      settings() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string title = 5;
  void clear_title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string icon = 6;
  void clear_icon();
  static const int kIconFieldNumber = 6;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // string library = 7;
  void clear_library();
  static const int kLibraryFieldNumber = 7;
  const ::std::string& library() const;
  void set_library(const ::std::string& value);
  #if LANG_CXX11
  void set_library(::std::string&& value);
  #endif
  void set_library(const char* value);
  void set_library(const char* value, size_t size);
  ::std::string* mutable_library();
  ::std::string* release_library();
  void set_allocated_library(::std::string* library);

  // string method = 8;
  void clear_method();
  static const int kMethodFieldNumber = 8;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // string script = 21;
  void clear_script();
  static const int kScriptFieldNumber = 21;
  const ::std::string& script() const;
  void set_script(const ::std::string& value);
  #if LANG_CXX11
  void set_script(::std::string&& value);
  #endif
  void set_script(const char* value);
  void set_script(const char* value, size_t size);
  ::std::string* mutable_script();
  ::std::string* release_script();
  void set_allocated_script(::std::string* script);

  // sint32 posX = 3;
  void clear_posx();
  static const int kPosXFieldNumber = 3;
  ::google::protobuf::int32 posx() const;
  void set_posx(::google::protobuf::int32 value);

  // sint32 posY = 4;
  void clear_posy();
  static const int kPosYFieldNumber = 4;
  ::google::protobuf::int32 posy() const;
  void set_posy(::google::protobuf::int32 value);

  // int32 delay = 9;
  void clear_delay();
  static const int kDelayFieldNumber = 9;
  ::google::protobuf::int32 delay() const;
  void set_delay(::google::protobuf::int32 value);

  // bool isLogging = 16;
  void clear_islogging();
  static const int kIsLoggingFieldNumber = 16;
  bool islogging() const;
  void set_islogging(bool value);

  // bool isDebugging = 17;
  void clear_isdebugging();
  static const int kIsDebuggingFieldNumber = 17;
  bool isdebugging() const;
  void set_isdebugging(bool value);

  // bool isPaused = 18;
  void clear_ispaused();
  static const int kIsPausedFieldNumber = 18;
  bool ispaused() const;
  void set_ispaused(bool value);

  // bool isDisabled = 19;
  void clear_isdisabled();
  static const int kIsDisabledFieldNumber = 19;
  bool isdisabled() const;
  void set_isdisabled(bool value);

  // @@protoc_insertion_point(class_scope:TideChartNode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartPort > inports_;
  ::google::protobuf::RepeatedPtrField< ::TideChartPort > outports_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > props_;
  ::google::protobuf::RepeatedPtrField< ::TideChartNote > notes_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > settings_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr library_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr script_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 delay_;
  bool islogging_;
  bool isdebugging_;
  bool ispaused_;
  bool isdisabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartRegion final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartRegion) */ {
 public:
  TideChartRegion();
  virtual ~TideChartRegion();

  TideChartRegion(const TideChartRegion& from);

  inline TideChartRegion& operator=(const TideChartRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartRegion(TideChartRegion&& from) noexcept
    : TideChartRegion() {
    *this = ::std::move(from);
  }

  inline TideChartRegion& operator=(TideChartRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartRegion* internal_default_instance() {
    return reinterpret_cast<const TideChartRegion*>(
               &_TideChartRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TideChartRegion* other);
  friend void swap(TideChartRegion& a, TideChartRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartRegion* New() const final {
    return CreateMaybeMessage<TideChartRegion>(nullptr);
  }

  TideChartRegion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartRegion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartRegion& from);
  void MergeFrom(const TideChartRegion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string nodes = 3;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 3;
  const ::std::string& nodes(int index) const;
  ::std::string* mutable_nodes(int index);
  void set_nodes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_nodes(int index, ::std::string&& value);
  #endif
  void set_nodes(int index, const char* value);
  void set_nodes(int index, const char* value, size_t size);
  ::std::string* add_nodes();
  void add_nodes(const ::std::string& value);
  #if LANG_CXX11
  void add_nodes(::std::string&& value);
  #endif
  void add_nodes(const char* value);
  void add_nodes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& nodes() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_nodes();

  // repeated .TideChartProperty props = 6;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 6;
  ::TideChartProperty* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_props();
  const ::TideChartProperty& props(int index) const;
  ::TideChartProperty* add_props();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      props() const;

  // repeated .TideChartNote notes = 20;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 20;
  ::TideChartNote* mutable_notes(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartNote >*
      mutable_notes();
  const ::TideChartNote& notes(int index) const;
  ::TideChartNote* add_notes();
  const ::google::protobuf::RepeatedPtrField< ::TideChartNote >&
      notes() const;

  // repeated .TideChartProperty settings = 22;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 22;
  ::TideChartProperty* mutable_settings(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_settings();
  const ::TideChartProperty& settings(int index) const;
  ::TideChartProperty* add_settings();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      settings() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string scope = 5;
  void clear_scope();
  static const int kScopeFieldNumber = 5;
  const ::std::string& scope() const;
  void set_scope(const ::std::string& value);
  #if LANG_CXX11
  void set_scope(::std::string&& value);
  #endif
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  ::std::string* mutable_scope();
  ::std::string* release_scope();
  void set_allocated_scope(::std::string* scope);

  // string script = 21;
  void clear_script();
  static const int kScriptFieldNumber = 21;
  const ::std::string& script() const;
  void set_script(const ::std::string& value);
  #if LANG_CXX11
  void set_script(::std::string&& value);
  #endif
  void set_script(const char* value);
  void set_script(const char* value, size_t size);
  ::std::string* mutable_script();
  ::std::string* release_script();
  void set_allocated_script(::std::string* script);

  // int32 group = 4;
  void clear_group();
  static const int kGroupFieldNumber = 4;
  ::google::protobuf::int32 group() const;
  void set_group(::google::protobuf::int32 value);

  // bool isLogging = 16;
  void clear_islogging();
  static const int kIsLoggingFieldNumber = 16;
  bool islogging() const;
  void set_islogging(bool value);

  // bool isDebugging = 17;
  void clear_isdebugging();
  static const int kIsDebuggingFieldNumber = 17;
  bool isdebugging() const;
  void set_isdebugging(bool value);

  // bool isPaused = 18;
  void clear_ispaused();
  static const int kIsPausedFieldNumber = 18;
  bool ispaused() const;
  void set_ispaused(bool value);

  // bool isDisabled = 19;
  void clear_isdisabled();
  static const int kIsDisabledFieldNumber = 19;
  bool isdisabled() const;
  void set_isdisabled(bool value);

  // @@protoc_insertion_point(class_scope:TideChartRegion)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> nodes_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > props_;
  ::google::protobuf::RepeatedPtrField< ::TideChartNote > notes_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > settings_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr scope_;
  ::google::protobuf::internal::ArenaStringPtr script_;
  ::google::protobuf::int32 group_;
  bool islogging_;
  bool isdebugging_;
  bool ispaused_;
  bool isdisabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartGraph final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartGraph) */ {
 public:
  TideChartGraph();
  virtual ~TideChartGraph();

  TideChartGraph(const TideChartGraph& from);

  inline TideChartGraph& operator=(const TideChartGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartGraph(TideChartGraph&& from) noexcept
    : TideChartGraph() {
    *this = ::std::move(from);
  }

  inline TideChartGraph& operator=(TideChartGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartGraph* internal_default_instance() {
    return reinterpret_cast<const TideChartGraph*>(
               &_TideChartGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TideChartGraph* other);
  friend void swap(TideChartGraph& a, TideChartGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartGraph* New() const final {
    return CreateMaybeMessage<TideChartGraph>(nullptr);
  }

  TideChartGraph* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartGraph>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartGraph& from);
  void MergeFrom(const TideChartGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartNode nodes = 8;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 8;
  ::TideChartNode* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartNode >*
      mutable_nodes();
  const ::TideChartNode& nodes(int index) const;
  ::TideChartNode* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::TideChartNode >&
      nodes() const;

  // repeated .TideChartLink links = 9;
  int links_size() const;
  void clear_links();
  static const int kLinksFieldNumber = 9;
  ::TideChartLink* mutable_links(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartLink >*
      mutable_links();
  const ::TideChartLink& links(int index) const;
  ::TideChartLink* add_links();
  const ::google::protobuf::RepeatedPtrField< ::TideChartLink >&
      links() const;

  // repeated .TideChartRegion regions = 10;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 10;
  ::TideChartRegion* mutable_regions(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartRegion >*
      mutable_regions();
  const ::TideChartRegion& regions(int index) const;
  ::TideChartRegion* add_regions();
  const ::google::protobuf::RepeatedPtrField< ::TideChartRegion >&
      regions() const;

  // repeated .TideChartCommentBox comments = 11;
  int comments_size() const;
  void clear_comments();
  static const int kCommentsFieldNumber = 11;
  ::TideChartCommentBox* mutable_comments(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartCommentBox >*
      mutable_comments();
  const ::TideChartCommentBox& comments(int index) const;
  ::TideChartCommentBox* add_comments();
  const ::google::protobuf::RepeatedPtrField< ::TideChartCommentBox >&
      comments() const;

  // repeated .TideChartWidget widgets = 12;
  int widgets_size() const;
  void clear_widgets();
  static const int kWidgetsFieldNumber = 12;
  ::TideChartWidget* mutable_widgets(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartWidget >*
      mutable_widgets();
  const ::TideChartWidget& widgets(int index) const;
  ::TideChartWidget* add_widgets();
  const ::google::protobuf::RepeatedPtrField< ::TideChartWidget >&
      widgets() const;

  // repeated .TideChartProperty props = 13;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 13;
  ::TideChartProperty* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_props();
  const ::TideChartProperty& props(int index) const;
  ::TideChartProperty* add_props();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      props() const;

  // repeated .TideChartCommand history = 14;
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 14;
  ::TideChartCommand* mutable_history(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartCommand >*
      mutable_history();
  const ::TideChartCommand& history(int index) const;
  ::TideChartCommand* add_history();
  const ::google::protobuf::RepeatedPtrField< ::TideChartCommand >&
      history() const;

  // repeated .TideChartNote notes = 20;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 20;
  ::TideChartNote* mutable_notes(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartNote >*
      mutable_notes();
  const ::TideChartNote& notes(int index) const;
  ::TideChartNote* add_notes();
  const ::google::protobuf::RepeatedPtrField< ::TideChartNote >&
      notes() const;

  // repeated .TideChartProperty settings = 22;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 22;
  ::TideChartProperty* mutable_settings(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_settings();
  const ::TideChartProperty& settings(int index) const;
  ::TideChartProperty* add_settings();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      settings() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 4;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string icon = 5;
  void clear_icon();
  static const int kIconFieldNumber = 5;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // string version = 6;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string source = 7;
  void clear_source();
  static const int kSourceFieldNumber = 7;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // string script = 21;
  void clear_script();
  static const int kScriptFieldNumber = 21;
  const ::std::string& script() const;
  void set_script(const ::std::string& value);
  #if LANG_CXX11
  void set_script(::std::string&& value);
  #endif
  void set_script(const char* value);
  void set_script(const char* value, size_t size);
  ::std::string* mutable_script();
  ::std::string* release_script();
  void set_allocated_script(::std::string* script);

  // bool isLogging = 16;
  void clear_islogging();
  static const int kIsLoggingFieldNumber = 16;
  bool islogging() const;
  void set_islogging(bool value);

  // bool isDebugging = 17;
  void clear_isdebugging();
  static const int kIsDebuggingFieldNumber = 17;
  bool isdebugging() const;
  void set_isdebugging(bool value);

  // bool isPaused = 18;
  void clear_ispaused();
  static const int kIsPausedFieldNumber = 18;
  bool ispaused() const;
  void set_ispaused(bool value);

  // bool isDisabled = 19;
  void clear_isdisabled();
  static const int kIsDisabledFieldNumber = 19;
  bool isdisabled() const;
  void set_isdisabled(bool value);

  // @@protoc_insertion_point(class_scope:TideChartGraph)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartNode > nodes_;
  ::google::protobuf::RepeatedPtrField< ::TideChartLink > links_;
  ::google::protobuf::RepeatedPtrField< ::TideChartRegion > regions_;
  ::google::protobuf::RepeatedPtrField< ::TideChartCommentBox > comments_;
  ::google::protobuf::RepeatedPtrField< ::TideChartWidget > widgets_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > props_;
  ::google::protobuf::RepeatedPtrField< ::TideChartCommand > history_;
  ::google::protobuf::RepeatedPtrField< ::TideChartNote > notes_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > settings_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr script_;
  bool islogging_;
  bool isdebugging_;
  bool ispaused_;
  bool isdisabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartCommand) */ {
 public:
  TideChartCommand();
  virtual ~TideChartCommand();

  TideChartCommand(const TideChartCommand& from);

  inline TideChartCommand& operator=(const TideChartCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartCommand(TideChartCommand&& from) noexcept
    : TideChartCommand() {
    *this = ::std::move(from);
  }

  inline TideChartCommand& operator=(TideChartCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartCommand& default_instance();

  enum CommandCase {
    kGroup = 3,
    kMove = 4,
    kComment = 5,
    kWidget = 6,
    kPort = 7,
    kLink = 8,
    kNode = 9,
    kRegion = 10,
    kGraph = 11,
    kProps = 12,
    kNote = 13,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartCommand*>(
               &_TideChartCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TideChartCommand* other);
  friend void swap(TideChartCommand& a, TideChartCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartCommand* New() const final {
    return CreateMaybeMessage<TideChartCommand>(nullptr);
  }

  TideChartCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartCommand& from);
  void MergeFrom(const TideChartCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string target = 2;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  #if LANG_CXX11
  void set_target(::std::string&& value);
  #endif
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);

  // .TideChartGroupCommand group = 3;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 3;
  const ::TideChartGroupCommand& group() const;
  ::TideChartGroupCommand* release_group();
  ::TideChartGroupCommand* mutable_group();
  void set_allocated_group(::TideChartGroupCommand* group);

  // .TideChartMoveCommand move = 4;
  bool has_move() const;
  void clear_move();
  static const int kMoveFieldNumber = 4;
  const ::TideChartMoveCommand& move() const;
  ::TideChartMoveCommand* release_move();
  ::TideChartMoveCommand* mutable_move();
  void set_allocated_move(::TideChartMoveCommand* move);

  // .TideChartCommentBoxCommand comment = 5;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 5;
  const ::TideChartCommentBoxCommand& comment() const;
  ::TideChartCommentBoxCommand* release_comment();
  ::TideChartCommentBoxCommand* mutable_comment();
  void set_allocated_comment(::TideChartCommentBoxCommand* comment);

  // .TideChartWidgetCommand widget = 6;
  bool has_widget() const;
  void clear_widget();
  static const int kWidgetFieldNumber = 6;
  const ::TideChartWidgetCommand& widget() const;
  ::TideChartWidgetCommand* release_widget();
  ::TideChartWidgetCommand* mutable_widget();
  void set_allocated_widget(::TideChartWidgetCommand* widget);

  // .TideChartPortCommand port = 7;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 7;
  const ::TideChartPortCommand& port() const;
  ::TideChartPortCommand* release_port();
  ::TideChartPortCommand* mutable_port();
  void set_allocated_port(::TideChartPortCommand* port);

  // .TideChartLinkCommand link = 8;
  bool has_link() const;
  void clear_link();
  static const int kLinkFieldNumber = 8;
  const ::TideChartLinkCommand& link() const;
  ::TideChartLinkCommand* release_link();
  ::TideChartLinkCommand* mutable_link();
  void set_allocated_link(::TideChartLinkCommand* link);

  // .TideChartNodeCommand node = 9;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 9;
  const ::TideChartNodeCommand& node() const;
  ::TideChartNodeCommand* release_node();
  ::TideChartNodeCommand* mutable_node();
  void set_allocated_node(::TideChartNodeCommand* node);

  // .TideChartRegionCommand region = 10;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 10;
  const ::TideChartRegionCommand& region() const;
  ::TideChartRegionCommand* release_region();
  ::TideChartRegionCommand* mutable_region();
  void set_allocated_region(::TideChartRegionCommand* region);

  // .TideChartGraphCommand graph = 11;
  bool has_graph() const;
  void clear_graph();
  static const int kGraphFieldNumber = 11;
  const ::TideChartGraphCommand& graph() const;
  ::TideChartGraphCommand* release_graph();
  ::TideChartGraphCommand* mutable_graph();
  void set_allocated_graph(::TideChartGraphCommand* graph);

  // .TideChartPropertyCommand props = 12;
  bool has_props() const;
  void clear_props();
  static const int kPropsFieldNumber = 12;
  const ::TideChartPropertyCommand& props() const;
  ::TideChartPropertyCommand* release_props();
  ::TideChartPropertyCommand* mutable_props();
  void set_allocated_props(::TideChartPropertyCommand* props);

  // .TideChartNoteCommand note = 13;
  bool has_note() const;
  void clear_note();
  static const int kNoteFieldNumber = 13;
  const ::TideChartNoteCommand& note() const;
  ::TideChartNoteCommand* release_note();
  ::TideChartNoteCommand* mutable_note();
  void set_allocated_note(::TideChartNoteCommand* note);

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:TideChartCommand)
 private:
  class HasBitSetters;
  void set_has_group();
  void set_has_move();
  void set_has_comment();
  void set_has_widget();
  void set_has_port();
  void set_has_link();
  void set_has_node();
  void set_has_region();
  void set_has_graph();
  void set_has_props();
  void set_has_note();

  inline bool has_command() const;
  inline void clear_has_command();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  union CommandUnion {
    CommandUnion() {}
    ::TideChartGroupCommand* group_;
    ::TideChartMoveCommand* move_;
    ::TideChartCommentBoxCommand* comment_;
    ::TideChartWidgetCommand* widget_;
    ::TideChartPortCommand* port_;
    ::TideChartLinkCommand* link_;
    ::TideChartNodeCommand* node_;
    ::TideChartRegionCommand* region_;
    ::TideChartGraphCommand* graph_;
    ::TideChartPropertyCommand* props_;
    ::TideChartNoteCommand* note_;
  } command_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartGroupCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartGroupCommand) */ {
 public:
  TideChartGroupCommand();
  virtual ~TideChartGroupCommand();

  TideChartGroupCommand(const TideChartGroupCommand& from);

  inline TideChartGroupCommand& operator=(const TideChartGroupCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartGroupCommand(TideChartGroupCommand&& from) noexcept
    : TideChartGroupCommand() {
    *this = ::std::move(from);
  }

  inline TideChartGroupCommand& operator=(TideChartGroupCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartGroupCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartGroupCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartGroupCommand*>(
               &_TideChartGroupCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TideChartGroupCommand* other);
  friend void swap(TideChartGroupCommand& a, TideChartGroupCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartGroupCommand* New() const final {
    return CreateMaybeMessage<TideChartGroupCommand>(nullptr);
  }

  TideChartGroupCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartGroupCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartGroupCommand& from);
  void MergeFrom(const TideChartGroupCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartGroupCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartCommand commands = 1;
  int commands_size() const;
  void clear_commands();
  static const int kCommandsFieldNumber = 1;
  ::TideChartCommand* mutable_commands(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartCommand >*
      mutable_commands();
  const ::TideChartCommand& commands(int index) const;
  ::TideChartCommand* add_commands();
  const ::google::protobuf::RepeatedPtrField< ::TideChartCommand >&
      commands() const;

  // @@protoc_insertion_point(class_scope:TideChartGroupCommand)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartCommand > commands_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartMoveCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartMoveCommand) */ {
 public:
  TideChartMoveCommand();
  virtual ~TideChartMoveCommand();

  TideChartMoveCommand(const TideChartMoveCommand& from);

  inline TideChartMoveCommand& operator=(const TideChartMoveCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartMoveCommand(TideChartMoveCommand&& from) noexcept
    : TideChartMoveCommand() {
    *this = ::std::move(from);
  }

  inline TideChartMoveCommand& operator=(TideChartMoveCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartMoveCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartMoveCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartMoveCommand*>(
               &_TideChartMoveCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(TideChartMoveCommand* other);
  friend void swap(TideChartMoveCommand& a, TideChartMoveCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartMoveCommand* New() const final {
    return CreateMaybeMessage<TideChartMoveCommand>(nullptr);
  }

  TideChartMoveCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartMoveCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartMoveCommand& from);
  void MergeFrom(const TideChartMoveCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartMoveCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node = 1;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::std::string& node() const;
  void set_node(const ::std::string& value);
  #if LANG_CXX11
  void set_node(::std::string&& value);
  #endif
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  ::std::string* mutable_node();
  ::std::string* release_node();
  void set_allocated_node(::std::string* node);

  // sint32 fromPosX = 2;
  void clear_fromposx();
  static const int kFromPosXFieldNumber = 2;
  ::google::protobuf::int32 fromposx() const;
  void set_fromposx(::google::protobuf::int32 value);

  // sint32 fromPosY = 3;
  void clear_fromposy();
  static const int kFromPosYFieldNumber = 3;
  ::google::protobuf::int32 fromposy() const;
  void set_fromposy(::google::protobuf::int32 value);

  // sint32 toPosX = 4;
  void clear_toposx();
  static const int kToPosXFieldNumber = 4;
  ::google::protobuf::int32 toposx() const;
  void set_toposx(::google::protobuf::int32 value);

  // sint32 toPosY = 5;
  void clear_toposy();
  static const int kToPosYFieldNumber = 5;
  ::google::protobuf::int32 toposy() const;
  void set_toposy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TideChartMoveCommand)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_;
  ::google::protobuf::int32 fromposx_;
  ::google::protobuf::int32 fromposy_;
  ::google::protobuf::int32 toposx_;
  ::google::protobuf::int32 toposy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartCommentBoxCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartCommentBoxCommand) */ {
 public:
  TideChartCommentBoxCommand();
  virtual ~TideChartCommentBoxCommand();

  TideChartCommentBoxCommand(const TideChartCommentBoxCommand& from);

  inline TideChartCommentBoxCommand& operator=(const TideChartCommentBoxCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartCommentBoxCommand(TideChartCommentBoxCommand&& from) noexcept
    : TideChartCommentBoxCommand() {
    *this = ::std::move(from);
  }

  inline TideChartCommentBoxCommand& operator=(TideChartCommentBoxCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartCommentBoxCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartCommentBoxCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartCommentBoxCommand*>(
               &_TideChartCommentBoxCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TideChartCommentBoxCommand* other);
  friend void swap(TideChartCommentBoxCommand& a, TideChartCommentBoxCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartCommentBoxCommand* New() const final {
    return CreateMaybeMessage<TideChartCommentBoxCommand>(nullptr);
  }

  TideChartCommentBoxCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartCommentBoxCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartCommentBoxCommand& from);
  void MergeFrom(const TideChartCommentBoxCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartCommentBoxCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TideChartCommentBox fromComment = 1;
  bool has_fromcomment() const;
  void clear_fromcomment();
  static const int kFromCommentFieldNumber = 1;
  const ::TideChartCommentBox& fromcomment() const;
  ::TideChartCommentBox* release_fromcomment();
  ::TideChartCommentBox* mutable_fromcomment();
  void set_allocated_fromcomment(::TideChartCommentBox* fromcomment);

  // .TideChartCommentBox toComment = 2;
  bool has_tocomment() const;
  void clear_tocomment();
  static const int kToCommentFieldNumber = 2;
  const ::TideChartCommentBox& tocomment() const;
  ::TideChartCommentBox* release_tocomment();
  ::TideChartCommentBox* mutable_tocomment();
  void set_allocated_tocomment(::TideChartCommentBox* tocomment);

  // .TideChartCommandUpdateType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::TideChartCommandUpdateType type() const;
  void set_type(::TideChartCommandUpdateType value);

  // @@protoc_insertion_point(class_scope:TideChartCommentBoxCommand)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TideChartCommentBox* fromcomment_;
  ::TideChartCommentBox* tocomment_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartWidgetCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartWidgetCommand) */ {
 public:
  TideChartWidgetCommand();
  virtual ~TideChartWidgetCommand();

  TideChartWidgetCommand(const TideChartWidgetCommand& from);

  inline TideChartWidgetCommand& operator=(const TideChartWidgetCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartWidgetCommand(TideChartWidgetCommand&& from) noexcept
    : TideChartWidgetCommand() {
    *this = ::std::move(from);
  }

  inline TideChartWidgetCommand& operator=(TideChartWidgetCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartWidgetCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartWidgetCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartWidgetCommand*>(
               &_TideChartWidgetCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(TideChartWidgetCommand* other);
  friend void swap(TideChartWidgetCommand& a, TideChartWidgetCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartWidgetCommand* New() const final {
    return CreateMaybeMessage<TideChartWidgetCommand>(nullptr);
  }

  TideChartWidgetCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartWidgetCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartWidgetCommand& from);
  void MergeFrom(const TideChartWidgetCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartWidgetCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TideChartWidget fromWidget = 1;
  bool has_fromwidget() const;
  void clear_fromwidget();
  static const int kFromWidgetFieldNumber = 1;
  const ::TideChartWidget& fromwidget() const;
  ::TideChartWidget* release_fromwidget();
  ::TideChartWidget* mutable_fromwidget();
  void set_allocated_fromwidget(::TideChartWidget* fromwidget);

  // .TideChartWidget toWidget = 2;
  bool has_towidget() const;
  void clear_towidget();
  static const int kToWidgetFieldNumber = 2;
  const ::TideChartWidget& towidget() const;
  ::TideChartWidget* release_towidget();
  ::TideChartWidget* mutable_towidget();
  void set_allocated_towidget(::TideChartWidget* towidget);

  // .TideChartCommandUpdateType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::TideChartCommandUpdateType type() const;
  void set_type(::TideChartCommandUpdateType value);

  // @@protoc_insertion_point(class_scope:TideChartWidgetCommand)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TideChartWidget* fromwidget_;
  ::TideChartWidget* towidget_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartPortCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartPortCommand) */ {
 public:
  TideChartPortCommand();
  virtual ~TideChartPortCommand();

  TideChartPortCommand(const TideChartPortCommand& from);

  inline TideChartPortCommand& operator=(const TideChartPortCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartPortCommand(TideChartPortCommand&& from) noexcept
    : TideChartPortCommand() {
    *this = ::std::move(from);
  }

  inline TideChartPortCommand& operator=(TideChartPortCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartPortCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartPortCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartPortCommand*>(
               &_TideChartPortCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(TideChartPortCommand* other);
  friend void swap(TideChartPortCommand& a, TideChartPortCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartPortCommand* New() const final {
    return CreateMaybeMessage<TideChartPortCommand>(nullptr);
  }

  TideChartPortCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartPortCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartPortCommand& from);
  void MergeFrom(const TideChartPortCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartPortCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TideChartPort fromPort = 1;
  bool has_fromport() const;
  void clear_fromport();
  static const int kFromPortFieldNumber = 1;
  const ::TideChartPort& fromport() const;
  ::TideChartPort* release_fromport();
  ::TideChartPort* mutable_fromport();
  void set_allocated_fromport(::TideChartPort* fromport);

  // .TideChartPort toPort = 2;
  bool has_toport() const;
  void clear_toport();
  static const int kToPortFieldNumber = 2;
  const ::TideChartPort& toport() const;
  ::TideChartPort* release_toport();
  ::TideChartPort* mutable_toport();
  void set_allocated_toport(::TideChartPort* toport);

  // .TideChartCommandUpdateType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::TideChartCommandUpdateType type() const;
  void set_type(::TideChartCommandUpdateType value);

  // @@protoc_insertion_point(class_scope:TideChartPortCommand)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TideChartPort* fromport_;
  ::TideChartPort* toport_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartLinkCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartLinkCommand) */ {
 public:
  TideChartLinkCommand();
  virtual ~TideChartLinkCommand();

  TideChartLinkCommand(const TideChartLinkCommand& from);

  inline TideChartLinkCommand& operator=(const TideChartLinkCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartLinkCommand(TideChartLinkCommand&& from) noexcept
    : TideChartLinkCommand() {
    *this = ::std::move(from);
  }

  inline TideChartLinkCommand& operator=(TideChartLinkCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartLinkCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartLinkCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartLinkCommand*>(
               &_TideChartLinkCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(TideChartLinkCommand* other);
  friend void swap(TideChartLinkCommand& a, TideChartLinkCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartLinkCommand* New() const final {
    return CreateMaybeMessage<TideChartLinkCommand>(nullptr);
  }

  TideChartLinkCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartLinkCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartLinkCommand& from);
  void MergeFrom(const TideChartLinkCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartLinkCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TideChartLink fromLink = 1;
  bool has_fromlink() const;
  void clear_fromlink();
  static const int kFromLinkFieldNumber = 1;
  const ::TideChartLink& fromlink() const;
  ::TideChartLink* release_fromlink();
  ::TideChartLink* mutable_fromlink();
  void set_allocated_fromlink(::TideChartLink* fromlink);

  // .TideChartLink toLink = 2;
  bool has_tolink() const;
  void clear_tolink();
  static const int kToLinkFieldNumber = 2;
  const ::TideChartLink& tolink() const;
  ::TideChartLink* release_tolink();
  ::TideChartLink* mutable_tolink();
  void set_allocated_tolink(::TideChartLink* tolink);

  // .TideChartCommandUpdateType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::TideChartCommandUpdateType type() const;
  void set_type(::TideChartCommandUpdateType value);

  // @@protoc_insertion_point(class_scope:TideChartLinkCommand)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TideChartLink* fromlink_;
  ::TideChartLink* tolink_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartNodeCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartNodeCommand) */ {
 public:
  TideChartNodeCommand();
  virtual ~TideChartNodeCommand();

  TideChartNodeCommand(const TideChartNodeCommand& from);

  inline TideChartNodeCommand& operator=(const TideChartNodeCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartNodeCommand(TideChartNodeCommand&& from) noexcept
    : TideChartNodeCommand() {
    *this = ::std::move(from);
  }

  inline TideChartNodeCommand& operator=(TideChartNodeCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartNodeCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartNodeCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartNodeCommand*>(
               &_TideChartNodeCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(TideChartNodeCommand* other);
  friend void swap(TideChartNodeCommand& a, TideChartNodeCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartNodeCommand* New() const final {
    return CreateMaybeMessage<TideChartNodeCommand>(nullptr);
  }

  TideChartNodeCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartNodeCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartNodeCommand& from);
  void MergeFrom(const TideChartNodeCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartNodeCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TideChartNode fromNode = 1;
  bool has_fromnode() const;
  void clear_fromnode();
  static const int kFromNodeFieldNumber = 1;
  const ::TideChartNode& fromnode() const;
  ::TideChartNode* release_fromnode();
  ::TideChartNode* mutable_fromnode();
  void set_allocated_fromnode(::TideChartNode* fromnode);

  // .TideChartNode toNode = 2;
  bool has_tonode() const;
  void clear_tonode();
  static const int kToNodeFieldNumber = 2;
  const ::TideChartNode& tonode() const;
  ::TideChartNode* release_tonode();
  ::TideChartNode* mutable_tonode();
  void set_allocated_tonode(::TideChartNode* tonode);

  // .TideChartCommandUpdateType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::TideChartCommandUpdateType type() const;
  void set_type(::TideChartCommandUpdateType value);

  // @@protoc_insertion_point(class_scope:TideChartNodeCommand)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TideChartNode* fromnode_;
  ::TideChartNode* tonode_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartRegionCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartRegionCommand) */ {
 public:
  TideChartRegionCommand();
  virtual ~TideChartRegionCommand();

  TideChartRegionCommand(const TideChartRegionCommand& from);

  inline TideChartRegionCommand& operator=(const TideChartRegionCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartRegionCommand(TideChartRegionCommand&& from) noexcept
    : TideChartRegionCommand() {
    *this = ::std::move(from);
  }

  inline TideChartRegionCommand& operator=(TideChartRegionCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartRegionCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartRegionCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartRegionCommand*>(
               &_TideChartRegionCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(TideChartRegionCommand* other);
  friend void swap(TideChartRegionCommand& a, TideChartRegionCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartRegionCommand* New() const final {
    return CreateMaybeMessage<TideChartRegionCommand>(nullptr);
  }

  TideChartRegionCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartRegionCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartRegionCommand& from);
  void MergeFrom(const TideChartRegionCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartRegionCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TideChartRegion fromRegion = 1;
  bool has_fromregion() const;
  void clear_fromregion();
  static const int kFromRegionFieldNumber = 1;
  const ::TideChartRegion& fromregion() const;
  ::TideChartRegion* release_fromregion();
  ::TideChartRegion* mutable_fromregion();
  void set_allocated_fromregion(::TideChartRegion* fromregion);

  // .TideChartRegion toRegion = 2;
  bool has_toregion() const;
  void clear_toregion();
  static const int kToRegionFieldNumber = 2;
  const ::TideChartRegion& toregion() const;
  ::TideChartRegion* release_toregion();
  ::TideChartRegion* mutable_toregion();
  void set_allocated_toregion(::TideChartRegion* toregion);

  // .TideChartCommandUpdateType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::TideChartCommandUpdateType type() const;
  void set_type(::TideChartCommandUpdateType value);

  // @@protoc_insertion_point(class_scope:TideChartRegionCommand)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TideChartRegion* fromregion_;
  ::TideChartRegion* toregion_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartGraphCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartGraphCommand) */ {
 public:
  TideChartGraphCommand();
  virtual ~TideChartGraphCommand();

  TideChartGraphCommand(const TideChartGraphCommand& from);

  inline TideChartGraphCommand& operator=(const TideChartGraphCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartGraphCommand(TideChartGraphCommand&& from) noexcept
    : TideChartGraphCommand() {
    *this = ::std::move(from);
  }

  inline TideChartGraphCommand& operator=(TideChartGraphCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartGraphCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartGraphCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartGraphCommand*>(
               &_TideChartGraphCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(TideChartGraphCommand* other);
  friend void swap(TideChartGraphCommand& a, TideChartGraphCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartGraphCommand* New() const final {
    return CreateMaybeMessage<TideChartGraphCommand>(nullptr);
  }

  TideChartGraphCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartGraphCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartGraphCommand& from);
  void MergeFrom(const TideChartGraphCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartGraphCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TideChartGraph fromGraph = 1;
  bool has_fromgraph() const;
  void clear_fromgraph();
  static const int kFromGraphFieldNumber = 1;
  const ::TideChartGraph& fromgraph() const;
  ::TideChartGraph* release_fromgraph();
  ::TideChartGraph* mutable_fromgraph();
  void set_allocated_fromgraph(::TideChartGraph* fromgraph);

  // .TideChartGraph toGraph = 2;
  bool has_tograph() const;
  void clear_tograph();
  static const int kToGraphFieldNumber = 2;
  const ::TideChartGraph& tograph() const;
  ::TideChartGraph* release_tograph();
  ::TideChartGraph* mutable_tograph();
  void set_allocated_tograph(::TideChartGraph* tograph);

  // .TideChartCommandUpdateType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::TideChartCommandUpdateType type() const;
  void set_type(::TideChartCommandUpdateType value);

  // @@protoc_insertion_point(class_scope:TideChartGraphCommand)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TideChartGraph* fromgraph_;
  ::TideChartGraph* tograph_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartPropertyCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartPropertyCommand) */ {
 public:
  TideChartPropertyCommand();
  virtual ~TideChartPropertyCommand();

  TideChartPropertyCommand(const TideChartPropertyCommand& from);

  inline TideChartPropertyCommand& operator=(const TideChartPropertyCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartPropertyCommand(TideChartPropertyCommand&& from) noexcept
    : TideChartPropertyCommand() {
    *this = ::std::move(from);
  }

  inline TideChartPropertyCommand& operator=(TideChartPropertyCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartPropertyCommand& default_instance();

  enum TargetCase {
    kNode = 5,
    kRegion = 6,
    kWidget = 7,
    kGraph = 8,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartPropertyCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartPropertyCommand*>(
               &_TideChartPropertyCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(TideChartPropertyCommand* other);
  friend void swap(TideChartPropertyCommand& a, TideChartPropertyCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartPropertyCommand* New() const final {
    return CreateMaybeMessage<TideChartPropertyCommand>(nullptr);
  }

  TideChartPropertyCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartPropertyCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartPropertyCommand& from);
  void MergeFrom(const TideChartPropertyCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartPropertyCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartProperty fromProps = 1;
  int fromprops_size() const;
  void clear_fromprops();
  static const int kFromPropsFieldNumber = 1;
  ::TideChartProperty* mutable_fromprops(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_fromprops();
  const ::TideChartProperty& fromprops(int index) const;
  ::TideChartProperty* add_fromprops();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      fromprops() const;

  // repeated .TideChartProperty toProps = 2;
  int toprops_size() const;
  void clear_toprops();
  static const int kToPropsFieldNumber = 2;
  ::TideChartProperty* mutable_toprops(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_toprops();
  const ::TideChartProperty& toprops(int index) const;
  ::TideChartProperty* add_toprops();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      toprops() const;

  // .TideChartCommandUpdateType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::TideChartCommandUpdateType type() const;
  void set_type(::TideChartCommandUpdateType value);

  // string node = 5;
  private:
  bool has_node() const;
  public:
  void clear_node();
  static const int kNodeFieldNumber = 5;
  const ::std::string& node() const;
  void set_node(const ::std::string& value);
  #if LANG_CXX11
  void set_node(::std::string&& value);
  #endif
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  ::std::string* mutable_node();
  ::std::string* release_node();
  void set_allocated_node(::std::string* node);

  // string region = 6;
  private:
  bool has_region() const;
  public:
  void clear_region();
  static const int kRegionFieldNumber = 6;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // string widget = 7;
  private:
  bool has_widget() const;
  public:
  void clear_widget();
  static const int kWidgetFieldNumber = 7;
  const ::std::string& widget() const;
  void set_widget(const ::std::string& value);
  #if LANG_CXX11
  void set_widget(::std::string&& value);
  #endif
  void set_widget(const char* value);
  void set_widget(const char* value, size_t size);
  ::std::string* mutable_widget();
  ::std::string* release_widget();
  void set_allocated_widget(::std::string* widget);

  // string graph = 8;
  private:
  bool has_graph() const;
  public:
  void clear_graph();
  static const int kGraphFieldNumber = 8;
  const ::std::string& graph() const;
  void set_graph(const ::std::string& value);
  #if LANG_CXX11
  void set_graph(::std::string&& value);
  #endif
  void set_graph(const char* value);
  void set_graph(const char* value, size_t size);
  ::std::string* mutable_graph();
  ::std::string* release_graph();
  void set_allocated_graph(::std::string* graph);

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:TideChartPropertyCommand)
 private:
  class HasBitSetters;
  void set_has_node();
  void set_has_region();
  void set_has_widget();
  void set_has_graph();

  inline bool has_target() const;
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > fromprops_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > toprops_;
  int type_;
  union TargetUnion {
    TargetUnion() {}
    ::google::protobuf::internal::ArenaStringPtr node_;
    ::google::protobuf::internal::ArenaStringPtr region_;
    ::google::protobuf::internal::ArenaStringPtr widget_;
    ::google::protobuf::internal::ArenaStringPtr graph_;
  } target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartNoteCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartNoteCommand) */ {
 public:
  TideChartNoteCommand();
  virtual ~TideChartNoteCommand();

  TideChartNoteCommand(const TideChartNoteCommand& from);

  inline TideChartNoteCommand& operator=(const TideChartNoteCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartNoteCommand(TideChartNoteCommand&& from) noexcept
    : TideChartNoteCommand() {
    *this = ::std::move(from);
  }

  inline TideChartNoteCommand& operator=(TideChartNoteCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartNoteCommand& default_instance();

  enum TargetCase {
    kNode = 3,
    kRegion = 4,
    kGraph = 5,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartNoteCommand* internal_default_instance() {
    return reinterpret_cast<const TideChartNoteCommand*>(
               &_TideChartNoteCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(TideChartNoteCommand* other);
  friend void swap(TideChartNoteCommand& a, TideChartNoteCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartNoteCommand* New() const final {
    return CreateMaybeMessage<TideChartNoteCommand>(nullptr);
  }

  TideChartNoteCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartNoteCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartNoteCommand& from);
  void MergeFrom(const TideChartNoteCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartNoteCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartNote notes = 1;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 1;
  ::TideChartNote* mutable_notes(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartNote >*
      mutable_notes();
  const ::TideChartNote& notes(int index) const;
  ::TideChartNote* add_notes();
  const ::google::protobuf::RepeatedPtrField< ::TideChartNote >&
      notes() const;

  // .TideChartCommandUpdateType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::TideChartCommandUpdateType type() const;
  void set_type(::TideChartCommandUpdateType value);

  // string node = 3;
  private:
  bool has_node() const;
  public:
  void clear_node();
  static const int kNodeFieldNumber = 3;
  const ::std::string& node() const;
  void set_node(const ::std::string& value);
  #if LANG_CXX11
  void set_node(::std::string&& value);
  #endif
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  ::std::string* mutable_node();
  ::std::string* release_node();
  void set_allocated_node(::std::string* node);

  // string region = 4;
  private:
  bool has_region() const;
  public:
  void clear_region();
  static const int kRegionFieldNumber = 4;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // string graph = 5;
  private:
  bool has_graph() const;
  public:
  void clear_graph();
  static const int kGraphFieldNumber = 5;
  const ::std::string& graph() const;
  void set_graph(const ::std::string& value);
  #if LANG_CXX11
  void set_graph(::std::string&& value);
  #endif
  void set_graph(const char* value);
  void set_graph(const char* value, size_t size);
  ::std::string* mutable_graph();
  ::std::string* release_graph();
  void set_allocated_graph(::std::string* graph);

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:TideChartNoteCommand)
 private:
  class HasBitSetters;
  void set_has_node();
  void set_has_region();
  void set_has_graph();

  inline bool has_target() const;
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartNote > notes_;
  int type_;
  union TargetUnion {
    TargetUnion() {}
    ::google::protobuf::internal::ArenaStringPtr node_;
    ::google::protobuf::internal::ArenaStringPtr region_;
    ::google::protobuf::internal::ArenaStringPtr graph_;
  } target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartSource final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartSource) */ {
 public:
  TideChartSource();
  virtual ~TideChartSource();

  TideChartSource(const TideChartSource& from);

  inline TideChartSource& operator=(const TideChartSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartSource(TideChartSource&& from) noexcept
    : TideChartSource() {
    *this = ::std::move(from);
  }

  inline TideChartSource& operator=(TideChartSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartSource& default_instance();

  enum ContentCase {
    kVersion = 7,
    kScript = 8,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartSource* internal_default_instance() {
    return reinterpret_cast<const TideChartSource*>(
               &_TideChartSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(TideChartSource* other);
  friend void swap(TideChartSource& a, TideChartSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartSource* New() const final {
    return CreateMaybeMessage<TideChartSource>(nullptr);
  }

  TideChartSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartSource& from);
  void MergeFrom(const TideChartSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string modifiedDate = 5;
  void clear_modifieddate();
  static const int kModifiedDateFieldNumber = 5;
  const ::std::string& modifieddate() const;
  void set_modifieddate(const ::std::string& value);
  #if LANG_CXX11
  void set_modifieddate(::std::string&& value);
  #endif
  void set_modifieddate(const char* value);
  void set_modifieddate(const char* value, size_t size);
  ::std::string* mutable_modifieddate();
  ::std::string* release_modifieddate();
  void set_allocated_modifieddate(::std::string* modifieddate);

  // string modifiedBy = 6;
  void clear_modifiedby();
  static const int kModifiedByFieldNumber = 6;
  const ::std::string& modifiedby() const;
  void set_modifiedby(const ::std::string& value);
  #if LANG_CXX11
  void set_modifiedby(::std::string&& value);
  #endif
  void set_modifiedby(const char* value);
  void set_modifiedby(const char* value, size_t size);
  ::std::string* mutable_modifiedby();
  ::std::string* release_modifiedby();
  void set_allocated_modifiedby(::std::string* modifiedby);

  // string version = 7;
  private:
  bool has_version() const;
  public:
  void clear_version();
  static const int kVersionFieldNumber = 7;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string script = 8;
  private:
  bool has_script() const;
  public:
  void clear_script();
  static const int kScriptFieldNumber = 8;
  const ::std::string& script() const;
  void set_script(const ::std::string& value);
  #if LANG_CXX11
  void set_script(::std::string&& value);
  #endif
  void set_script(const char* value);
  void set_script(const char* value, size_t size);
  ::std::string* mutable_script();
  ::std::string* release_script();
  void set_allocated_script(::std::string* script);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:TideChartSource)
 private:
  class HasBitSetters;
  void set_has_version();
  void set_has_script();

  inline bool has_content() const;
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr modifieddate_;
  ::google::protobuf::internal::ArenaStringPtr modifiedby_;
  union ContentUnion {
    ContentUnion() {}
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr script_;
  } content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartLibrary final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartLibrary) */ {
 public:
  TideChartLibrary();
  virtual ~TideChartLibrary();

  TideChartLibrary(const TideChartLibrary& from);

  inline TideChartLibrary& operator=(const TideChartLibrary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartLibrary(TideChartLibrary&& from) noexcept
    : TideChartLibrary() {
    *this = ::std::move(from);
  }

  inline TideChartLibrary& operator=(TideChartLibrary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartLibrary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartLibrary* internal_default_instance() {
    return reinterpret_cast<const TideChartLibrary*>(
               &_TideChartLibrary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(TideChartLibrary* other);
  friend void swap(TideChartLibrary& a, TideChartLibrary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartLibrary* New() const final {
    return CreateMaybeMessage<TideChartLibrary>(nullptr);
  }

  TideChartLibrary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartLibrary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartLibrary& from);
  void MergeFrom(const TideChartLibrary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartLibrary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartSource files = 14;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 14;
  ::TideChartSource* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartSource >*
      mutable_files();
  const ::TideChartSource& files(int index) const;
  ::TideChartSource* add_files();
  const ::google::protobuf::RepeatedPtrField< ::TideChartSource >&
      files() const;

  // repeated .TideChartProperty settings = 16;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 16;
  ::TideChartProperty* mutable_settings(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_settings();
  const ::TideChartProperty& settings(int index) const;
  ::TideChartProperty* add_settings();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      settings() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string origin = 10;
  void clear_origin();
  static const int kOriginFieldNumber = 10;
  const ::std::string& origin() const;
  void set_origin(const ::std::string& value);
  #if LANG_CXX11
  void set_origin(::std::string&& value);
  #endif
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  ::std::string* mutable_origin();
  ::std::string* release_origin();
  void set_allocated_origin(::std::string* origin);

  // string branch = 11;
  void clear_branch();
  static const int kBranchFieldNumber = 11;
  const ::std::string& branch() const;
  void set_branch(const ::std::string& value);
  #if LANG_CXX11
  void set_branch(::std::string&& value);
  #endif
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  ::std::string* mutable_branch();
  ::std::string* release_branch();
  void set_allocated_branch(::std::string* branch);

  // string path = 12;
  void clear_path();
  static const int kPathFieldNumber = 12;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .TideChartData methods = 15;
  bool has_methods() const;
  void clear_methods();
  static const int kMethodsFieldNumber = 15;
  const ::TideChartData& methods() const;
  ::TideChartData* release_methods();
  ::TideChartData* mutable_methods();
  void set_allocated_methods(::TideChartData* methods);

  // @@protoc_insertion_point(class_scope:TideChartLibrary)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartSource > files_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > settings_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr origin_;
  ::google::protobuf::internal::ArenaStringPtr branch_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::TideChartData* methods_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartSite final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartSite) */ {
 public:
  TideChartSite();
  virtual ~TideChartSite();

  TideChartSite(const TideChartSite& from);

  inline TideChartSite& operator=(const TideChartSite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartSite(TideChartSite&& from) noexcept
    : TideChartSite() {
    *this = ::std::move(from);
  }

  inline TideChartSite& operator=(TideChartSite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartSite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartSite* internal_default_instance() {
    return reinterpret_cast<const TideChartSite*>(
               &_TideChartSite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(TideChartSite* other);
  friend void swap(TideChartSite& a, TideChartSite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartSite* New() const final {
    return CreateMaybeMessage<TideChartSite>(nullptr);
  }

  TideChartSite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartSite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartSite& from);
  void MergeFrom(const TideChartSite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartSite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartSite stack = 2;
  int stack_size() const;
  void clear_stack();
  static const int kStackFieldNumber = 2;
  ::TideChartSite* mutable_stack(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartSite >*
      mutable_stack();
  const ::TideChartSite& stack(int index) const;
  ::TideChartSite* add_stack();
  const ::google::protobuf::RepeatedPtrField< ::TideChartSite >&
      stack() const;

  // repeated string scope = 6;
  int scope_size() const;
  void clear_scope();
  static const int kScopeFieldNumber = 6;
  const ::std::string& scope(int index) const;
  ::std::string* mutable_scope(int index);
  void set_scope(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_scope(int index, ::std::string&& value);
  #endif
  void set_scope(int index, const char* value);
  void set_scope(int index, const char* value, size_t size);
  ::std::string* add_scope();
  void add_scope(const ::std::string& value);
  #if LANG_CXX11
  void add_scope(::std::string&& value);
  #endif
  void add_scope(const char* value);
  void add_scope(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& scope() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_scope();

  // repeated .TideChartProperty local = 12;
  int local_size() const;
  void clear_local();
  static const int kLocalFieldNumber = 12;
  ::TideChartProperty* mutable_local(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_local();
  const ::TideChartProperty& local(int index) const;
  ::TideChartProperty* add_local();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      local() const;

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string trigger = 4;
  void clear_trigger();
  static const int kTriggerFieldNumber = 4;
  const ::std::string& trigger() const;
  void set_trigger(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger(::std::string&& value);
  #endif
  void set_trigger(const char* value);
  void set_trigger(const char* value, size_t size);
  ::std::string* mutable_trigger();
  ::std::string* release_trigger();
  void set_allocated_trigger(::std::string* trigger);

  // string event = 5;
  void clear_event();
  static const int kEventFieldNumber = 5;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);

  // string filter = 7;
  void clear_filter();
  static const int kFilterFieldNumber = 7;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string graph = 8;
  void clear_graph();
  static const int kGraphFieldNumber = 8;
  const ::std::string& graph() const;
  void set_graph(const ::std::string& value);
  #if LANG_CXX11
  void set_graph(::std::string&& value);
  #endif
  void set_graph(const char* value);
  void set_graph(const char* value, size_t size);
  ::std::string* mutable_graph();
  ::std::string* release_graph();
  void set_allocated_graph(::std::string* graph);

  // string region = 9;
  void clear_region();
  static const int kRegionFieldNumber = 9;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // string node = 10;
  void clear_node();
  static const int kNodeFieldNumber = 10;
  const ::std::string& node() const;
  void set_node(const ::std::string& value);
  #if LANG_CXX11
  void set_node(::std::string&& value);
  #endif
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  ::std::string* mutable_node();
  ::std::string* release_node();
  void set_allocated_node(::std::string* node);

  // string port = 11;
  void clear_port();
  static const int kPortFieldNumber = 11;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  #if LANG_CXX11
  void set_port(::std::string&& value);
  #endif
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // int64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TideChartSite)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartSite > stack_;
  ::google::protobuf::RepeatedPtrField<::std::string> scope_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > local_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr trigger_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr graph_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::internal::ArenaStringPtr node_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  ::google::protobuf::int64 index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartMessage) */ {
 public:
  TideChartMessage();
  virtual ~TideChartMessage();

  TideChartMessage(const TideChartMessage& from);

  inline TideChartMessage& operator=(const TideChartMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartMessage(TideChartMessage&& from) noexcept
    : TideChartMessage() {
    *this = ::std::move(from);
  }

  inline TideChartMessage& operator=(TideChartMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartMessage& default_instance();

  enum ContentCase {
    kJsonContent = 14,
    kMsgContent = 15,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartMessage* internal_default_instance() {
    return reinterpret_cast<const TideChartMessage*>(
               &_TideChartMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(TideChartMessage* other);
  friend void swap(TideChartMessage& a, TideChartMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartMessage* New() const final {
    return CreateMaybeMessage<TideChartMessage>(nullptr);
  }

  TideChartMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartMessage& from);
  void MergeFrom(const TideChartMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 12;
  void clear_type();
  static const int kTypeFieldNumber = 12;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // int64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int64 origin = 4;
  void clear_origin();
  static const int kOriginFieldNumber = 4;
  ::google::protobuf::int64 origin() const;
  void set_origin(::google::protobuf::int64 value);

  // int64 previous = 5;
  void clear_previous();
  static const int kPreviousFieldNumber = 5;
  ::google::protobuf::int64 previous() const;
  void set_previous(::google::protobuf::int64 value);

  // int64 source = 7;
  void clear_source();
  static const int kSourceFieldNumber = 7;
  ::google::protobuf::int64 source() const;
  void set_source(::google::protobuf::int64 value);

  // int64 target = 8;
  void clear_target();
  static const int kTargetFieldNumber = 8;
  ::google::protobuf::int64 target() const;
  void set_target(::google::protobuf::int64 value);

  // int64 delayUntil = 9;
  void clear_delayuntil();
  static const int kDelayUntilFieldNumber = 9;
  ::google::protobuf::int64 delayuntil() const;
  void set_delayuntil(::google::protobuf::int64 value);

  // int64 holdToken = 10;
  void clear_holdtoken();
  static const int kHoldTokenFieldNumber = 10;
  ::google::protobuf::int64 holdtoken() const;
  void set_holdtoken(::google::protobuf::int64 value);

  // int64 cancelToken = 11;
  void clear_canceltoken();
  static const int kCancelTokenFieldNumber = 11;
  ::google::protobuf::int64 canceltoken() const;
  void set_canceltoken(::google::protobuf::int64 value);

  // int32 version = 13;
  void clear_version();
  static const int kVersionFieldNumber = 13;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // string jsonContent = 14;
  private:
  bool has_jsoncontent() const;
  public:
  void clear_jsoncontent();
  static const int kJsonContentFieldNumber = 14;
  const ::std::string& jsoncontent() const;
  void set_jsoncontent(const ::std::string& value);
  #if LANG_CXX11
  void set_jsoncontent(::std::string&& value);
  #endif
  void set_jsoncontent(const char* value);
  void set_jsoncontent(const char* value, size_t size);
  ::std::string* mutable_jsoncontent();
  ::std::string* release_jsoncontent();
  void set_allocated_jsoncontent(::std::string* jsoncontent);

  // bytes msgContent = 15;
  private:
  bool has_msgcontent() const;
  public:
  void clear_msgcontent();
  static const int kMsgContentFieldNumber = 15;
  const ::std::string& msgcontent() const;
  void set_msgcontent(const ::std::string& value);
  #if LANG_CXX11
  void set_msgcontent(::std::string&& value);
  #endif
  void set_msgcontent(const char* value);
  void set_msgcontent(const void* value, size_t size);
  ::std::string* mutable_msgcontent();
  ::std::string* release_msgcontent();
  void set_allocated_msgcontent(::std::string* msgcontent);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:TideChartMessage)
 private:
  class HasBitSetters;
  void set_has_jsoncontent();
  void set_has_msgcontent();

  inline bool has_content() const;
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int64 index_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 origin_;
  ::google::protobuf::int64 previous_;
  ::google::protobuf::int64 source_;
  ::google::protobuf::int64 target_;
  ::google::protobuf::int64 delayuntil_;
  ::google::protobuf::int64 holdtoken_;
  ::google::protobuf::int64 canceltoken_;
  ::google::protobuf::int32 version_;
  union ContentUnion {
    ContentUnion() {}
    ::google::protobuf::internal::ArenaStringPtr jsoncontent_;
    ::google::protobuf::internal::ArenaStringPtr msgcontent_;
  } content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartContextChange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartContextChange) */ {
 public:
  TideChartContextChange();
  virtual ~TideChartContextChange();

  TideChartContextChange(const TideChartContextChange& from);

  inline TideChartContextChange& operator=(const TideChartContextChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartContextChange(TideChartContextChange&& from) noexcept
    : TideChartContextChange() {
    *this = ::std::move(from);
  }

  inline TideChartContextChange& operator=(TideChartContextChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartContextChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartContextChange* internal_default_instance() {
    return reinterpret_cast<const TideChartContextChange*>(
               &_TideChartContextChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(TideChartContextChange* other);
  friend void swap(TideChartContextChange& a, TideChartContextChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartContextChange* New() const final {
    return CreateMaybeMessage<TideChartContextChange>(nullptr);
  }

  TideChartContextChange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartContextChange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartContextChange& from);
  void MergeFrom(const TideChartContextChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartContextChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartProperty props = 4;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 4;
  ::TideChartProperty* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_props();
  const ::TideChartProperty& props(int index) const;
  ::TideChartProperty* add_props();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      props() const;

  // string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // int64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TideChartContextChange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > props_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int64 index_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartLogEntry final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartLogEntry) */ {
 public:
  TideChartLogEntry();
  virtual ~TideChartLogEntry();

  TideChartLogEntry(const TideChartLogEntry& from);

  inline TideChartLogEntry& operator=(const TideChartLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartLogEntry(TideChartLogEntry&& from) noexcept
    : TideChartLogEntry() {
    *this = ::std::move(from);
  }

  inline TideChartLogEntry& operator=(TideChartLogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartLogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartLogEntry* internal_default_instance() {
    return reinterpret_cast<const TideChartLogEntry*>(
               &_TideChartLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(TideChartLogEntry* other);
  friend void swap(TideChartLogEntry& a, TideChartLogEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartLogEntry* New() const final {
    return CreateMaybeMessage<TideChartLogEntry>(nullptr);
  }

  TideChartLogEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartLogEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartLogEntry& from);
  void MergeFrom(const TideChartLogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartLogEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 5;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 5;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // repeated int64 refs = 7;
  int refs_size() const;
  void clear_refs();
  static const int kRefsFieldNumber = 7;
  ::google::protobuf::int64 refs(int index) const;
  void set_refs(int index, ::google::protobuf::int64 value);
  void add_refs(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      refs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_refs();

  // repeated .TideChartProperty props = 8;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 8;
  ::TideChartProperty* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_props();
  const ::TideChartProperty& props(int index) const;
  ::TideChartProperty* add_props();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      props() const;

  // string message = 6;
  void clear_message();
  static const int kMessageFieldNumber = 6;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int64 source = 3;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  ::google::protobuf::int64 source() const;
  void set_source(::google::protobuf::int64 value);

  // .TideChartLogLevel level = 4;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::TideChartLogLevel level() const;
  void set_level(::TideChartLogLevel value);

  // @@protoc_insertion_point(class_scope:TideChartLogEntry)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > refs_;
  mutable std::atomic<int> _refs_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > props_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int64 index_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 source_;
  int level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartContext final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartContext) */ {
 public:
  TideChartContext();
  virtual ~TideChartContext();

  TideChartContext(const TideChartContext& from);

  inline TideChartContext& operator=(const TideChartContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartContext(TideChartContext&& from) noexcept
    : TideChartContext() {
    *this = ::std::move(from);
  }

  inline TideChartContext& operator=(TideChartContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartContext* internal_default_instance() {
    return reinterpret_cast<const TideChartContext*>(
               &_TideChartContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(TideChartContext* other);
  friend void swap(TideChartContext& a, TideChartContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartContext* New() const final {
    return CreateMaybeMessage<TideChartContext>(nullptr);
  }

  TideChartContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartContext& from);
  void MergeFrom(const TideChartContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartSite sites = 5;
  int sites_size() const;
  void clear_sites();
  static const int kSitesFieldNumber = 5;
  ::TideChartSite* mutable_sites(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartSite >*
      mutable_sites();
  const ::TideChartSite& sites(int index) const;
  ::TideChartSite* add_sites();
  const ::google::protobuf::RepeatedPtrField< ::TideChartSite >&
      sites() const;

  // repeated .TideChartMessage messages = 6;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 6;
  ::TideChartMessage* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartMessage >*
      mutable_messages();
  const ::TideChartMessage& messages(int index) const;
  ::TideChartMessage* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::TideChartMessage >&
      messages() const;

  // repeated .TideChartProperty global = 7;
  int global_size() const;
  void clear_global();
  static const int kGlobalFieldNumber = 7;
  ::TideChartProperty* mutable_global(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_global();
  const ::TideChartProperty& global(int index) const;
  ::TideChartProperty* add_global();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      global() const;

  // repeated int64 active = 10;
  int active_size() const;
  void clear_active();
  static const int kActiveFieldNumber = 10;
  ::google::protobuf::int64 active(int index) const;
  void set_active(int index, ::google::protobuf::int64 value);
  void add_active(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      active() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_active();

  // repeated int64 waiting = 11;
  int waiting_size() const;
  void clear_waiting();
  static const int kWaitingFieldNumber = 11;
  ::google::protobuf::int64 waiting(int index) const;
  void set_waiting(int index, ::google::protobuf::int64 value);
  void add_waiting(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      waiting() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_waiting();

  // repeated int64 paused = 12;
  int paused_size() const;
  void clear_paused();
  static const int kPausedFieldNumber = 12;
  ::google::protobuf::int64 paused(int index) const;
  void set_paused(int index, ::google::protobuf::int64 value);
  void add_paused(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      paused() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_paused();

  // repeated int64 disabled = 13;
  int disabled_size() const;
  void clear_disabled();
  static const int kDisabledFieldNumber = 13;
  ::google::protobuf::int64 disabled(int index) const;
  void set_disabled(int index, ::google::protobuf::int64 value);
  void add_disabled(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      disabled() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_disabled();

  // repeated .TideChartContextChange events = 14;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 14;
  ::TideChartContextChange* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartContextChange >*
      mutable_events();
  const ::TideChartContextChange& events(int index) const;
  ::TideChartContextChange* add_events();
  const ::google::protobuf::RepeatedPtrField< ::TideChartContextChange >&
      events() const;

  // repeated .TideChartLogEntry log = 15;
  int log_size() const;
  void clear_log();
  static const int kLogFieldNumber = 15;
  ::TideChartLogEntry* mutable_log(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartLogEntry >*
      mutable_log();
  const ::TideChartLogEntry& log(int index) const;
  ::TideChartLogEntry* add_log();
  const ::google::protobuf::RepeatedPtrField< ::TideChartLogEntry >&
      log() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // int64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int64 startTime = 8;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 8;
  ::google::protobuf::int64 starttime() const;
  void set_starttime(::google::protobuf::int64 value);

  // int64 startIndex = 9;
  void clear_startindex();
  static const int kStartIndexFieldNumber = 9;
  ::google::protobuf::int64 startindex() const;
  void set_startindex(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TideChartContext)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartSite > sites_;
  ::google::protobuf::RepeatedPtrField< ::TideChartMessage > messages_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > global_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > active_;
  mutable std::atomic<int> _active_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > waiting_;
  mutable std::atomic<int> _waiting_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > paused_;
  mutable std::atomic<int> _paused_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > disabled_;
  mutable std::atomic<int> _disabled_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::TideChartContextChange > events_;
  ::google::protobuf::RepeatedPtrField< ::TideChartLogEntry > log_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::int64 index_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 startindex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartData) */ {
 public:
  TideChartData();
  virtual ~TideChartData();

  TideChartData(const TideChartData& from);

  inline TideChartData& operator=(const TideChartData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartData(TideChartData&& from) noexcept
    : TideChartData() {
    *this = ::std::move(from);
  }

  inline TideChartData& operator=(TideChartData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartData* internal_default_instance() {
    return reinterpret_cast<const TideChartData*>(
               &_TideChartData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(TideChartData* other);
  friend void swap(TideChartData& a, TideChartData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartData* New() const final {
    return CreateMaybeMessage<TideChartData>(nullptr);
  }

  TideChartData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartData& from);
  void MergeFrom(const TideChartData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartGraph sheets = 9;
  int sheets_size() const;
  void clear_sheets();
  static const int kSheetsFieldNumber = 9;
  ::TideChartGraph* mutable_sheets(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartGraph >*
      mutable_sheets();
  const ::TideChartGraph& sheets(int index) const;
  ::TideChartGraph* add_sheets();
  const ::google::protobuf::RepeatedPtrField< ::TideChartGraph >&
      sheets() const;

  // repeated .TideChartProperty props = 10;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 10;
  ::TideChartProperty* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_props();
  const ::TideChartProperty& props(int index) const;
  ::TideChartProperty* add_props();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      props() const;

  // repeated .TideChartNote notes = 11;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 11;
  ::TideChartNote* mutable_notes(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartNote >*
      mutable_notes();
  const ::TideChartNote& notes(int index) const;
  ::TideChartNote* add_notes();
  const ::google::protobuf::RepeatedPtrField< ::TideChartNote >&
      notes() const;

  // repeated .TideChartLibrary library = 12;
  int library_size() const;
  void clear_library();
  static const int kLibraryFieldNumber = 12;
  ::TideChartLibrary* mutable_library(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartLibrary >*
      mutable_library();
  const ::TideChartLibrary& library(int index) const;
  ::TideChartLibrary* add_library();
  const ::google::protobuf::RepeatedPtrField< ::TideChartLibrary >&
      library() const;

  // repeated .TideChartProperty settings = 22;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 22;
  ::TideChartProperty* mutable_settings(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
      mutable_settings();
  const ::TideChartProperty& settings(int index) const;
  ::TideChartProperty* add_settings();
  const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
      settings() const;

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string branch = 2;
  void clear_branch();
  static const int kBranchFieldNumber = 2;
  const ::std::string& branch() const;
  void set_branch(const ::std::string& value);
  #if LANG_CXX11
  void set_branch(::std::string&& value);
  #endif
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  ::std::string* mutable_branch();
  ::std::string* release_branch();
  void set_allocated_branch(::std::string* branch);

  // string source = 3;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // string merge = 4;
  void clear_merge();
  static const int kMergeFieldNumber = 4;
  const ::std::string& merge() const;
  void set_merge(const ::std::string& value);
  #if LANG_CXX11
  void set_merge(::std::string&& value);
  #endif
  void set_merge(const char* value);
  void set_merge(const char* value, size_t size);
  ::std::string* mutable_merge();
  ::std::string* release_merge();
  void set_allocated_merge(::std::string* merge);

  // string commitDate = 5;
  void clear_commitdate();
  static const int kCommitDateFieldNumber = 5;
  const ::std::string& commitdate() const;
  void set_commitdate(const ::std::string& value);
  #if LANG_CXX11
  void set_commitdate(::std::string&& value);
  #endif
  void set_commitdate(const char* value);
  void set_commitdate(const char* value, size_t size);
  ::std::string* mutable_commitdate();
  ::std::string* release_commitdate();
  void set_allocated_commitdate(::std::string* commitdate);

  // string commitBy = 6;
  void clear_commitby();
  static const int kCommitByFieldNumber = 6;
  const ::std::string& commitby() const;
  void set_commitby(const ::std::string& value);
  #if LANG_CXX11
  void set_commitby(::std::string&& value);
  #endif
  void set_commitby(const char* value);
  void set_commitby(const char* value, size_t size);
  ::std::string* mutable_commitby();
  ::std::string* release_commitby();
  void set_allocated_commitby(::std::string* commitby);

  // string commitDesc = 7;
  void clear_commitdesc();
  static const int kCommitDescFieldNumber = 7;
  const ::std::string& commitdesc() const;
  void set_commitdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_commitdesc(::std::string&& value);
  #endif
  void set_commitdesc(const char* value);
  void set_commitdesc(const char* value, size_t size);
  ::std::string* mutable_commitdesc();
  ::std::string* release_commitdesc();
  void set_allocated_commitdesc(::std::string* commitdesc);

  // string commitNotes = 8;
  void clear_commitnotes();
  static const int kCommitNotesFieldNumber = 8;
  const ::std::string& commitnotes() const;
  void set_commitnotes(const ::std::string& value);
  #if LANG_CXX11
  void set_commitnotes(::std::string&& value);
  #endif
  void set_commitnotes(const char* value);
  void set_commitnotes(const char* value, size_t size);
  ::std::string* mutable_commitnotes();
  ::std::string* release_commitnotes();
  void set_allocated_commitnotes(::std::string* commitnotes);

  // @@protoc_insertion_point(class_scope:TideChartData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartGraph > sheets_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > props_;
  ::google::protobuf::RepeatedPtrField< ::TideChartNote > notes_;
  ::google::protobuf::RepeatedPtrField< ::TideChartLibrary > library_;
  ::google::protobuf::RepeatedPtrField< ::TideChartProperty > settings_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr branch_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr merge_;
  ::google::protobuf::internal::ArenaStringPtr commitdate_;
  ::google::protobuf::internal::ArenaStringPtr commitby_;
  ::google::protobuf::internal::ArenaStringPtr commitdesc_;
  ::google::protobuf::internal::ArenaStringPtr commitnotes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartHeader) */ {
 public:
  TideChartHeader();
  virtual ~TideChartHeader();

  TideChartHeader(const TideChartHeader& from);

  inline TideChartHeader& operator=(const TideChartHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartHeader(TideChartHeader&& from) noexcept
    : TideChartHeader() {
    *this = ::std::move(from);
  }

  inline TideChartHeader& operator=(TideChartHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartHeader* internal_default_instance() {
    return reinterpret_cast<const TideChartHeader*>(
               &_TideChartHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(TideChartHeader* other);
  friend void swap(TideChartHeader& a, TideChartHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartHeader* New() const final {
    return CreateMaybeMessage<TideChartHeader>(nullptr);
  }

  TideChartHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartHeader& from);
  void MergeFrom(const TideChartHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string branch = 2;
  void clear_branch();
  static const int kBranchFieldNumber = 2;
  const ::std::string& branch() const;
  void set_branch(const ::std::string& value);
  #if LANG_CXX11
  void set_branch(::std::string&& value);
  #endif
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  ::std::string* mutable_branch();
  ::std::string* release_branch();
  void set_allocated_branch(::std::string* branch);

  // string source = 3;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // string merge = 4;
  void clear_merge();
  static const int kMergeFieldNumber = 4;
  const ::std::string& merge() const;
  void set_merge(const ::std::string& value);
  #if LANG_CXX11
  void set_merge(::std::string&& value);
  #endif
  void set_merge(const char* value);
  void set_merge(const char* value, size_t size);
  ::std::string* mutable_merge();
  ::std::string* release_merge();
  void set_allocated_merge(::std::string* merge);

  // string commitDate = 5;
  void clear_commitdate();
  static const int kCommitDateFieldNumber = 5;
  const ::std::string& commitdate() const;
  void set_commitdate(const ::std::string& value);
  #if LANG_CXX11
  void set_commitdate(::std::string&& value);
  #endif
  void set_commitdate(const char* value);
  void set_commitdate(const char* value, size_t size);
  ::std::string* mutable_commitdate();
  ::std::string* release_commitdate();
  void set_allocated_commitdate(::std::string* commitdate);

  // string commitBy = 6;
  void clear_commitby();
  static const int kCommitByFieldNumber = 6;
  const ::std::string& commitby() const;
  void set_commitby(const ::std::string& value);
  #if LANG_CXX11
  void set_commitby(::std::string&& value);
  #endif
  void set_commitby(const char* value);
  void set_commitby(const char* value, size_t size);
  ::std::string* mutable_commitby();
  ::std::string* release_commitby();
  void set_allocated_commitby(::std::string* commitby);

  // string commitDesc = 7;
  void clear_commitdesc();
  static const int kCommitDescFieldNumber = 7;
  const ::std::string& commitdesc() const;
  void set_commitdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_commitdesc(::std::string&& value);
  #endif
  void set_commitdesc(const char* value);
  void set_commitdesc(const char* value, size_t size);
  ::std::string* mutable_commitdesc();
  ::std::string* release_commitdesc();
  void set_allocated_commitdesc(::std::string* commitdesc);

  // string commitNotes = 8;
  void clear_commitnotes();
  static const int kCommitNotesFieldNumber = 8;
  const ::std::string& commitnotes() const;
  void set_commitnotes(const ::std::string& value);
  #if LANG_CXX11
  void set_commitnotes(::std::string&& value);
  #endif
  void set_commitnotes(const char* value);
  void set_commitnotes(const char* value, size_t size);
  ::std::string* mutable_commitnotes();
  ::std::string* release_commitnotes();
  void set_allocated_commitnotes(::std::string* commitnotes);

  // @@protoc_insertion_point(class_scope:TideChartHeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr branch_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr merge_;
  ::google::protobuf::internal::ArenaStringPtr commitdate_;
  ::google::protobuf::internal::ArenaStringPtr commitby_;
  ::google::protobuf::internal::ArenaStringPtr commitdesc_;
  ::google::protobuf::internal::ArenaStringPtr commitnotes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartFile) */ {
 public:
  TideChartFile();
  virtual ~TideChartFile();

  TideChartFile(const TideChartFile& from);

  inline TideChartFile& operator=(const TideChartFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartFile(TideChartFile&& from) noexcept
    : TideChartFile() {
    *this = ::std::move(from);
  }

  inline TideChartFile& operator=(TideChartFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartFile* internal_default_instance() {
    return reinterpret_cast<const TideChartFile*>(
               &_TideChartFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(TideChartFile* other);
  friend void swap(TideChartFile& a, TideChartFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartFile* New() const final {
    return CreateMaybeMessage<TideChartFile>(nullptr);
  }

  TideChartFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartFile& from);
  void MergeFrom(const TideChartFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TideChartCommand working = 8;
  int working_size() const;
  void clear_working();
  static const int kWorkingFieldNumber = 8;
  ::TideChartCommand* mutable_working(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartCommand >*
      mutable_working();
  const ::TideChartCommand& working(int index) const;
  ::TideChartCommand* add_working();
  const ::google::protobuf::RepeatedPtrField< ::TideChartCommand >&
      working() const;

  // repeated .TideChartCommand remote = 9;
  int remote_size() const;
  void clear_remote();
  static const int kRemoteFieldNumber = 9;
  ::TideChartCommand* mutable_remote(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartCommand >*
      mutable_remote();
  const ::TideChartCommand& remote(int index) const;
  ::TideChartCommand* add_remote();
  const ::google::protobuf::RepeatedPtrField< ::TideChartCommand >&
      remote() const;

  // repeated .TideChartData history = 10;
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 10;
  ::TideChartData* mutable_history(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartData >*
      mutable_history();
  const ::TideChartData& history(int index) const;
  ::TideChartData* add_history();
  const ::google::protobuf::RepeatedPtrField< ::TideChartData >&
      history() const;

  // repeated .TideChartContext context = 11;
  int context_size() const;
  void clear_context();
  static const int kContextFieldNumber = 11;
  ::TideChartContext* mutable_context(int index);
  ::google::protobuf::RepeatedPtrField< ::TideChartContext >*
      mutable_context();
  const ::TideChartContext& context(int index) const;
  ::TideChartContext* add_context();
  const ::google::protobuf::RepeatedPtrField< ::TideChartContext >&
      context() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string origin = 4;
  void clear_origin();
  static const int kOriginFieldNumber = 4;
  const ::std::string& origin() const;
  void set_origin(const ::std::string& value);
  #if LANG_CXX11
  void set_origin(::std::string&& value);
  #endif
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  ::std::string* mutable_origin();
  ::std::string* release_origin();
  void set_allocated_origin(::std::string* origin);

  // string modifiedDate = 5;
  void clear_modifieddate();
  static const int kModifiedDateFieldNumber = 5;
  const ::std::string& modifieddate() const;
  void set_modifieddate(const ::std::string& value);
  #if LANG_CXX11
  void set_modifieddate(::std::string&& value);
  #endif
  void set_modifieddate(const char* value);
  void set_modifieddate(const char* value, size_t size);
  ::std::string* mutable_modifieddate();
  ::std::string* release_modifieddate();
  void set_allocated_modifieddate(::std::string* modifieddate);

  // string modifiedBy = 6;
  void clear_modifiedby();
  static const int kModifiedByFieldNumber = 6;
  const ::std::string& modifiedby() const;
  void set_modifiedby(const ::std::string& value);
  #if LANG_CXX11
  void set_modifiedby(::std::string&& value);
  #endif
  void set_modifiedby(const char* value);
  void set_modifiedby(const char* value, size_t size);
  ::std::string* mutable_modifiedby();
  ::std::string* release_modifiedby();
  void set_allocated_modifiedby(::std::string* modifiedby);

  // .TideChartData chart = 7;
  bool has_chart() const;
  void clear_chart();
  static const int kChartFieldNumber = 7;
  const ::TideChartData& chart() const;
  ::TideChartData* release_chart();
  ::TideChartData* mutable_chart();
  void set_allocated_chart(::TideChartData* chart);

  // @@protoc_insertion_point(class_scope:TideChartFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TideChartCommand > working_;
  ::google::protobuf::RepeatedPtrField< ::TideChartCommand > remote_;
  ::google::protobuf::RepeatedPtrField< ::TideChartData > history_;
  ::google::protobuf::RepeatedPtrField< ::TideChartContext > context_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr origin_;
  ::google::protobuf::internal::ArenaStringPtr modifieddate_;
  ::google::protobuf::internal::ArenaStringPtr modifiedby_;
  ::TideChartData* chart_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartFileHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartFileHeader) */ {
 public:
  TideChartFileHeader();
  virtual ~TideChartFileHeader();

  TideChartFileHeader(const TideChartFileHeader& from);

  inline TideChartFileHeader& operator=(const TideChartFileHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartFileHeader(TideChartFileHeader&& from) noexcept
    : TideChartFileHeader() {
    *this = ::std::move(from);
  }

  inline TideChartFileHeader& operator=(TideChartFileHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartFileHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartFileHeader* internal_default_instance() {
    return reinterpret_cast<const TideChartFileHeader*>(
               &_TideChartFileHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(TideChartFileHeader* other);
  friend void swap(TideChartFileHeader& a, TideChartFileHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartFileHeader* New() const final {
    return CreateMaybeMessage<TideChartFileHeader>(nullptr);
  }

  TideChartFileHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartFileHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartFileHeader& from);
  void MergeFrom(const TideChartFileHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartFileHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string origin = 4;
  void clear_origin();
  static const int kOriginFieldNumber = 4;
  const ::std::string& origin() const;
  void set_origin(const ::std::string& value);
  #if LANG_CXX11
  void set_origin(::std::string&& value);
  #endif
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  ::std::string* mutable_origin();
  ::std::string* release_origin();
  void set_allocated_origin(::std::string* origin);

  // string modifiedDate = 5;
  void clear_modifieddate();
  static const int kModifiedDateFieldNumber = 5;
  const ::std::string& modifieddate() const;
  void set_modifieddate(const ::std::string& value);
  #if LANG_CXX11
  void set_modifieddate(::std::string&& value);
  #endif
  void set_modifieddate(const char* value);
  void set_modifieddate(const char* value, size_t size);
  ::std::string* mutable_modifieddate();
  ::std::string* release_modifieddate();
  void set_allocated_modifieddate(::std::string* modifieddate);

  // string modifiedBy = 6;
  void clear_modifiedby();
  static const int kModifiedByFieldNumber = 6;
  const ::std::string& modifiedby() const;
  void set_modifiedby(const ::std::string& value);
  #if LANG_CXX11
  void set_modifiedby(::std::string&& value);
  #endif
  void set_modifiedby(const char* value);
  void set_modifiedby(const char* value, size_t size);
  ::std::string* mutable_modifiedby();
  ::std::string* release_modifiedby();
  void set_allocated_modifiedby(::std::string* modifiedby);

  // @@protoc_insertion_point(class_scope:TideChartFileHeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr origin_;
  ::google::protobuf::internal::ArenaStringPtr modifieddate_;
  ::google::protobuf::internal::ArenaStringPtr modifiedby_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// -------------------------------------------------------------------

class TideChartFileCurrent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TideChartFileCurrent) */ {
 public:
  TideChartFileCurrent();
  virtual ~TideChartFileCurrent();

  TideChartFileCurrent(const TideChartFileCurrent& from);

  inline TideChartFileCurrent& operator=(const TideChartFileCurrent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TideChartFileCurrent(TideChartFileCurrent&& from) noexcept
    : TideChartFileCurrent() {
    *this = ::std::move(from);
  }

  inline TideChartFileCurrent& operator=(TideChartFileCurrent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TideChartFileCurrent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TideChartFileCurrent* internal_default_instance() {
    return reinterpret_cast<const TideChartFileCurrent*>(
               &_TideChartFileCurrent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(TideChartFileCurrent* other);
  friend void swap(TideChartFileCurrent& a, TideChartFileCurrent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TideChartFileCurrent* New() const final {
    return CreateMaybeMessage<TideChartFileCurrent>(nullptr);
  }

  TideChartFileCurrent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TideChartFileCurrent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TideChartFileCurrent& from);
  void MergeFrom(const TideChartFileCurrent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TideChartFileCurrent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string origin = 4;
  void clear_origin();
  static const int kOriginFieldNumber = 4;
  const ::std::string& origin() const;
  void set_origin(const ::std::string& value);
  #if LANG_CXX11
  void set_origin(::std::string&& value);
  #endif
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  ::std::string* mutable_origin();
  ::std::string* release_origin();
  void set_allocated_origin(::std::string* origin);

  // string modifiedDate = 5;
  void clear_modifieddate();
  static const int kModifiedDateFieldNumber = 5;
  const ::std::string& modifieddate() const;
  void set_modifieddate(const ::std::string& value);
  #if LANG_CXX11
  void set_modifieddate(::std::string&& value);
  #endif
  void set_modifieddate(const char* value);
  void set_modifieddate(const char* value, size_t size);
  ::std::string* mutable_modifieddate();
  ::std::string* release_modifieddate();
  void set_allocated_modifieddate(::std::string* modifieddate);

  // string modifiedBy = 6;
  void clear_modifiedby();
  static const int kModifiedByFieldNumber = 6;
  const ::std::string& modifiedby() const;
  void set_modifiedby(const ::std::string& value);
  #if LANG_CXX11
  void set_modifiedby(::std::string&& value);
  #endif
  void set_modifiedby(const char* value);
  void set_modifiedby(const char* value, size_t size);
  ::std::string* mutable_modifiedby();
  ::std::string* release_modifiedby();
  void set_allocated_modifiedby(::std::string* modifiedby);

  // .TideChartData chart = 7;
  bool has_chart() const;
  void clear_chart();
  static const int kChartFieldNumber = 7;
  const ::TideChartData& chart() const;
  ::TideChartData* release_chart();
  ::TideChartData* mutable_chart();
  void set_allocated_chart(::TideChartData* chart);

  // @@protoc_insertion_point(class_scope:TideChartFileCurrent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr origin_;
  ::google::protobuf::internal::ArenaStringPtr modifieddate_;
  ::google::protobuf::internal::ArenaStringPtr modifiedby_;
  ::TideChartData* chart_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tide_5fchart_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TideChartProperty

// string name = 1;
inline void TideChartProperty::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartProperty::name() const {
  // @@protoc_insertion_point(field_get:TideChartProperty.name)
  return name_.GetNoArena();
}
inline void TideChartProperty::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartProperty.name)
}
#if LANG_CXX11
inline void TideChartProperty::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartProperty.name)
}
#endif
inline void TideChartProperty::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartProperty.name)
}
inline void TideChartProperty::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartProperty.name)
}
inline ::std::string* TideChartProperty::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TideChartProperty.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartProperty::release_name() {
  // @@protoc_insertion_point(field_release:TideChartProperty.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartProperty::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TideChartProperty.name)
}

// bool boolValue = 2;
inline bool TideChartProperty::has_boolvalue() const {
  return value_case() == kBoolValue;
}
inline void TideChartProperty::set_has_boolvalue() {
  _oneof_case_[0] = kBoolValue;
}
inline void TideChartProperty::clear_boolvalue() {
  if (has_boolvalue()) {
    value_.boolvalue_ = false;
    clear_has_value();
  }
}
inline bool TideChartProperty::boolvalue() const {
  // @@protoc_insertion_point(field_get:TideChartProperty.boolValue)
  if (has_boolvalue()) {
    return value_.boolvalue_;
  }
  return false;
}
inline void TideChartProperty::set_boolvalue(bool value) {
  if (!has_boolvalue()) {
    clear_value();
    set_has_boolvalue();
  }
  value_.boolvalue_ = value;
  // @@protoc_insertion_point(field_set:TideChartProperty.boolValue)
}

// string strValue = 3;
inline bool TideChartProperty::has_strvalue() const {
  return value_case() == kStrValue;
}
inline void TideChartProperty::set_has_strvalue() {
  _oneof_case_[0] = kStrValue;
}
inline void TideChartProperty::clear_strvalue() {
  if (has_strvalue()) {
    value_.strvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& TideChartProperty::strvalue() const {
  // @@protoc_insertion_point(field_get:TideChartProperty.strValue)
  if (has_strvalue()) {
    return value_.strvalue_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartProperty::set_strvalue(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartProperty.strValue)
  if (!has_strvalue()) {
    clear_value();
    set_has_strvalue();
    value_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartProperty.strValue)
}
#if LANG_CXX11
inline void TideChartProperty::set_strvalue(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartProperty.strValue)
  if (!has_strvalue()) {
    clear_value();
    set_has_strvalue();
    value_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartProperty.strValue)
}
#endif
inline void TideChartProperty::set_strvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_strvalue()) {
    clear_value();
    set_has_strvalue();
    value_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartProperty.strValue)
}
inline void TideChartProperty::set_strvalue(const char* value, size_t size) {
  if (!has_strvalue()) {
    clear_value();
    set_has_strvalue();
    value_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartProperty.strValue)
}
inline ::std::string* TideChartProperty::mutable_strvalue() {
  if (!has_strvalue()) {
    clear_value();
    set_has_strvalue();
    value_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartProperty.strValue)
  return value_.strvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartProperty::release_strvalue() {
  // @@protoc_insertion_point(field_release:TideChartProperty.strValue)
  if (has_strvalue()) {
    clear_has_value();
    return value_.strvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartProperty::set_allocated_strvalue(::std::string* strvalue) {
  if (has_value()) {
    clear_value();
  }
  if (strvalue != nullptr) {
    set_has_strvalue();
    value_.strvalue_.UnsafeSetDefault(strvalue);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartProperty.strValue)
}

// sint64 longValue = 4;
inline bool TideChartProperty::has_longvalue() const {
  return value_case() == kLongValue;
}
inline void TideChartProperty::set_has_longvalue() {
  _oneof_case_[0] = kLongValue;
}
inline void TideChartProperty::clear_longvalue() {
  if (has_longvalue()) {
    value_.longvalue_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 TideChartProperty::longvalue() const {
  // @@protoc_insertion_point(field_get:TideChartProperty.longValue)
  if (has_longvalue()) {
    return value_.longvalue_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TideChartProperty::set_longvalue(::google::protobuf::int64 value) {
  if (!has_longvalue()) {
    clear_value();
    set_has_longvalue();
  }
  value_.longvalue_ = value;
  // @@protoc_insertion_point(field_set:TideChartProperty.longValue)
}

// double doubleValue = 5;
inline bool TideChartProperty::has_doublevalue() const {
  return value_case() == kDoubleValue;
}
inline void TideChartProperty::set_has_doublevalue() {
  _oneof_case_[0] = kDoubleValue;
}
inline void TideChartProperty::clear_doublevalue() {
  if (has_doublevalue()) {
    value_.doublevalue_ = 0;
    clear_has_value();
  }
}
inline double TideChartProperty::doublevalue() const {
  // @@protoc_insertion_point(field_get:TideChartProperty.doubleValue)
  if (has_doublevalue()) {
    return value_.doublevalue_;
  }
  return 0;
}
inline void TideChartProperty::set_doublevalue(double value) {
  if (!has_doublevalue()) {
    clear_value();
    set_has_doublevalue();
  }
  value_.doublevalue_ = value;
  // @@protoc_insertion_point(field_set:TideChartProperty.doubleValue)
}

// repeated .TideChartProperty props = 6;
inline int TideChartProperty::props_size() const {
  return props_.size();
}
inline void TideChartProperty::clear_props() {
  props_.Clear();
}
inline ::TideChartProperty* TideChartProperty::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartProperty.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartProperty::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:TideChartProperty.props)
  return &props_;
}
inline const ::TideChartProperty& TideChartProperty::props(int index) const {
  // @@protoc_insertion_point(field_get:TideChartProperty.props)
  return props_.Get(index);
}
inline ::TideChartProperty* TideChartProperty::add_props() {
  // @@protoc_insertion_point(field_add:TideChartProperty.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartProperty::props() const {
  // @@protoc_insertion_point(field_list:TideChartProperty.props)
  return props_;
}

inline bool TideChartProperty::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TideChartProperty::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TideChartProperty::ValueCase TideChartProperty::value_case() const {
  return TideChartProperty::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TideChartCommentBox

// string id = 1;
inline void TideChartCommentBox::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartCommentBox::id() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.id)
  return id_.GetNoArena();
}
inline void TideChartCommentBox::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartCommentBox.id)
}
#if LANG_CXX11
inline void TideChartCommentBox::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartCommentBox.id)
}
#endif
inline void TideChartCommentBox::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartCommentBox.id)
}
inline void TideChartCommentBox::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartCommentBox.id)
}
inline ::std::string* TideChartCommentBox::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TideChartCommentBox.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartCommentBox::release_id() {
  // @@protoc_insertion_point(field_release:TideChartCommentBox.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartCommentBox::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TideChartCommentBox.id)
}

// string region = 2;
inline void TideChartCommentBox::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartCommentBox::region() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.region)
  return region_.GetNoArena();
}
inline void TideChartCommentBox::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartCommentBox.region)
}
#if LANG_CXX11
inline void TideChartCommentBox::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartCommentBox.region)
}
#endif
inline void TideChartCommentBox::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartCommentBox.region)
}
inline void TideChartCommentBox::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartCommentBox.region)
}
inline ::std::string* TideChartCommentBox::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:TideChartCommentBox.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartCommentBox::release_region() {
  // @@protoc_insertion_point(field_release:TideChartCommentBox.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartCommentBox::set_allocated_region(::std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:TideChartCommentBox.region)
}

// sint32 posX = 3;
inline void TideChartCommentBox::clear_posx() {
  posx_ = 0;
}
inline ::google::protobuf::int32 TideChartCommentBox::posx() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.posX)
  return posx_;
}
inline void TideChartCommentBox::set_posx(::google::protobuf::int32 value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:TideChartCommentBox.posX)
}

// sint32 posY = 4;
inline void TideChartCommentBox::clear_posy() {
  posy_ = 0;
}
inline ::google::protobuf::int32 TideChartCommentBox::posy() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.posY)
  return posy_;
}
inline void TideChartCommentBox::set_posy(::google::protobuf::int32 value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:TideChartCommentBox.posY)
}

// int32 width = 5;
inline void TideChartCommentBox::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 TideChartCommentBox::width() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.width)
  return width_;
}
inline void TideChartCommentBox::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:TideChartCommentBox.width)
}

// int32 height = 6;
inline void TideChartCommentBox::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 TideChartCommentBox::height() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.height)
  return height_;
}
inline void TideChartCommentBox::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:TideChartCommentBox.height)
}

// string text = 7;
inline bool TideChartCommentBox::has_text() const {
  return content_case() == kText;
}
inline void TideChartCommentBox::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void TideChartCommentBox::clear_text() {
  if (has_text()) {
    content_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& TideChartCommentBox::text() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.text)
  if (has_text()) {
    return content_.text_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartCommentBox::set_text(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartCommentBox.text)
  if (!has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartCommentBox.text)
}
#if LANG_CXX11
inline void TideChartCommentBox::set_text(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartCommentBox.text)
  if (!has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartCommentBox.text)
}
#endif
inline void TideChartCommentBox::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartCommentBox.text)
}
inline void TideChartCommentBox::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartCommentBox.text)
}
inline ::std::string* TideChartCommentBox::mutable_text() {
  if (!has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommentBox.text)
  return content_.text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartCommentBox::release_text() {
  // @@protoc_insertion_point(field_release:TideChartCommentBox.text)
  if (has_text()) {
    clear_has_content();
    return content_.text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartCommentBox::set_allocated_text(::std::string* text) {
  if (has_content()) {
    clear_content();
  }
  if (text != nullptr) {
    set_has_text();
    content_.text_.UnsafeSetDefault(text);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommentBox.text)
}

// bytes image = 8;
inline bool TideChartCommentBox::has_image() const {
  return content_case() == kImage;
}
inline void TideChartCommentBox::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline void TideChartCommentBox::clear_image() {
  if (has_image()) {
    content_.image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& TideChartCommentBox::image() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.image)
  if (has_image()) {
    return content_.image_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartCommentBox::set_image(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartCommentBox.image)
  if (!has_image()) {
    clear_content();
    set_has_image();
    content_.image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartCommentBox.image)
}
#if LANG_CXX11
inline void TideChartCommentBox::set_image(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartCommentBox.image)
  if (!has_image()) {
    clear_content();
    set_has_image();
    content_.image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartCommentBox.image)
}
#endif
inline void TideChartCommentBox::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_image()) {
    clear_content();
    set_has_image();
    content_.image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartCommentBox.image)
}
inline void TideChartCommentBox::set_image(const void* value, size_t size) {
  if (!has_image()) {
    clear_content();
    set_has_image();
    content_.image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartCommentBox.image)
}
inline ::std::string* TideChartCommentBox::mutable_image() {
  if (!has_image()) {
    clear_content();
    set_has_image();
    content_.image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommentBox.image)
  return content_.image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartCommentBox::release_image() {
  // @@protoc_insertion_point(field_release:TideChartCommentBox.image)
  if (has_image()) {
    clear_has_content();
    return content_.image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartCommentBox::set_allocated_image(::std::string* image) {
  if (has_content()) {
    clear_content();
  }
  if (image != nullptr) {
    set_has_image();
    content_.image_.UnsafeSetDefault(image);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommentBox.image)
}

// string icon = 9;
inline bool TideChartCommentBox::has_icon() const {
  return content_case() == kIcon;
}
inline void TideChartCommentBox::set_has_icon() {
  _oneof_case_[0] = kIcon;
}
inline void TideChartCommentBox::clear_icon() {
  if (has_icon()) {
    content_.icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& TideChartCommentBox::icon() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.icon)
  if (has_icon()) {
    return content_.icon_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartCommentBox::set_icon(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartCommentBox.icon)
  if (!has_icon()) {
    clear_content();
    set_has_icon();
    content_.icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartCommentBox.icon)
}
#if LANG_CXX11
inline void TideChartCommentBox::set_icon(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartCommentBox.icon)
  if (!has_icon()) {
    clear_content();
    set_has_icon();
    content_.icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartCommentBox.icon)
}
#endif
inline void TideChartCommentBox::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_icon()) {
    clear_content();
    set_has_icon();
    content_.icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartCommentBox.icon)
}
inline void TideChartCommentBox::set_icon(const char* value, size_t size) {
  if (!has_icon()) {
    clear_content();
    set_has_icon();
    content_.icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartCommentBox.icon)
}
inline ::std::string* TideChartCommentBox::mutable_icon() {
  if (!has_icon()) {
    clear_content();
    set_has_icon();
    content_.icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommentBox.icon)
  return content_.icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartCommentBox::release_icon() {
  // @@protoc_insertion_point(field_release:TideChartCommentBox.icon)
  if (has_icon()) {
    clear_has_content();
    return content_.icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartCommentBox::set_allocated_icon(::std::string* icon) {
  if (has_content()) {
    clear_content();
  }
  if (icon != nullptr) {
    set_has_icon();
    content_.icon_.UnsafeSetDefault(icon);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartCommentBox.icon)
}

// double fontSize = 10;
inline void TideChartCommentBox::clear_fontsize() {
  fontsize_ = 0;
}
inline double TideChartCommentBox::fontsize() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.fontSize)
  return fontsize_;
}
inline void TideChartCommentBox::set_fontsize(double value) {
  
  fontsize_ = value;
  // @@protoc_insertion_point(field_set:TideChartCommentBox.fontSize)
}

// string fontStyle = 11;
inline void TideChartCommentBox::clear_fontstyle() {
  fontstyle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartCommentBox::fontstyle() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.fontStyle)
  return fontstyle_.GetNoArena();
}
inline void TideChartCommentBox::set_fontstyle(const ::std::string& value) {
  
  fontstyle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartCommentBox.fontStyle)
}
#if LANG_CXX11
inline void TideChartCommentBox::set_fontstyle(::std::string&& value) {
  
  fontstyle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartCommentBox.fontStyle)
}
#endif
inline void TideChartCommentBox::set_fontstyle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fontstyle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartCommentBox.fontStyle)
}
inline void TideChartCommentBox::set_fontstyle(const char* value, size_t size) {
  
  fontstyle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartCommentBox.fontStyle)
}
inline ::std::string* TideChartCommentBox::mutable_fontstyle() {
  
  // @@protoc_insertion_point(field_mutable:TideChartCommentBox.fontStyle)
  return fontstyle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartCommentBox::release_fontstyle() {
  // @@protoc_insertion_point(field_release:TideChartCommentBox.fontStyle)
  
  return fontstyle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartCommentBox::set_allocated_fontstyle(::std::string* fontstyle) {
  if (fontstyle != nullptr) {
    
  } else {
    
  }
  fontstyle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fontstyle);
  // @@protoc_insertion_point(field_set_allocated:TideChartCommentBox.fontStyle)
}

// repeated sint32 alignment = 12;
inline int TideChartCommentBox::alignment_size() const {
  return alignment_.size();
}
inline void TideChartCommentBox::clear_alignment() {
  alignment_.Clear();
}
inline ::google::protobuf::int32 TideChartCommentBox::alignment(int index) const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.alignment)
  return alignment_.Get(index);
}
inline void TideChartCommentBox::set_alignment(int index, ::google::protobuf::int32 value) {
  alignment_.Set(index, value);
  // @@protoc_insertion_point(field_set:TideChartCommentBox.alignment)
}
inline void TideChartCommentBox::add_alignment(::google::protobuf::int32 value) {
  alignment_.Add(value);
  // @@protoc_insertion_point(field_add:TideChartCommentBox.alignment)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TideChartCommentBox::alignment() const {
  // @@protoc_insertion_point(field_list:TideChartCommentBox.alignment)
  return alignment_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TideChartCommentBox::mutable_alignment() {
  // @@protoc_insertion_point(field_mutable_list:TideChartCommentBox.alignment)
  return &alignment_;
}

// int32 color = 13;
inline void TideChartCommentBox::clear_color() {
  color_ = 0;
}
inline ::google::protobuf::int32 TideChartCommentBox::color() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.color)
  return color_;
}
inline void TideChartCommentBox::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:TideChartCommentBox.color)
}

// int32 background = 14;
inline void TideChartCommentBox::clear_background() {
  background_ = 0;
}
inline ::google::protobuf::int32 TideChartCommentBox::background() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.background)
  return background_;
}
inline void TideChartCommentBox::set_background(::google::protobuf::int32 value) {
  
  background_ = value;
  // @@protoc_insertion_point(field_set:TideChartCommentBox.background)
}

// repeated int32 border = 15;
inline int TideChartCommentBox::border_size() const {
  return border_.size();
}
inline void TideChartCommentBox::clear_border() {
  border_.Clear();
}
inline ::google::protobuf::int32 TideChartCommentBox::border(int index) const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.border)
  return border_.Get(index);
}
inline void TideChartCommentBox::set_border(int index, ::google::protobuf::int32 value) {
  border_.Set(index, value);
  // @@protoc_insertion_point(field_set:TideChartCommentBox.border)
}
inline void TideChartCommentBox::add_border(::google::protobuf::int32 value) {
  border_.Add(value);
  // @@protoc_insertion_point(field_add:TideChartCommentBox.border)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TideChartCommentBox::border() const {
  // @@protoc_insertion_point(field_list:TideChartCommentBox.border)
  return border_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TideChartCommentBox::mutable_border() {
  // @@protoc_insertion_point(field_mutable_list:TideChartCommentBox.border)
  return &border_;
}

// bool isRaised = 16;
inline void TideChartCommentBox::clear_israised() {
  israised_ = false;
}
inline bool TideChartCommentBox::israised() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.isRaised)
  return israised_;
}
inline void TideChartCommentBox::set_israised(bool value) {
  
  israised_ = value;
  // @@protoc_insertion_point(field_set:TideChartCommentBox.isRaised)
}

// bool isReversed = 17;
inline void TideChartCommentBox::clear_isreversed() {
  isreversed_ = false;
}
inline bool TideChartCommentBox::isreversed() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBox.isReversed)
  return isreversed_;
}
inline void TideChartCommentBox::set_isreversed(bool value) {
  
  isreversed_ = value;
  // @@protoc_insertion_point(field_set:TideChartCommentBox.isReversed)
}

inline bool TideChartCommentBox::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void TideChartCommentBox::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline TideChartCommentBox::ContentCase TideChartCommentBox::content_case() const {
  return TideChartCommentBox::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TideChartWidget

// string id = 1;
inline void TideChartWidget::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartWidget::id() const {
  // @@protoc_insertion_point(field_get:TideChartWidget.id)
  return id_.GetNoArena();
}
inline void TideChartWidget::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartWidget.id)
}
#if LANG_CXX11
inline void TideChartWidget::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartWidget.id)
}
#endif
inline void TideChartWidget::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartWidget.id)
}
inline void TideChartWidget::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartWidget.id)
}
inline ::std::string* TideChartWidget::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TideChartWidget.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartWidget::release_id() {
  // @@protoc_insertion_point(field_release:TideChartWidget.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartWidget::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TideChartWidget.id)
}

// string type = 2;
inline void TideChartWidget::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartWidget::type() const {
  // @@protoc_insertion_point(field_get:TideChartWidget.type)
  return type_.GetNoArena();
}
inline void TideChartWidget::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartWidget.type)
}
#if LANG_CXX11
inline void TideChartWidget::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartWidget.type)
}
#endif
inline void TideChartWidget::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartWidget.type)
}
inline void TideChartWidget::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartWidget.type)
}
inline ::std::string* TideChartWidget::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:TideChartWidget.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartWidget::release_type() {
  // @@protoc_insertion_point(field_release:TideChartWidget.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartWidget::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:TideChartWidget.type)
}

// string title = 3;
inline void TideChartWidget::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartWidget::title() const {
  // @@protoc_insertion_point(field_get:TideChartWidget.title)
  return title_.GetNoArena();
}
inline void TideChartWidget::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartWidget.title)
}
#if LANG_CXX11
inline void TideChartWidget::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartWidget.title)
}
#endif
inline void TideChartWidget::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartWidget.title)
}
inline void TideChartWidget::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartWidget.title)
}
inline ::std::string* TideChartWidget::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:TideChartWidget.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartWidget::release_title() {
  // @@protoc_insertion_point(field_release:TideChartWidget.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartWidget::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:TideChartWidget.title)
}

// string region = 4;
inline void TideChartWidget::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartWidget::region() const {
  // @@protoc_insertion_point(field_get:TideChartWidget.region)
  return region_.GetNoArena();
}
inline void TideChartWidget::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartWidget.region)
}
#if LANG_CXX11
inline void TideChartWidget::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartWidget.region)
}
#endif
inline void TideChartWidget::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartWidget.region)
}
inline void TideChartWidget::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartWidget.region)
}
inline ::std::string* TideChartWidget::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:TideChartWidget.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartWidget::release_region() {
  // @@protoc_insertion_point(field_release:TideChartWidget.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartWidget::set_allocated_region(::std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:TideChartWidget.region)
}

// sint32 posX = 5;
inline void TideChartWidget::clear_posx() {
  posx_ = 0;
}
inline ::google::protobuf::int32 TideChartWidget::posx() const {
  // @@protoc_insertion_point(field_get:TideChartWidget.posX)
  return posx_;
}
inline void TideChartWidget::set_posx(::google::protobuf::int32 value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:TideChartWidget.posX)
}

// sint32 posY = 6;
inline void TideChartWidget::clear_posy() {
  posy_ = 0;
}
inline ::google::protobuf::int32 TideChartWidget::posy() const {
  // @@protoc_insertion_point(field_get:TideChartWidget.posY)
  return posy_;
}
inline void TideChartWidget::set_posy(::google::protobuf::int32 value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:TideChartWidget.posY)
}

// int32 width = 7;
inline void TideChartWidget::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 TideChartWidget::width() const {
  // @@protoc_insertion_point(field_get:TideChartWidget.width)
  return width_;
}
inline void TideChartWidget::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:TideChartWidget.width)
}

// int32 height = 8;
inline void TideChartWidget::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 TideChartWidget::height() const {
  // @@protoc_insertion_point(field_get:TideChartWidget.height)
  return height_;
}
inline void TideChartWidget::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:TideChartWidget.height)
}

// string link = 9;
inline bool TideChartWidget::has_link() const {
  return target_case() == kLink;
}
inline void TideChartWidget::set_has_link() {
  _oneof_case_[0] = kLink;
}
inline void TideChartWidget::clear_link() {
  if (has_link()) {
    target_.link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& TideChartWidget::link() const {
  // @@protoc_insertion_point(field_get:TideChartWidget.link)
  if (has_link()) {
    return target_.link_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartWidget::set_link(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartWidget.link)
  if (!has_link()) {
    clear_target();
    set_has_link();
    target_.link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartWidget.link)
}
#if LANG_CXX11
inline void TideChartWidget::set_link(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartWidget.link)
  if (!has_link()) {
    clear_target();
    set_has_link();
    target_.link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartWidget.link)
}
#endif
inline void TideChartWidget::set_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_link()) {
    clear_target();
    set_has_link();
    target_.link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartWidget.link)
}
inline void TideChartWidget::set_link(const char* value, size_t size) {
  if (!has_link()) {
    clear_target();
    set_has_link();
    target_.link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartWidget.link)
}
inline ::std::string* TideChartWidget::mutable_link() {
  if (!has_link()) {
    clear_target();
    set_has_link();
    target_.link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartWidget.link)
  return target_.link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartWidget::release_link() {
  // @@protoc_insertion_point(field_release:TideChartWidget.link)
  if (has_link()) {
    clear_has_target();
    return target_.link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartWidget::set_allocated_link(::std::string* link) {
  if (has_target()) {
    clear_target();
  }
  if (link != nullptr) {
    set_has_link();
    target_.link_.UnsafeSetDefault(link);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartWidget.link)
}

// string port = 10;
inline bool TideChartWidget::has_port() const {
  return target_case() == kPort;
}
inline void TideChartWidget::set_has_port() {
  _oneof_case_[0] = kPort;
}
inline void TideChartWidget::clear_port() {
  if (has_port()) {
    target_.port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& TideChartWidget::port() const {
  // @@protoc_insertion_point(field_get:TideChartWidget.port)
  if (has_port()) {
    return target_.port_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartWidget::set_port(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartWidget.port)
  if (!has_port()) {
    clear_target();
    set_has_port();
    target_.port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartWidget.port)
}
#if LANG_CXX11
inline void TideChartWidget::set_port(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartWidget.port)
  if (!has_port()) {
    clear_target();
    set_has_port();
    target_.port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartWidget.port)
}
#endif
inline void TideChartWidget::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_port()) {
    clear_target();
    set_has_port();
    target_.port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartWidget.port)
}
inline void TideChartWidget::set_port(const char* value, size_t size) {
  if (!has_port()) {
    clear_target();
    set_has_port();
    target_.port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartWidget.port)
}
inline ::std::string* TideChartWidget::mutable_port() {
  if (!has_port()) {
    clear_target();
    set_has_port();
    target_.port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartWidget.port)
  return target_.port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartWidget::release_port() {
  // @@protoc_insertion_point(field_release:TideChartWidget.port)
  if (has_port()) {
    clear_has_target();
    return target_.port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartWidget::set_allocated_port(::std::string* port) {
  if (has_target()) {
    clear_target();
  }
  if (port != nullptr) {
    set_has_port();
    target_.port_.UnsafeSetDefault(port);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartWidget.port)
}

// string node = 11;
inline bool TideChartWidget::has_node() const {
  return target_case() == kNode;
}
inline void TideChartWidget::set_has_node() {
  _oneof_case_[0] = kNode;
}
inline void TideChartWidget::clear_node() {
  if (has_node()) {
    target_.node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& TideChartWidget::node() const {
  // @@protoc_insertion_point(field_get:TideChartWidget.node)
  if (has_node()) {
    return target_.node_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartWidget::set_node(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartWidget.node)
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartWidget.node)
}
#if LANG_CXX11
inline void TideChartWidget::set_node(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartWidget.node)
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartWidget.node)
}
#endif
inline void TideChartWidget::set_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartWidget.node)
}
inline void TideChartWidget::set_node(const char* value, size_t size) {
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartWidget.node)
}
inline ::std::string* TideChartWidget::mutable_node() {
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartWidget.node)
  return target_.node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartWidget::release_node() {
  // @@protoc_insertion_point(field_release:TideChartWidget.node)
  if (has_node()) {
    clear_has_target();
    return target_.node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartWidget::set_allocated_node(::std::string* node) {
  if (has_target()) {
    clear_target();
  }
  if (node != nullptr) {
    set_has_node();
    target_.node_.UnsafeSetDefault(node);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartWidget.node)
}

// repeated .TideChartProperty props = 12;
inline int TideChartWidget::props_size() const {
  return props_.size();
}
inline void TideChartWidget::clear_props() {
  props_.Clear();
}
inline ::TideChartProperty* TideChartWidget::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartWidget.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartWidget::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:TideChartWidget.props)
  return &props_;
}
inline const ::TideChartProperty& TideChartWidget::props(int index) const {
  // @@protoc_insertion_point(field_get:TideChartWidget.props)
  return props_.Get(index);
}
inline ::TideChartProperty* TideChartWidget::add_props() {
  // @@protoc_insertion_point(field_add:TideChartWidget.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartWidget::props() const {
  // @@protoc_insertion_point(field_list:TideChartWidget.props)
  return props_;
}

// repeated .TideChartProperty settings = 22;
inline int TideChartWidget::settings_size() const {
  return settings_.size();
}
inline void TideChartWidget::clear_settings() {
  settings_.Clear();
}
inline ::TideChartProperty* TideChartWidget::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartWidget.settings)
  return settings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartWidget::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:TideChartWidget.settings)
  return &settings_;
}
inline const ::TideChartProperty& TideChartWidget::settings(int index) const {
  // @@protoc_insertion_point(field_get:TideChartWidget.settings)
  return settings_.Get(index);
}
inline ::TideChartProperty* TideChartWidget::add_settings() {
  // @@protoc_insertion_point(field_add:TideChartWidget.settings)
  return settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartWidget::settings() const {
  // @@protoc_insertion_point(field_list:TideChartWidget.settings)
  return settings_;
}

inline bool TideChartWidget::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void TideChartWidget::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline TideChartWidget::TargetCase TideChartWidget::target_case() const {
  return TideChartWidget::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TideChartPort

// string type = 1;
inline void TideChartPort::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartPort::type() const {
  // @@protoc_insertion_point(field_get:TideChartPort.type)
  return type_.GetNoArena();
}
inline void TideChartPort::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPort.type)
}
#if LANG_CXX11
inline void TideChartPort::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPort.type)
}
#endif
inline void TideChartPort::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPort.type)
}
inline void TideChartPort::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPort.type)
}
inline ::std::string* TideChartPort::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:TideChartPort.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPort::release_type() {
  // @@protoc_insertion_point(field_release:TideChartPort.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartPort::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:TideChartPort.type)
}

// string node = 2;
inline void TideChartPort::clear_node() {
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartPort::node() const {
  // @@protoc_insertion_point(field_get:TideChartPort.node)
  return node_.GetNoArena();
}
inline void TideChartPort::set_node(const ::std::string& value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPort.node)
}
#if LANG_CXX11
inline void TideChartPort::set_node(::std::string&& value) {
  
  node_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPort.node)
}
#endif
inline void TideChartPort::set_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPort.node)
}
inline void TideChartPort::set_node(const char* value, size_t size) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPort.node)
}
inline ::std::string* TideChartPort::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:TideChartPort.node)
  return node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPort::release_node() {
  // @@protoc_insertion_point(field_release:TideChartPort.node)
  
  return node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartPort::set_allocated_node(::std::string* node) {
  if (node != nullptr) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:TideChartPort.node)
}

// string name = 3;
inline void TideChartPort::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartPort::name() const {
  // @@protoc_insertion_point(field_get:TideChartPort.name)
  return name_.GetNoArena();
}
inline void TideChartPort::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPort.name)
}
#if LANG_CXX11
inline void TideChartPort::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPort.name)
}
#endif
inline void TideChartPort::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPort.name)
}
inline void TideChartPort::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPort.name)
}
inline ::std::string* TideChartPort::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TideChartPort.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPort::release_name() {
  // @@protoc_insertion_point(field_release:TideChartPort.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartPort::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TideChartPort.name)
}

// int32 ordinal = 4;
inline void TideChartPort::clear_ordinal() {
  ordinal_ = 0;
}
inline ::google::protobuf::int32 TideChartPort::ordinal() const {
  // @@protoc_insertion_point(field_get:TideChartPort.ordinal)
  return ordinal_;
}
inline void TideChartPort::set_ordinal(::google::protobuf::int32 value) {
  
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:TideChartPort.ordinal)
}

// bool isDefault = 5;
inline void TideChartPort::clear_isdefault() {
  isdefault_ = false;
}
inline bool TideChartPort::isdefault() const {
  // @@protoc_insertion_point(field_get:TideChartPort.isDefault)
  return isdefault_;
}
inline void TideChartPort::set_isdefault(bool value) {
  
  isdefault_ = value;
  // @@protoc_insertion_point(field_set:TideChartPort.isDefault)
}

// bool isRequired = 6;
inline void TideChartPort::clear_isrequired() {
  isrequired_ = false;
}
inline bool TideChartPort::isrequired() const {
  // @@protoc_insertion_point(field_get:TideChartPort.isRequired)
  return isrequired_;
}
inline void TideChartPort::set_isrequired(bool value) {
  
  isrequired_ = value;
  // @@protoc_insertion_point(field_set:TideChartPort.isRequired)
}

// repeated string allowed = 7;
inline int TideChartPort::allowed_size() const {
  return allowed_.size();
}
inline void TideChartPort::clear_allowed() {
  allowed_.Clear();
}
inline const ::std::string& TideChartPort::allowed(int index) const {
  // @@protoc_insertion_point(field_get:TideChartPort.allowed)
  return allowed_.Get(index);
}
inline ::std::string* TideChartPort::mutable_allowed(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartPort.allowed)
  return allowed_.Mutable(index);
}
inline void TideChartPort::set_allowed(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartPort.allowed)
  allowed_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TideChartPort::set_allowed(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartPort.allowed)
  allowed_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TideChartPort::set_allowed(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TideChartPort.allowed)
}
inline void TideChartPort::set_allowed(int index, const char* value, size_t size) {
  allowed_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TideChartPort.allowed)
}
inline ::std::string* TideChartPort::add_allowed() {
  // @@protoc_insertion_point(field_add_mutable:TideChartPort.allowed)
  return allowed_.Add();
}
inline void TideChartPort::add_allowed(const ::std::string& value) {
  allowed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TideChartPort.allowed)
}
#if LANG_CXX11
inline void TideChartPort::add_allowed(::std::string&& value) {
  allowed_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TideChartPort.allowed)
}
#endif
inline void TideChartPort::add_allowed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TideChartPort.allowed)
}
inline void TideChartPort::add_allowed(const char* value, size_t size) {
  allowed_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TideChartPort.allowed)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
TideChartPort::allowed() const {
  // @@protoc_insertion_point(field_list:TideChartPort.allowed)
  return allowed_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
TideChartPort::mutable_allowed() {
  // @@protoc_insertion_point(field_mutable_list:TideChartPort.allowed)
  return &allowed_;
}

// string hint = 8;
inline void TideChartPort::clear_hint() {
  hint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartPort::hint() const {
  // @@protoc_insertion_point(field_get:TideChartPort.hint)
  return hint_.GetNoArena();
}
inline void TideChartPort::set_hint(const ::std::string& value) {
  
  hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPort.hint)
}
#if LANG_CXX11
inline void TideChartPort::set_hint(::std::string&& value) {
  
  hint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPort.hint)
}
#endif
inline void TideChartPort::set_hint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPort.hint)
}
inline void TideChartPort::set_hint(const char* value, size_t size) {
  
  hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPort.hint)
}
inline ::std::string* TideChartPort::mutable_hint() {
  
  // @@protoc_insertion_point(field_mutable:TideChartPort.hint)
  return hint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPort::release_hint() {
  // @@protoc_insertion_point(field_release:TideChartPort.hint)
  
  return hint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartPort::set_allocated_hint(::std::string* hint) {
  if (hint != nullptr) {
    
  } else {
    
  }
  hint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hint);
  // @@protoc_insertion_point(field_set_allocated:TideChartPort.hint)
}

// string value = 9;
inline void TideChartPort::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartPort::value() const {
  // @@protoc_insertion_point(field_get:TideChartPort.value)
  return value_.GetNoArena();
}
inline void TideChartPort::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPort.value)
}
#if LANG_CXX11
inline void TideChartPort::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPort.value)
}
#endif
inline void TideChartPort::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPort.value)
}
inline void TideChartPort::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPort.value)
}
inline ::std::string* TideChartPort::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:TideChartPort.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPort::release_value() {
  // @@protoc_insertion_point(field_release:TideChartPort.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartPort::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:TideChartPort.value)
}

// string trigger = 10;
inline void TideChartPort::clear_trigger() {
  trigger_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartPort::trigger() const {
  // @@protoc_insertion_point(field_get:TideChartPort.trigger)
  return trigger_.GetNoArena();
}
inline void TideChartPort::set_trigger(const ::std::string& value) {
  
  trigger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPort.trigger)
}
#if LANG_CXX11
inline void TideChartPort::set_trigger(::std::string&& value) {
  
  trigger_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPort.trigger)
}
#endif
inline void TideChartPort::set_trigger(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trigger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPort.trigger)
}
inline void TideChartPort::set_trigger(const char* value, size_t size) {
  
  trigger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPort.trigger)
}
inline ::std::string* TideChartPort::mutable_trigger() {
  
  // @@protoc_insertion_point(field_mutable:TideChartPort.trigger)
  return trigger_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPort::release_trigger() {
  // @@protoc_insertion_point(field_release:TideChartPort.trigger)
  
  return trigger_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartPort::set_allocated_trigger(::std::string* trigger) {
  if (trigger != nullptr) {
    
  } else {
    
  }
  trigger_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger);
  // @@protoc_insertion_point(field_set_allocated:TideChartPort.trigger)
}

// string link = 11;
inline void TideChartPort::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartPort::link() const {
  // @@protoc_insertion_point(field_get:TideChartPort.link)
  return link_.GetNoArena();
}
inline void TideChartPort::set_link(const ::std::string& value) {
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPort.link)
}
#if LANG_CXX11
inline void TideChartPort::set_link(::std::string&& value) {
  
  link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPort.link)
}
#endif
inline void TideChartPort::set_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPort.link)
}
inline void TideChartPort::set_link(const char* value, size_t size) {
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPort.link)
}
inline ::std::string* TideChartPort::mutable_link() {
  
  // @@protoc_insertion_point(field_mutable:TideChartPort.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPort::release_link() {
  // @@protoc_insertion_point(field_release:TideChartPort.link)
  
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartPort::set_allocated_link(::std::string* link) {
  if (link != nullptr) {
    
  } else {
    
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:TideChartPort.link)
}

// string event = 12;
inline void TideChartPort::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartPort::event() const {
  // @@protoc_insertion_point(field_get:TideChartPort.event)
  return event_.GetNoArena();
}
inline void TideChartPort::set_event(const ::std::string& value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPort.event)
}
#if LANG_CXX11
inline void TideChartPort::set_event(::std::string&& value) {
  
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPort.event)
}
#endif
inline void TideChartPort::set_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPort.event)
}
inline void TideChartPort::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPort.event)
}
inline ::std::string* TideChartPort::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:TideChartPort.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPort::release_event() {
  // @@protoc_insertion_point(field_release:TideChartPort.event)
  
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartPort::set_allocated_event(::std::string* event) {
  if (event != nullptr) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:TideChartPort.event)
}

// string syncGroup = 13;
inline void TideChartPort::clear_syncgroup() {
  syncgroup_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartPort::syncgroup() const {
  // @@protoc_insertion_point(field_get:TideChartPort.syncGroup)
  return syncgroup_.GetNoArena();
}
inline void TideChartPort::set_syncgroup(const ::std::string& value) {
  
  syncgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPort.syncGroup)
}
#if LANG_CXX11
inline void TideChartPort::set_syncgroup(::std::string&& value) {
  
  syncgroup_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPort.syncGroup)
}
#endif
inline void TideChartPort::set_syncgroup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  syncgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPort.syncGroup)
}
inline void TideChartPort::set_syncgroup(const char* value, size_t size) {
  
  syncgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPort.syncGroup)
}
inline ::std::string* TideChartPort::mutable_syncgroup() {
  
  // @@protoc_insertion_point(field_mutable:TideChartPort.syncGroup)
  return syncgroup_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPort::release_syncgroup() {
  // @@protoc_insertion_point(field_release:TideChartPort.syncGroup)
  
  return syncgroup_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartPort::set_allocated_syncgroup(::std::string* syncgroup) {
  if (syncgroup != nullptr) {
    
  } else {
    
  }
  syncgroup_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), syncgroup);
  // @@protoc_insertion_point(field_set_allocated:TideChartPort.syncGroup)
}

// bool isBlocking = 14;
inline void TideChartPort::clear_isblocking() {
  isblocking_ = false;
}
inline bool TideChartPort::isblocking() const {
  // @@protoc_insertion_point(field_get:TideChartPort.isBlocking)
  return isblocking_;
}
inline void TideChartPort::set_isblocking(bool value) {
  
  isblocking_ = value;
  // @@protoc_insertion_point(field_set:TideChartPort.isBlocking)
}

// bool isQueuing = 15;
inline void TideChartPort::clear_isqueuing() {
  isqueuing_ = false;
}
inline bool TideChartPort::isqueuing() const {
  // @@protoc_insertion_point(field_get:TideChartPort.isQueuing)
  return isqueuing_;
}
inline void TideChartPort::set_isqueuing(bool value) {
  
  isqueuing_ = value;
  // @@protoc_insertion_point(field_set:TideChartPort.isQueuing)
}

// -------------------------------------------------------------------

// TideChartLink

// string outNode = 1;
inline void TideChartLink::clear_outnode() {
  outnode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLink::outnode() const {
  // @@protoc_insertion_point(field_get:TideChartLink.outNode)
  return outnode_.GetNoArena();
}
inline void TideChartLink::set_outnode(const ::std::string& value) {
  
  outnode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLink.outNode)
}
#if LANG_CXX11
inline void TideChartLink::set_outnode(::std::string&& value) {
  
  outnode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLink.outNode)
}
#endif
inline void TideChartLink::set_outnode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outnode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLink.outNode)
}
inline void TideChartLink::set_outnode(const char* value, size_t size) {
  
  outnode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLink.outNode)
}
inline ::std::string* TideChartLink::mutable_outnode() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLink.outNode)
  return outnode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLink::release_outnode() {
  // @@protoc_insertion_point(field_release:TideChartLink.outNode)
  
  return outnode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLink::set_allocated_outnode(::std::string* outnode) {
  if (outnode != nullptr) {
    
  } else {
    
  }
  outnode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outnode);
  // @@protoc_insertion_point(field_set_allocated:TideChartLink.outNode)
}

// string outPort = 2;
inline void TideChartLink::clear_outport() {
  outport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLink::outport() const {
  // @@protoc_insertion_point(field_get:TideChartLink.outPort)
  return outport_.GetNoArena();
}
inline void TideChartLink::set_outport(const ::std::string& value) {
  
  outport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLink.outPort)
}
#if LANG_CXX11
inline void TideChartLink::set_outport(::std::string&& value) {
  
  outport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLink.outPort)
}
#endif
inline void TideChartLink::set_outport(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLink.outPort)
}
inline void TideChartLink::set_outport(const char* value, size_t size) {
  
  outport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLink.outPort)
}
inline ::std::string* TideChartLink::mutable_outport() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLink.outPort)
  return outport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLink::release_outport() {
  // @@protoc_insertion_point(field_release:TideChartLink.outPort)
  
  return outport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLink::set_allocated_outport(::std::string* outport) {
  if (outport != nullptr) {
    
  } else {
    
  }
  outport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outport);
  // @@protoc_insertion_point(field_set_allocated:TideChartLink.outPort)
}

// string inNode = 3;
inline void TideChartLink::clear_innode() {
  innode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLink::innode() const {
  // @@protoc_insertion_point(field_get:TideChartLink.inNode)
  return innode_.GetNoArena();
}
inline void TideChartLink::set_innode(const ::std::string& value) {
  
  innode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLink.inNode)
}
#if LANG_CXX11
inline void TideChartLink::set_innode(::std::string&& value) {
  
  innode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLink.inNode)
}
#endif
inline void TideChartLink::set_innode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  innode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLink.inNode)
}
inline void TideChartLink::set_innode(const char* value, size_t size) {
  
  innode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLink.inNode)
}
inline ::std::string* TideChartLink::mutable_innode() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLink.inNode)
  return innode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLink::release_innode() {
  // @@protoc_insertion_point(field_release:TideChartLink.inNode)
  
  return innode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLink::set_allocated_innode(::std::string* innode) {
  if (innode != nullptr) {
    
  } else {
    
  }
  innode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), innode);
  // @@protoc_insertion_point(field_set_allocated:TideChartLink.inNode)
}

// string inPort = 4;
inline void TideChartLink::clear_inport() {
  inport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLink::inport() const {
  // @@protoc_insertion_point(field_get:TideChartLink.inPort)
  return inport_.GetNoArena();
}
inline void TideChartLink::set_inport(const ::std::string& value) {
  
  inport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLink.inPort)
}
#if LANG_CXX11
inline void TideChartLink::set_inport(::std::string&& value) {
  
  inport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLink.inPort)
}
#endif
inline void TideChartLink::set_inport(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLink.inPort)
}
inline void TideChartLink::set_inport(const char* value, size_t size) {
  
  inport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLink.inPort)
}
inline ::std::string* TideChartLink::mutable_inport() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLink.inPort)
  return inport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLink::release_inport() {
  // @@protoc_insertion_point(field_release:TideChartLink.inPort)
  
  return inport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLink::set_allocated_inport(::std::string* inport) {
  if (inport != nullptr) {
    
  } else {
    
  }
  inport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inport);
  // @@protoc_insertion_point(field_set_allocated:TideChartLink.inPort)
}

// int32 group = 5;
inline void TideChartLink::clear_group() {
  group_ = 0;
}
inline ::google::protobuf::int32 TideChartLink::group() const {
  // @@protoc_insertion_point(field_get:TideChartLink.group)
  return group_;
}
inline void TideChartLink::set_group(::google::protobuf::int32 value) {
  
  group_ = value;
  // @@protoc_insertion_point(field_set:TideChartLink.group)
}

// int32 delay = 6;
inline void TideChartLink::clear_delay() {
  delay_ = 0;
}
inline ::google::protobuf::int32 TideChartLink::delay() const {
  // @@protoc_insertion_point(field_get:TideChartLink.delay)
  return delay_;
}
inline void TideChartLink::set_delay(::google::protobuf::int32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:TideChartLink.delay)
}

// string link = 7;
inline void TideChartLink::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLink::link() const {
  // @@protoc_insertion_point(field_get:TideChartLink.link)
  return link_.GetNoArena();
}
inline void TideChartLink::set_link(const ::std::string& value) {
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLink.link)
}
#if LANG_CXX11
inline void TideChartLink::set_link(::std::string&& value) {
  
  link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLink.link)
}
#endif
inline void TideChartLink::set_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLink.link)
}
inline void TideChartLink::set_link(const char* value, size_t size) {
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLink.link)
}
inline ::std::string* TideChartLink::mutable_link() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLink.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLink::release_link() {
  // @@protoc_insertion_point(field_release:TideChartLink.link)
  
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLink::set_allocated_link(::std::string* link) {
  if (link != nullptr) {
    
  } else {
    
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:TideChartLink.link)
}

// bool isLogging = 16;
inline void TideChartLink::clear_islogging() {
  islogging_ = false;
}
inline bool TideChartLink::islogging() const {
  // @@protoc_insertion_point(field_get:TideChartLink.isLogging)
  return islogging_;
}
inline void TideChartLink::set_islogging(bool value) {
  
  islogging_ = value;
  // @@protoc_insertion_point(field_set:TideChartLink.isLogging)
}

// bool isDebugging = 17;
inline void TideChartLink::clear_isdebugging() {
  isdebugging_ = false;
}
inline bool TideChartLink::isdebugging() const {
  // @@protoc_insertion_point(field_get:TideChartLink.isDebugging)
  return isdebugging_;
}
inline void TideChartLink::set_isdebugging(bool value) {
  
  isdebugging_ = value;
  // @@protoc_insertion_point(field_set:TideChartLink.isDebugging)
}

// bool isPaused = 18;
inline void TideChartLink::clear_ispaused() {
  ispaused_ = false;
}
inline bool TideChartLink::ispaused() const {
  // @@protoc_insertion_point(field_get:TideChartLink.isPaused)
  return ispaused_;
}
inline void TideChartLink::set_ispaused(bool value) {
  
  ispaused_ = value;
  // @@protoc_insertion_point(field_set:TideChartLink.isPaused)
}

// bool isDisabled = 19;
inline void TideChartLink::clear_isdisabled() {
  isdisabled_ = false;
}
inline bool TideChartLink::isdisabled() const {
  // @@protoc_insertion_point(field_get:TideChartLink.isDisabled)
  return isdisabled_;
}
inline void TideChartLink::set_isdisabled(bool value) {
  
  isdisabled_ = value;
  // @@protoc_insertion_point(field_set:TideChartLink.isDisabled)
}

// -------------------------------------------------------------------

// TideChartNote

// string id = 1;
inline void TideChartNote::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNote::id() const {
  // @@protoc_insertion_point(field_get:TideChartNote.id)
  return id_.GetNoArena();
}
inline void TideChartNote::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNote.id)
}
#if LANG_CXX11
inline void TideChartNote::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNote.id)
}
#endif
inline void TideChartNote::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNote.id)
}
inline void TideChartNote::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNote.id)
}
inline ::std::string* TideChartNote::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNote.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNote::release_id() {
  // @@protoc_insertion_point(field_release:TideChartNote.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNote::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TideChartNote.id)
}

// string replyTo = 2;
inline void TideChartNote::clear_replyto() {
  replyto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNote::replyto() const {
  // @@protoc_insertion_point(field_get:TideChartNote.replyTo)
  return replyto_.GetNoArena();
}
inline void TideChartNote::set_replyto(const ::std::string& value) {
  
  replyto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNote.replyTo)
}
#if LANG_CXX11
inline void TideChartNote::set_replyto(::std::string&& value) {
  
  replyto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNote.replyTo)
}
#endif
inline void TideChartNote::set_replyto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  replyto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNote.replyTo)
}
inline void TideChartNote::set_replyto(const char* value, size_t size) {
  
  replyto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNote.replyTo)
}
inline ::std::string* TideChartNote::mutable_replyto() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNote.replyTo)
  return replyto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNote::release_replyto() {
  // @@protoc_insertion_point(field_release:TideChartNote.replyTo)
  
  return replyto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNote::set_allocated_replyto(::std::string* replyto) {
  if (replyto != nullptr) {
    
  } else {
    
  }
  replyto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replyto);
  // @@protoc_insertion_point(field_set_allocated:TideChartNote.replyTo)
}

// string changeTo = 3;
inline void TideChartNote::clear_changeto() {
  changeto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNote::changeto() const {
  // @@protoc_insertion_point(field_get:TideChartNote.changeTo)
  return changeto_.GetNoArena();
}
inline void TideChartNote::set_changeto(const ::std::string& value) {
  
  changeto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNote.changeTo)
}
#if LANG_CXX11
inline void TideChartNote::set_changeto(::std::string&& value) {
  
  changeto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNote.changeTo)
}
#endif
inline void TideChartNote::set_changeto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  changeto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNote.changeTo)
}
inline void TideChartNote::set_changeto(const char* value, size_t size) {
  
  changeto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNote.changeTo)
}
inline ::std::string* TideChartNote::mutable_changeto() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNote.changeTo)
  return changeto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNote::release_changeto() {
  // @@protoc_insertion_point(field_release:TideChartNote.changeTo)
  
  return changeto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNote::set_allocated_changeto(::std::string* changeto) {
  if (changeto != nullptr) {
    
  } else {
    
  }
  changeto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), changeto);
  // @@protoc_insertion_point(field_set_allocated:TideChartNote.changeTo)
}

// string content = 4;
inline void TideChartNote::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNote::content() const {
  // @@protoc_insertion_point(field_get:TideChartNote.content)
  return content_.GetNoArena();
}
inline void TideChartNote::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNote.content)
}
#if LANG_CXX11
inline void TideChartNote::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNote.content)
}
#endif
inline void TideChartNote::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNote.content)
}
inline void TideChartNote::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNote.content)
}
inline ::std::string* TideChartNote::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNote.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNote::release_content() {
  // @@protoc_insertion_point(field_release:TideChartNote.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNote::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:TideChartNote.content)
}

// string createdBy = 5;
inline void TideChartNote::clear_createdby() {
  createdby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNote::createdby() const {
  // @@protoc_insertion_point(field_get:TideChartNote.createdBy)
  return createdby_.GetNoArena();
}
inline void TideChartNote::set_createdby(const ::std::string& value) {
  
  createdby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNote.createdBy)
}
#if LANG_CXX11
inline void TideChartNote::set_createdby(::std::string&& value) {
  
  createdby_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNote.createdBy)
}
#endif
inline void TideChartNote::set_createdby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNote.createdBy)
}
inline void TideChartNote::set_createdby(const char* value, size_t size) {
  
  createdby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNote.createdBy)
}
inline ::std::string* TideChartNote::mutable_createdby() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNote.createdBy)
  return createdby_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNote::release_createdby() {
  // @@protoc_insertion_point(field_release:TideChartNote.createdBy)
  
  return createdby_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNote::set_allocated_createdby(::std::string* createdby) {
  if (createdby != nullptr) {
    
  } else {
    
  }
  createdby_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdby);
  // @@protoc_insertion_point(field_set_allocated:TideChartNote.createdBy)
}

// string createdDate = 6;
inline void TideChartNote::clear_createddate() {
  createddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNote::createddate() const {
  // @@protoc_insertion_point(field_get:TideChartNote.createdDate)
  return createddate_.GetNoArena();
}
inline void TideChartNote::set_createddate(const ::std::string& value) {
  
  createddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNote.createdDate)
}
#if LANG_CXX11
inline void TideChartNote::set_createddate(::std::string&& value) {
  
  createddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNote.createdDate)
}
#endif
inline void TideChartNote::set_createddate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNote.createdDate)
}
inline void TideChartNote::set_createddate(const char* value, size_t size) {
  
  createddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNote.createdDate)
}
inline ::std::string* TideChartNote::mutable_createddate() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNote.createdDate)
  return createddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNote::release_createddate() {
  // @@protoc_insertion_point(field_release:TideChartNote.createdDate)
  
  return createddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNote::set_allocated_createddate(::std::string* createddate) {
  if (createddate != nullptr) {
    
  } else {
    
  }
  createddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createddate);
  // @@protoc_insertion_point(field_set_allocated:TideChartNote.createdDate)
}

// -------------------------------------------------------------------

// TideChartNode

// string name = 1;
inline void TideChartNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNode::name() const {
  // @@protoc_insertion_point(field_get:TideChartNode.name)
  return name_.GetNoArena();
}
inline void TideChartNode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNode.name)
}
#if LANG_CXX11
inline void TideChartNode::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNode.name)
}
#endif
inline void TideChartNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNode.name)
}
inline void TideChartNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNode.name)
}
inline ::std::string* TideChartNode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNode::release_name() {
  // @@protoc_insertion_point(field_release:TideChartNode.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNode::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TideChartNode.name)
}

// string type = 2;
inline void TideChartNode::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNode::type() const {
  // @@protoc_insertion_point(field_get:TideChartNode.type)
  return type_.GetNoArena();
}
inline void TideChartNode::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNode.type)
}
#if LANG_CXX11
inline void TideChartNode::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNode.type)
}
#endif
inline void TideChartNode::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNode.type)
}
inline void TideChartNode::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNode.type)
}
inline ::std::string* TideChartNode::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNode.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNode::release_type() {
  // @@protoc_insertion_point(field_release:TideChartNode.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNode::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:TideChartNode.type)
}

// sint32 posX = 3;
inline void TideChartNode::clear_posx() {
  posx_ = 0;
}
inline ::google::protobuf::int32 TideChartNode::posx() const {
  // @@protoc_insertion_point(field_get:TideChartNode.posX)
  return posx_;
}
inline void TideChartNode::set_posx(::google::protobuf::int32 value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:TideChartNode.posX)
}

// sint32 posY = 4;
inline void TideChartNode::clear_posy() {
  posy_ = 0;
}
inline ::google::protobuf::int32 TideChartNode::posy() const {
  // @@protoc_insertion_point(field_get:TideChartNode.posY)
  return posy_;
}
inline void TideChartNode::set_posy(::google::protobuf::int32 value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:TideChartNode.posY)
}

// string title = 5;
inline void TideChartNode::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNode::title() const {
  // @@protoc_insertion_point(field_get:TideChartNode.title)
  return title_.GetNoArena();
}
inline void TideChartNode::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNode.title)
}
#if LANG_CXX11
inline void TideChartNode::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNode.title)
}
#endif
inline void TideChartNode::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNode.title)
}
inline void TideChartNode::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNode.title)
}
inline ::std::string* TideChartNode::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNode.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNode::release_title() {
  // @@protoc_insertion_point(field_release:TideChartNode.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNode::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:TideChartNode.title)
}

// string icon = 6;
inline void TideChartNode::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNode::icon() const {
  // @@protoc_insertion_point(field_get:TideChartNode.icon)
  return icon_.GetNoArena();
}
inline void TideChartNode::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNode.icon)
}
#if LANG_CXX11
inline void TideChartNode::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNode.icon)
}
#endif
inline void TideChartNode::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNode.icon)
}
inline void TideChartNode::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNode.icon)
}
inline ::std::string* TideChartNode::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNode.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNode::release_icon() {
  // @@protoc_insertion_point(field_release:TideChartNode.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNode::set_allocated_icon(::std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:TideChartNode.icon)
}

// string library = 7;
inline void TideChartNode::clear_library() {
  library_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNode::library() const {
  // @@protoc_insertion_point(field_get:TideChartNode.library)
  return library_.GetNoArena();
}
inline void TideChartNode::set_library(const ::std::string& value) {
  
  library_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNode.library)
}
#if LANG_CXX11
inline void TideChartNode::set_library(::std::string&& value) {
  
  library_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNode.library)
}
#endif
inline void TideChartNode::set_library(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  library_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNode.library)
}
inline void TideChartNode::set_library(const char* value, size_t size) {
  
  library_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNode.library)
}
inline ::std::string* TideChartNode::mutable_library() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNode.library)
  return library_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNode::release_library() {
  // @@protoc_insertion_point(field_release:TideChartNode.library)
  
  return library_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNode::set_allocated_library(::std::string* library) {
  if (library != nullptr) {
    
  } else {
    
  }
  library_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), library);
  // @@protoc_insertion_point(field_set_allocated:TideChartNode.library)
}

// string method = 8;
inline void TideChartNode::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNode::method() const {
  // @@protoc_insertion_point(field_get:TideChartNode.method)
  return method_.GetNoArena();
}
inline void TideChartNode::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNode.method)
}
#if LANG_CXX11
inline void TideChartNode::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNode.method)
}
#endif
inline void TideChartNode::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNode.method)
}
inline void TideChartNode::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNode.method)
}
inline ::std::string* TideChartNode::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNode.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNode::release_method() {
  // @@protoc_insertion_point(field_release:TideChartNode.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNode::set_allocated_method(::std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:TideChartNode.method)
}

// int32 delay = 9;
inline void TideChartNode::clear_delay() {
  delay_ = 0;
}
inline ::google::protobuf::int32 TideChartNode::delay() const {
  // @@protoc_insertion_point(field_get:TideChartNode.delay)
  return delay_;
}
inline void TideChartNode::set_delay(::google::protobuf::int32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:TideChartNode.delay)
}

// repeated .TideChartPort inports = 10;
inline int TideChartNode::inports_size() const {
  return inports_.size();
}
inline void TideChartNode::clear_inports() {
  inports_.Clear();
}
inline ::TideChartPort* TideChartNode::mutable_inports(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartNode.inports)
  return inports_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartPort >*
TideChartNode::mutable_inports() {
  // @@protoc_insertion_point(field_mutable_list:TideChartNode.inports)
  return &inports_;
}
inline const ::TideChartPort& TideChartNode::inports(int index) const {
  // @@protoc_insertion_point(field_get:TideChartNode.inports)
  return inports_.Get(index);
}
inline ::TideChartPort* TideChartNode::add_inports() {
  // @@protoc_insertion_point(field_add:TideChartNode.inports)
  return inports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartPort >&
TideChartNode::inports() const {
  // @@protoc_insertion_point(field_list:TideChartNode.inports)
  return inports_;
}

// repeated .TideChartPort outports = 11;
inline int TideChartNode::outports_size() const {
  return outports_.size();
}
inline void TideChartNode::clear_outports() {
  outports_.Clear();
}
inline ::TideChartPort* TideChartNode::mutable_outports(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartNode.outports)
  return outports_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartPort >*
TideChartNode::mutable_outports() {
  // @@protoc_insertion_point(field_mutable_list:TideChartNode.outports)
  return &outports_;
}
inline const ::TideChartPort& TideChartNode::outports(int index) const {
  // @@protoc_insertion_point(field_get:TideChartNode.outports)
  return outports_.Get(index);
}
inline ::TideChartPort* TideChartNode::add_outports() {
  // @@protoc_insertion_point(field_add:TideChartNode.outports)
  return outports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartPort >&
TideChartNode::outports() const {
  // @@protoc_insertion_point(field_list:TideChartNode.outports)
  return outports_;
}

// repeated .TideChartProperty props = 12;
inline int TideChartNode::props_size() const {
  return props_.size();
}
inline void TideChartNode::clear_props() {
  props_.Clear();
}
inline ::TideChartProperty* TideChartNode::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartNode.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartNode::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:TideChartNode.props)
  return &props_;
}
inline const ::TideChartProperty& TideChartNode::props(int index) const {
  // @@protoc_insertion_point(field_get:TideChartNode.props)
  return props_.Get(index);
}
inline ::TideChartProperty* TideChartNode::add_props() {
  // @@protoc_insertion_point(field_add:TideChartNode.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartNode::props() const {
  // @@protoc_insertion_point(field_list:TideChartNode.props)
  return props_;
}

// bool isLogging = 16;
inline void TideChartNode::clear_islogging() {
  islogging_ = false;
}
inline bool TideChartNode::islogging() const {
  // @@protoc_insertion_point(field_get:TideChartNode.isLogging)
  return islogging_;
}
inline void TideChartNode::set_islogging(bool value) {
  
  islogging_ = value;
  // @@protoc_insertion_point(field_set:TideChartNode.isLogging)
}

// bool isDebugging = 17;
inline void TideChartNode::clear_isdebugging() {
  isdebugging_ = false;
}
inline bool TideChartNode::isdebugging() const {
  // @@protoc_insertion_point(field_get:TideChartNode.isDebugging)
  return isdebugging_;
}
inline void TideChartNode::set_isdebugging(bool value) {
  
  isdebugging_ = value;
  // @@protoc_insertion_point(field_set:TideChartNode.isDebugging)
}

// bool isPaused = 18;
inline void TideChartNode::clear_ispaused() {
  ispaused_ = false;
}
inline bool TideChartNode::ispaused() const {
  // @@protoc_insertion_point(field_get:TideChartNode.isPaused)
  return ispaused_;
}
inline void TideChartNode::set_ispaused(bool value) {
  
  ispaused_ = value;
  // @@protoc_insertion_point(field_set:TideChartNode.isPaused)
}

// bool isDisabled = 19;
inline void TideChartNode::clear_isdisabled() {
  isdisabled_ = false;
}
inline bool TideChartNode::isdisabled() const {
  // @@protoc_insertion_point(field_get:TideChartNode.isDisabled)
  return isdisabled_;
}
inline void TideChartNode::set_isdisabled(bool value) {
  
  isdisabled_ = value;
  // @@protoc_insertion_point(field_set:TideChartNode.isDisabled)
}

// repeated .TideChartNote notes = 20;
inline int TideChartNode::notes_size() const {
  return notes_.size();
}
inline void TideChartNode::clear_notes() {
  notes_.Clear();
}
inline ::TideChartNote* TideChartNode::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartNode.notes)
  return notes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartNote >*
TideChartNode::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:TideChartNode.notes)
  return &notes_;
}
inline const ::TideChartNote& TideChartNode::notes(int index) const {
  // @@protoc_insertion_point(field_get:TideChartNode.notes)
  return notes_.Get(index);
}
inline ::TideChartNote* TideChartNode::add_notes() {
  // @@protoc_insertion_point(field_add:TideChartNode.notes)
  return notes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartNote >&
TideChartNode::notes() const {
  // @@protoc_insertion_point(field_list:TideChartNode.notes)
  return notes_;
}

// string script = 21;
inline void TideChartNode::clear_script() {
  script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartNode::script() const {
  // @@protoc_insertion_point(field_get:TideChartNode.script)
  return script_.GetNoArena();
}
inline void TideChartNode::set_script(const ::std::string& value) {
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNode.script)
}
#if LANG_CXX11
inline void TideChartNode::set_script(::std::string&& value) {
  
  script_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNode.script)
}
#endif
inline void TideChartNode::set_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNode.script)
}
inline void TideChartNode::set_script(const char* value, size_t size) {
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNode.script)
}
inline ::std::string* TideChartNode::mutable_script() {
  
  // @@protoc_insertion_point(field_mutable:TideChartNode.script)
  return script_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNode::release_script() {
  // @@protoc_insertion_point(field_release:TideChartNode.script)
  
  return script_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartNode::set_allocated_script(::std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script);
  // @@protoc_insertion_point(field_set_allocated:TideChartNode.script)
}

// repeated .TideChartProperty settings = 22;
inline int TideChartNode::settings_size() const {
  return settings_.size();
}
inline void TideChartNode::clear_settings() {
  settings_.Clear();
}
inline ::TideChartProperty* TideChartNode::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartNode.settings)
  return settings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartNode::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:TideChartNode.settings)
  return &settings_;
}
inline const ::TideChartProperty& TideChartNode::settings(int index) const {
  // @@protoc_insertion_point(field_get:TideChartNode.settings)
  return settings_.Get(index);
}
inline ::TideChartProperty* TideChartNode::add_settings() {
  // @@protoc_insertion_point(field_add:TideChartNode.settings)
  return settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartNode::settings() const {
  // @@protoc_insertion_point(field_list:TideChartNode.settings)
  return settings_;
}

// -------------------------------------------------------------------

// TideChartRegion

// string name = 1;
inline void TideChartRegion::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartRegion::name() const {
  // @@protoc_insertion_point(field_get:TideChartRegion.name)
  return name_.GetNoArena();
}
inline void TideChartRegion::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartRegion.name)
}
#if LANG_CXX11
inline void TideChartRegion::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartRegion.name)
}
#endif
inline void TideChartRegion::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartRegion.name)
}
inline void TideChartRegion::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartRegion.name)
}
inline ::std::string* TideChartRegion::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TideChartRegion.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartRegion::release_name() {
  // @@protoc_insertion_point(field_release:TideChartRegion.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartRegion::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TideChartRegion.name)
}

// string title = 2;
inline void TideChartRegion::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartRegion::title() const {
  // @@protoc_insertion_point(field_get:TideChartRegion.title)
  return title_.GetNoArena();
}
inline void TideChartRegion::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartRegion.title)
}
#if LANG_CXX11
inline void TideChartRegion::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartRegion.title)
}
#endif
inline void TideChartRegion::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartRegion.title)
}
inline void TideChartRegion::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartRegion.title)
}
inline ::std::string* TideChartRegion::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:TideChartRegion.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartRegion::release_title() {
  // @@protoc_insertion_point(field_release:TideChartRegion.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartRegion::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:TideChartRegion.title)
}

// repeated string nodes = 3;
inline int TideChartRegion::nodes_size() const {
  return nodes_.size();
}
inline void TideChartRegion::clear_nodes() {
  nodes_.Clear();
}
inline const ::std::string& TideChartRegion::nodes(int index) const {
  // @@protoc_insertion_point(field_get:TideChartRegion.nodes)
  return nodes_.Get(index);
}
inline ::std::string* TideChartRegion::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartRegion.nodes)
  return nodes_.Mutable(index);
}
inline void TideChartRegion::set_nodes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartRegion.nodes)
  nodes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TideChartRegion::set_nodes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartRegion.nodes)
  nodes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TideChartRegion::set_nodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TideChartRegion.nodes)
}
inline void TideChartRegion::set_nodes(int index, const char* value, size_t size) {
  nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TideChartRegion.nodes)
}
inline ::std::string* TideChartRegion::add_nodes() {
  // @@protoc_insertion_point(field_add_mutable:TideChartRegion.nodes)
  return nodes_.Add();
}
inline void TideChartRegion::add_nodes(const ::std::string& value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TideChartRegion.nodes)
}
#if LANG_CXX11
inline void TideChartRegion::add_nodes(::std::string&& value) {
  nodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TideChartRegion.nodes)
}
#endif
inline void TideChartRegion::add_nodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TideChartRegion.nodes)
}
inline void TideChartRegion::add_nodes(const char* value, size_t size) {
  nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TideChartRegion.nodes)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
TideChartRegion::nodes() const {
  // @@protoc_insertion_point(field_list:TideChartRegion.nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
TideChartRegion::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:TideChartRegion.nodes)
  return &nodes_;
}

// int32 group = 4;
inline void TideChartRegion::clear_group() {
  group_ = 0;
}
inline ::google::protobuf::int32 TideChartRegion::group() const {
  // @@protoc_insertion_point(field_get:TideChartRegion.group)
  return group_;
}
inline void TideChartRegion::set_group(::google::protobuf::int32 value) {
  
  group_ = value;
  // @@protoc_insertion_point(field_set:TideChartRegion.group)
}

// string scope = 5;
inline void TideChartRegion::clear_scope() {
  scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartRegion::scope() const {
  // @@protoc_insertion_point(field_get:TideChartRegion.scope)
  return scope_.GetNoArena();
}
inline void TideChartRegion::set_scope(const ::std::string& value) {
  
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartRegion.scope)
}
#if LANG_CXX11
inline void TideChartRegion::set_scope(::std::string&& value) {
  
  scope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartRegion.scope)
}
#endif
inline void TideChartRegion::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartRegion.scope)
}
inline void TideChartRegion::set_scope(const char* value, size_t size) {
  
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartRegion.scope)
}
inline ::std::string* TideChartRegion::mutable_scope() {
  
  // @@protoc_insertion_point(field_mutable:TideChartRegion.scope)
  return scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartRegion::release_scope() {
  // @@protoc_insertion_point(field_release:TideChartRegion.scope)
  
  return scope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartRegion::set_allocated_scope(::std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:TideChartRegion.scope)
}

// repeated .TideChartProperty props = 6;
inline int TideChartRegion::props_size() const {
  return props_.size();
}
inline void TideChartRegion::clear_props() {
  props_.Clear();
}
inline ::TideChartProperty* TideChartRegion::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartRegion.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartRegion::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:TideChartRegion.props)
  return &props_;
}
inline const ::TideChartProperty& TideChartRegion::props(int index) const {
  // @@protoc_insertion_point(field_get:TideChartRegion.props)
  return props_.Get(index);
}
inline ::TideChartProperty* TideChartRegion::add_props() {
  // @@protoc_insertion_point(field_add:TideChartRegion.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartRegion::props() const {
  // @@protoc_insertion_point(field_list:TideChartRegion.props)
  return props_;
}

// bool isLogging = 16;
inline void TideChartRegion::clear_islogging() {
  islogging_ = false;
}
inline bool TideChartRegion::islogging() const {
  // @@protoc_insertion_point(field_get:TideChartRegion.isLogging)
  return islogging_;
}
inline void TideChartRegion::set_islogging(bool value) {
  
  islogging_ = value;
  // @@protoc_insertion_point(field_set:TideChartRegion.isLogging)
}

// bool isDebugging = 17;
inline void TideChartRegion::clear_isdebugging() {
  isdebugging_ = false;
}
inline bool TideChartRegion::isdebugging() const {
  // @@protoc_insertion_point(field_get:TideChartRegion.isDebugging)
  return isdebugging_;
}
inline void TideChartRegion::set_isdebugging(bool value) {
  
  isdebugging_ = value;
  // @@protoc_insertion_point(field_set:TideChartRegion.isDebugging)
}

// bool isPaused = 18;
inline void TideChartRegion::clear_ispaused() {
  ispaused_ = false;
}
inline bool TideChartRegion::ispaused() const {
  // @@protoc_insertion_point(field_get:TideChartRegion.isPaused)
  return ispaused_;
}
inline void TideChartRegion::set_ispaused(bool value) {
  
  ispaused_ = value;
  // @@protoc_insertion_point(field_set:TideChartRegion.isPaused)
}

// bool isDisabled = 19;
inline void TideChartRegion::clear_isdisabled() {
  isdisabled_ = false;
}
inline bool TideChartRegion::isdisabled() const {
  // @@protoc_insertion_point(field_get:TideChartRegion.isDisabled)
  return isdisabled_;
}
inline void TideChartRegion::set_isdisabled(bool value) {
  
  isdisabled_ = value;
  // @@protoc_insertion_point(field_set:TideChartRegion.isDisabled)
}

// repeated .TideChartNote notes = 20;
inline int TideChartRegion::notes_size() const {
  return notes_.size();
}
inline void TideChartRegion::clear_notes() {
  notes_.Clear();
}
inline ::TideChartNote* TideChartRegion::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartRegion.notes)
  return notes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartNote >*
TideChartRegion::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:TideChartRegion.notes)
  return &notes_;
}
inline const ::TideChartNote& TideChartRegion::notes(int index) const {
  // @@protoc_insertion_point(field_get:TideChartRegion.notes)
  return notes_.Get(index);
}
inline ::TideChartNote* TideChartRegion::add_notes() {
  // @@protoc_insertion_point(field_add:TideChartRegion.notes)
  return notes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartNote >&
TideChartRegion::notes() const {
  // @@protoc_insertion_point(field_list:TideChartRegion.notes)
  return notes_;
}

// string script = 21;
inline void TideChartRegion::clear_script() {
  script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartRegion::script() const {
  // @@protoc_insertion_point(field_get:TideChartRegion.script)
  return script_.GetNoArena();
}
inline void TideChartRegion::set_script(const ::std::string& value) {
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartRegion.script)
}
#if LANG_CXX11
inline void TideChartRegion::set_script(::std::string&& value) {
  
  script_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartRegion.script)
}
#endif
inline void TideChartRegion::set_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartRegion.script)
}
inline void TideChartRegion::set_script(const char* value, size_t size) {
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartRegion.script)
}
inline ::std::string* TideChartRegion::mutable_script() {
  
  // @@protoc_insertion_point(field_mutable:TideChartRegion.script)
  return script_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartRegion::release_script() {
  // @@protoc_insertion_point(field_release:TideChartRegion.script)
  
  return script_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartRegion::set_allocated_script(::std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script);
  // @@protoc_insertion_point(field_set_allocated:TideChartRegion.script)
}

// repeated .TideChartProperty settings = 22;
inline int TideChartRegion::settings_size() const {
  return settings_.size();
}
inline void TideChartRegion::clear_settings() {
  settings_.Clear();
}
inline ::TideChartProperty* TideChartRegion::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartRegion.settings)
  return settings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartRegion::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:TideChartRegion.settings)
  return &settings_;
}
inline const ::TideChartProperty& TideChartRegion::settings(int index) const {
  // @@protoc_insertion_point(field_get:TideChartRegion.settings)
  return settings_.Get(index);
}
inline ::TideChartProperty* TideChartRegion::add_settings() {
  // @@protoc_insertion_point(field_add:TideChartRegion.settings)
  return settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartRegion::settings() const {
  // @@protoc_insertion_point(field_list:TideChartRegion.settings)
  return settings_;
}

// -------------------------------------------------------------------

// TideChartGraph

// string id = 1;
inline void TideChartGraph::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartGraph::id() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.id)
  return id_.GetNoArena();
}
inline void TideChartGraph::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartGraph.id)
}
#if LANG_CXX11
inline void TideChartGraph::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartGraph.id)
}
#endif
inline void TideChartGraph::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartGraph.id)
}
inline void TideChartGraph::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartGraph.id)
}
inline ::std::string* TideChartGraph::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TideChartGraph.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartGraph::release_id() {
  // @@protoc_insertion_point(field_release:TideChartGraph.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartGraph::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TideChartGraph.id)
}

// string type = 2;
inline void TideChartGraph::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartGraph::type() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.type)
  return type_.GetNoArena();
}
inline void TideChartGraph::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartGraph.type)
}
#if LANG_CXX11
inline void TideChartGraph::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartGraph.type)
}
#endif
inline void TideChartGraph::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartGraph.type)
}
inline void TideChartGraph::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartGraph.type)
}
inline ::std::string* TideChartGraph::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:TideChartGraph.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartGraph::release_type() {
  // @@protoc_insertion_point(field_release:TideChartGraph.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartGraph::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:TideChartGraph.type)
}

// string name = 3;
inline void TideChartGraph::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartGraph::name() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.name)
  return name_.GetNoArena();
}
inline void TideChartGraph::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartGraph.name)
}
#if LANG_CXX11
inline void TideChartGraph::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartGraph.name)
}
#endif
inline void TideChartGraph::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartGraph.name)
}
inline void TideChartGraph::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartGraph.name)
}
inline ::std::string* TideChartGraph::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TideChartGraph.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartGraph::release_name() {
  // @@protoc_insertion_point(field_release:TideChartGraph.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartGraph::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TideChartGraph.name)
}

// string title = 4;
inline void TideChartGraph::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartGraph::title() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.title)
  return title_.GetNoArena();
}
inline void TideChartGraph::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartGraph.title)
}
#if LANG_CXX11
inline void TideChartGraph::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartGraph.title)
}
#endif
inline void TideChartGraph::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartGraph.title)
}
inline void TideChartGraph::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartGraph.title)
}
inline ::std::string* TideChartGraph::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:TideChartGraph.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartGraph::release_title() {
  // @@protoc_insertion_point(field_release:TideChartGraph.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartGraph::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:TideChartGraph.title)
}

// string icon = 5;
inline void TideChartGraph::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartGraph::icon() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.icon)
  return icon_.GetNoArena();
}
inline void TideChartGraph::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartGraph.icon)
}
#if LANG_CXX11
inline void TideChartGraph::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartGraph.icon)
}
#endif
inline void TideChartGraph::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartGraph.icon)
}
inline void TideChartGraph::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartGraph.icon)
}
inline ::std::string* TideChartGraph::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:TideChartGraph.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartGraph::release_icon() {
  // @@protoc_insertion_point(field_release:TideChartGraph.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartGraph::set_allocated_icon(::std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:TideChartGraph.icon)
}

// string version = 6;
inline void TideChartGraph::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartGraph::version() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.version)
  return version_.GetNoArena();
}
inline void TideChartGraph::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartGraph.version)
}
#if LANG_CXX11
inline void TideChartGraph::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartGraph.version)
}
#endif
inline void TideChartGraph::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartGraph.version)
}
inline void TideChartGraph::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartGraph.version)
}
inline ::std::string* TideChartGraph::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:TideChartGraph.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartGraph::release_version() {
  // @@protoc_insertion_point(field_release:TideChartGraph.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartGraph::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TideChartGraph.version)
}

// string source = 7;
inline void TideChartGraph::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartGraph::source() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.source)
  return source_.GetNoArena();
}
inline void TideChartGraph::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartGraph.source)
}
#if LANG_CXX11
inline void TideChartGraph::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartGraph.source)
}
#endif
inline void TideChartGraph::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartGraph.source)
}
inline void TideChartGraph::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartGraph.source)
}
inline ::std::string* TideChartGraph::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:TideChartGraph.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartGraph::release_source() {
  // @@protoc_insertion_point(field_release:TideChartGraph.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartGraph::set_allocated_source(::std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:TideChartGraph.source)
}

// repeated .TideChartNode nodes = 8;
inline int TideChartGraph::nodes_size() const {
  return nodes_.size();
}
inline void TideChartGraph::clear_nodes() {
  nodes_.Clear();
}
inline ::TideChartNode* TideChartGraph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartGraph.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartNode >*
TideChartGraph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:TideChartGraph.nodes)
  return &nodes_;
}
inline const ::TideChartNode& TideChartGraph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:TideChartGraph.nodes)
  return nodes_.Get(index);
}
inline ::TideChartNode* TideChartGraph::add_nodes() {
  // @@protoc_insertion_point(field_add:TideChartGraph.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartNode >&
TideChartGraph::nodes() const {
  // @@protoc_insertion_point(field_list:TideChartGraph.nodes)
  return nodes_;
}

// repeated .TideChartLink links = 9;
inline int TideChartGraph::links_size() const {
  return links_.size();
}
inline void TideChartGraph::clear_links() {
  links_.Clear();
}
inline ::TideChartLink* TideChartGraph::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartGraph.links)
  return links_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartLink >*
TideChartGraph::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:TideChartGraph.links)
  return &links_;
}
inline const ::TideChartLink& TideChartGraph::links(int index) const {
  // @@protoc_insertion_point(field_get:TideChartGraph.links)
  return links_.Get(index);
}
inline ::TideChartLink* TideChartGraph::add_links() {
  // @@protoc_insertion_point(field_add:TideChartGraph.links)
  return links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartLink >&
TideChartGraph::links() const {
  // @@protoc_insertion_point(field_list:TideChartGraph.links)
  return links_;
}

// repeated .TideChartRegion regions = 10;
inline int TideChartGraph::regions_size() const {
  return regions_.size();
}
inline void TideChartGraph::clear_regions() {
  regions_.Clear();
}
inline ::TideChartRegion* TideChartGraph::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartGraph.regions)
  return regions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartRegion >*
TideChartGraph::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:TideChartGraph.regions)
  return &regions_;
}
inline const ::TideChartRegion& TideChartGraph::regions(int index) const {
  // @@protoc_insertion_point(field_get:TideChartGraph.regions)
  return regions_.Get(index);
}
inline ::TideChartRegion* TideChartGraph::add_regions() {
  // @@protoc_insertion_point(field_add:TideChartGraph.regions)
  return regions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartRegion >&
TideChartGraph::regions() const {
  // @@protoc_insertion_point(field_list:TideChartGraph.regions)
  return regions_;
}

// repeated .TideChartCommentBox comments = 11;
inline int TideChartGraph::comments_size() const {
  return comments_.size();
}
inline void TideChartGraph::clear_comments() {
  comments_.Clear();
}
inline ::TideChartCommentBox* TideChartGraph::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartGraph.comments)
  return comments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartCommentBox >*
TideChartGraph::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:TideChartGraph.comments)
  return &comments_;
}
inline const ::TideChartCommentBox& TideChartGraph::comments(int index) const {
  // @@protoc_insertion_point(field_get:TideChartGraph.comments)
  return comments_.Get(index);
}
inline ::TideChartCommentBox* TideChartGraph::add_comments() {
  // @@protoc_insertion_point(field_add:TideChartGraph.comments)
  return comments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartCommentBox >&
TideChartGraph::comments() const {
  // @@protoc_insertion_point(field_list:TideChartGraph.comments)
  return comments_;
}

// repeated .TideChartWidget widgets = 12;
inline int TideChartGraph::widgets_size() const {
  return widgets_.size();
}
inline void TideChartGraph::clear_widgets() {
  widgets_.Clear();
}
inline ::TideChartWidget* TideChartGraph::mutable_widgets(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartGraph.widgets)
  return widgets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartWidget >*
TideChartGraph::mutable_widgets() {
  // @@protoc_insertion_point(field_mutable_list:TideChartGraph.widgets)
  return &widgets_;
}
inline const ::TideChartWidget& TideChartGraph::widgets(int index) const {
  // @@protoc_insertion_point(field_get:TideChartGraph.widgets)
  return widgets_.Get(index);
}
inline ::TideChartWidget* TideChartGraph::add_widgets() {
  // @@protoc_insertion_point(field_add:TideChartGraph.widgets)
  return widgets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartWidget >&
TideChartGraph::widgets() const {
  // @@protoc_insertion_point(field_list:TideChartGraph.widgets)
  return widgets_;
}

// repeated .TideChartProperty props = 13;
inline int TideChartGraph::props_size() const {
  return props_.size();
}
inline void TideChartGraph::clear_props() {
  props_.Clear();
}
inline ::TideChartProperty* TideChartGraph::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartGraph.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartGraph::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:TideChartGraph.props)
  return &props_;
}
inline const ::TideChartProperty& TideChartGraph::props(int index) const {
  // @@protoc_insertion_point(field_get:TideChartGraph.props)
  return props_.Get(index);
}
inline ::TideChartProperty* TideChartGraph::add_props() {
  // @@protoc_insertion_point(field_add:TideChartGraph.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartGraph::props() const {
  // @@protoc_insertion_point(field_list:TideChartGraph.props)
  return props_;
}

// repeated .TideChartCommand history = 14;
inline int TideChartGraph::history_size() const {
  return history_.size();
}
inline void TideChartGraph::clear_history() {
  history_.Clear();
}
inline ::TideChartCommand* TideChartGraph::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartGraph.history)
  return history_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartCommand >*
TideChartGraph::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:TideChartGraph.history)
  return &history_;
}
inline const ::TideChartCommand& TideChartGraph::history(int index) const {
  // @@protoc_insertion_point(field_get:TideChartGraph.history)
  return history_.Get(index);
}
inline ::TideChartCommand* TideChartGraph::add_history() {
  // @@protoc_insertion_point(field_add:TideChartGraph.history)
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartCommand >&
TideChartGraph::history() const {
  // @@protoc_insertion_point(field_list:TideChartGraph.history)
  return history_;
}

// bool isLogging = 16;
inline void TideChartGraph::clear_islogging() {
  islogging_ = false;
}
inline bool TideChartGraph::islogging() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.isLogging)
  return islogging_;
}
inline void TideChartGraph::set_islogging(bool value) {
  
  islogging_ = value;
  // @@protoc_insertion_point(field_set:TideChartGraph.isLogging)
}

// bool isDebugging = 17;
inline void TideChartGraph::clear_isdebugging() {
  isdebugging_ = false;
}
inline bool TideChartGraph::isdebugging() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.isDebugging)
  return isdebugging_;
}
inline void TideChartGraph::set_isdebugging(bool value) {
  
  isdebugging_ = value;
  // @@protoc_insertion_point(field_set:TideChartGraph.isDebugging)
}

// bool isPaused = 18;
inline void TideChartGraph::clear_ispaused() {
  ispaused_ = false;
}
inline bool TideChartGraph::ispaused() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.isPaused)
  return ispaused_;
}
inline void TideChartGraph::set_ispaused(bool value) {
  
  ispaused_ = value;
  // @@protoc_insertion_point(field_set:TideChartGraph.isPaused)
}

// bool isDisabled = 19;
inline void TideChartGraph::clear_isdisabled() {
  isdisabled_ = false;
}
inline bool TideChartGraph::isdisabled() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.isDisabled)
  return isdisabled_;
}
inline void TideChartGraph::set_isdisabled(bool value) {
  
  isdisabled_ = value;
  // @@protoc_insertion_point(field_set:TideChartGraph.isDisabled)
}

// repeated .TideChartNote notes = 20;
inline int TideChartGraph::notes_size() const {
  return notes_.size();
}
inline void TideChartGraph::clear_notes() {
  notes_.Clear();
}
inline ::TideChartNote* TideChartGraph::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartGraph.notes)
  return notes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartNote >*
TideChartGraph::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:TideChartGraph.notes)
  return &notes_;
}
inline const ::TideChartNote& TideChartGraph::notes(int index) const {
  // @@protoc_insertion_point(field_get:TideChartGraph.notes)
  return notes_.Get(index);
}
inline ::TideChartNote* TideChartGraph::add_notes() {
  // @@protoc_insertion_point(field_add:TideChartGraph.notes)
  return notes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartNote >&
TideChartGraph::notes() const {
  // @@protoc_insertion_point(field_list:TideChartGraph.notes)
  return notes_;
}

// string script = 21;
inline void TideChartGraph::clear_script() {
  script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartGraph::script() const {
  // @@protoc_insertion_point(field_get:TideChartGraph.script)
  return script_.GetNoArena();
}
inline void TideChartGraph::set_script(const ::std::string& value) {
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartGraph.script)
}
#if LANG_CXX11
inline void TideChartGraph::set_script(::std::string&& value) {
  
  script_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartGraph.script)
}
#endif
inline void TideChartGraph::set_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartGraph.script)
}
inline void TideChartGraph::set_script(const char* value, size_t size) {
  
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartGraph.script)
}
inline ::std::string* TideChartGraph::mutable_script() {
  
  // @@protoc_insertion_point(field_mutable:TideChartGraph.script)
  return script_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartGraph::release_script() {
  // @@protoc_insertion_point(field_release:TideChartGraph.script)
  
  return script_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartGraph::set_allocated_script(::std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script);
  // @@protoc_insertion_point(field_set_allocated:TideChartGraph.script)
}

// repeated .TideChartProperty settings = 22;
inline int TideChartGraph::settings_size() const {
  return settings_.size();
}
inline void TideChartGraph::clear_settings() {
  settings_.Clear();
}
inline ::TideChartProperty* TideChartGraph::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartGraph.settings)
  return settings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartGraph::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:TideChartGraph.settings)
  return &settings_;
}
inline const ::TideChartProperty& TideChartGraph::settings(int index) const {
  // @@protoc_insertion_point(field_get:TideChartGraph.settings)
  return settings_.Get(index);
}
inline ::TideChartProperty* TideChartGraph::add_settings() {
  // @@protoc_insertion_point(field_add:TideChartGraph.settings)
  return settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartGraph::settings() const {
  // @@protoc_insertion_point(field_list:TideChartGraph.settings)
  return settings_;
}

// -------------------------------------------------------------------

// TideChartCommand

// string version = 1;
inline void TideChartCommand::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartCommand::version() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.version)
  return version_.GetNoArena();
}
inline void TideChartCommand::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartCommand.version)
}
#if LANG_CXX11
inline void TideChartCommand::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartCommand.version)
}
#endif
inline void TideChartCommand::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartCommand.version)
}
inline void TideChartCommand::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartCommand.version)
}
inline ::std::string* TideChartCommand::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:TideChartCommand.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartCommand::release_version() {
  // @@protoc_insertion_point(field_release:TideChartCommand.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartCommand::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.version)
}

// string target = 2;
inline void TideChartCommand::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartCommand::target() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.target)
  return target_.GetNoArena();
}
inline void TideChartCommand::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartCommand.target)
}
#if LANG_CXX11
inline void TideChartCommand::set_target(::std::string&& value) {
  
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartCommand.target)
}
#endif
inline void TideChartCommand::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartCommand.target)
}
inline void TideChartCommand::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartCommand.target)
}
inline ::std::string* TideChartCommand::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:TideChartCommand.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartCommand::release_target() {
  // @@protoc_insertion_point(field_release:TideChartCommand.target)
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartCommand::set_allocated_target(::std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:TideChartCommand.target)
}

// .TideChartGroupCommand group = 3;
inline bool TideChartCommand::has_group() const {
  return command_case() == kGroup;
}
inline void TideChartCommand::set_has_group() {
  _oneof_case_[0] = kGroup;
}
inline void TideChartCommand::clear_group() {
  if (has_group()) {
    delete command_.group_;
    clear_has_command();
  }
}
inline ::TideChartGroupCommand* TideChartCommand::release_group() {
  // @@protoc_insertion_point(field_release:TideChartCommand.group)
  if (has_group()) {
    clear_has_command();
      ::TideChartGroupCommand* temp = command_.group_;
    command_.group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TideChartGroupCommand& TideChartCommand::group() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.group)
  return has_group()
      ? *command_.group_
      : *reinterpret_cast< ::TideChartGroupCommand*>(&::_TideChartGroupCommand_default_instance_);
}
inline ::TideChartGroupCommand* TideChartCommand::mutable_group() {
  if (!has_group()) {
    clear_command();
    set_has_group();
    command_.group_ = CreateMaybeMessage< ::TideChartGroupCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommand.group)
  return command_.group_;
}

// .TideChartMoveCommand move = 4;
inline bool TideChartCommand::has_move() const {
  return command_case() == kMove;
}
inline void TideChartCommand::set_has_move() {
  _oneof_case_[0] = kMove;
}
inline void TideChartCommand::clear_move() {
  if (has_move()) {
    delete command_.move_;
    clear_has_command();
  }
}
inline ::TideChartMoveCommand* TideChartCommand::release_move() {
  // @@protoc_insertion_point(field_release:TideChartCommand.move)
  if (has_move()) {
    clear_has_command();
      ::TideChartMoveCommand* temp = command_.move_;
    command_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TideChartMoveCommand& TideChartCommand::move() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.move)
  return has_move()
      ? *command_.move_
      : *reinterpret_cast< ::TideChartMoveCommand*>(&::_TideChartMoveCommand_default_instance_);
}
inline ::TideChartMoveCommand* TideChartCommand::mutable_move() {
  if (!has_move()) {
    clear_command();
    set_has_move();
    command_.move_ = CreateMaybeMessage< ::TideChartMoveCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommand.move)
  return command_.move_;
}

// .TideChartCommentBoxCommand comment = 5;
inline bool TideChartCommand::has_comment() const {
  return command_case() == kComment;
}
inline void TideChartCommand::set_has_comment() {
  _oneof_case_[0] = kComment;
}
inline void TideChartCommand::clear_comment() {
  if (has_comment()) {
    delete command_.comment_;
    clear_has_command();
  }
}
inline ::TideChartCommentBoxCommand* TideChartCommand::release_comment() {
  // @@protoc_insertion_point(field_release:TideChartCommand.comment)
  if (has_comment()) {
    clear_has_command();
      ::TideChartCommentBoxCommand* temp = command_.comment_;
    command_.comment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TideChartCommentBoxCommand& TideChartCommand::comment() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.comment)
  return has_comment()
      ? *command_.comment_
      : *reinterpret_cast< ::TideChartCommentBoxCommand*>(&::_TideChartCommentBoxCommand_default_instance_);
}
inline ::TideChartCommentBoxCommand* TideChartCommand::mutable_comment() {
  if (!has_comment()) {
    clear_command();
    set_has_comment();
    command_.comment_ = CreateMaybeMessage< ::TideChartCommentBoxCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommand.comment)
  return command_.comment_;
}

// .TideChartWidgetCommand widget = 6;
inline bool TideChartCommand::has_widget() const {
  return command_case() == kWidget;
}
inline void TideChartCommand::set_has_widget() {
  _oneof_case_[0] = kWidget;
}
inline void TideChartCommand::clear_widget() {
  if (has_widget()) {
    delete command_.widget_;
    clear_has_command();
  }
}
inline ::TideChartWidgetCommand* TideChartCommand::release_widget() {
  // @@protoc_insertion_point(field_release:TideChartCommand.widget)
  if (has_widget()) {
    clear_has_command();
      ::TideChartWidgetCommand* temp = command_.widget_;
    command_.widget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TideChartWidgetCommand& TideChartCommand::widget() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.widget)
  return has_widget()
      ? *command_.widget_
      : *reinterpret_cast< ::TideChartWidgetCommand*>(&::_TideChartWidgetCommand_default_instance_);
}
inline ::TideChartWidgetCommand* TideChartCommand::mutable_widget() {
  if (!has_widget()) {
    clear_command();
    set_has_widget();
    command_.widget_ = CreateMaybeMessage< ::TideChartWidgetCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommand.widget)
  return command_.widget_;
}

// .TideChartPortCommand port = 7;
inline bool TideChartCommand::has_port() const {
  return command_case() == kPort;
}
inline void TideChartCommand::set_has_port() {
  _oneof_case_[0] = kPort;
}
inline void TideChartCommand::clear_port() {
  if (has_port()) {
    delete command_.port_;
    clear_has_command();
  }
}
inline ::TideChartPortCommand* TideChartCommand::release_port() {
  // @@protoc_insertion_point(field_release:TideChartCommand.port)
  if (has_port()) {
    clear_has_command();
      ::TideChartPortCommand* temp = command_.port_;
    command_.port_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TideChartPortCommand& TideChartCommand::port() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.port)
  return has_port()
      ? *command_.port_
      : *reinterpret_cast< ::TideChartPortCommand*>(&::_TideChartPortCommand_default_instance_);
}
inline ::TideChartPortCommand* TideChartCommand::mutable_port() {
  if (!has_port()) {
    clear_command();
    set_has_port();
    command_.port_ = CreateMaybeMessage< ::TideChartPortCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommand.port)
  return command_.port_;
}

// .TideChartLinkCommand link = 8;
inline bool TideChartCommand::has_link() const {
  return command_case() == kLink;
}
inline void TideChartCommand::set_has_link() {
  _oneof_case_[0] = kLink;
}
inline void TideChartCommand::clear_link() {
  if (has_link()) {
    delete command_.link_;
    clear_has_command();
  }
}
inline ::TideChartLinkCommand* TideChartCommand::release_link() {
  // @@protoc_insertion_point(field_release:TideChartCommand.link)
  if (has_link()) {
    clear_has_command();
      ::TideChartLinkCommand* temp = command_.link_;
    command_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TideChartLinkCommand& TideChartCommand::link() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.link)
  return has_link()
      ? *command_.link_
      : *reinterpret_cast< ::TideChartLinkCommand*>(&::_TideChartLinkCommand_default_instance_);
}
inline ::TideChartLinkCommand* TideChartCommand::mutable_link() {
  if (!has_link()) {
    clear_command();
    set_has_link();
    command_.link_ = CreateMaybeMessage< ::TideChartLinkCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommand.link)
  return command_.link_;
}

// .TideChartNodeCommand node = 9;
inline bool TideChartCommand::has_node() const {
  return command_case() == kNode;
}
inline void TideChartCommand::set_has_node() {
  _oneof_case_[0] = kNode;
}
inline void TideChartCommand::clear_node() {
  if (has_node()) {
    delete command_.node_;
    clear_has_command();
  }
}
inline ::TideChartNodeCommand* TideChartCommand::release_node() {
  // @@protoc_insertion_point(field_release:TideChartCommand.node)
  if (has_node()) {
    clear_has_command();
      ::TideChartNodeCommand* temp = command_.node_;
    command_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TideChartNodeCommand& TideChartCommand::node() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.node)
  return has_node()
      ? *command_.node_
      : *reinterpret_cast< ::TideChartNodeCommand*>(&::_TideChartNodeCommand_default_instance_);
}
inline ::TideChartNodeCommand* TideChartCommand::mutable_node() {
  if (!has_node()) {
    clear_command();
    set_has_node();
    command_.node_ = CreateMaybeMessage< ::TideChartNodeCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommand.node)
  return command_.node_;
}

// .TideChartRegionCommand region = 10;
inline bool TideChartCommand::has_region() const {
  return command_case() == kRegion;
}
inline void TideChartCommand::set_has_region() {
  _oneof_case_[0] = kRegion;
}
inline void TideChartCommand::clear_region() {
  if (has_region()) {
    delete command_.region_;
    clear_has_command();
  }
}
inline ::TideChartRegionCommand* TideChartCommand::release_region() {
  // @@protoc_insertion_point(field_release:TideChartCommand.region)
  if (has_region()) {
    clear_has_command();
      ::TideChartRegionCommand* temp = command_.region_;
    command_.region_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TideChartRegionCommand& TideChartCommand::region() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.region)
  return has_region()
      ? *command_.region_
      : *reinterpret_cast< ::TideChartRegionCommand*>(&::_TideChartRegionCommand_default_instance_);
}
inline ::TideChartRegionCommand* TideChartCommand::mutable_region() {
  if (!has_region()) {
    clear_command();
    set_has_region();
    command_.region_ = CreateMaybeMessage< ::TideChartRegionCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommand.region)
  return command_.region_;
}

// .TideChartGraphCommand graph = 11;
inline bool TideChartCommand::has_graph() const {
  return command_case() == kGraph;
}
inline void TideChartCommand::set_has_graph() {
  _oneof_case_[0] = kGraph;
}
inline void TideChartCommand::clear_graph() {
  if (has_graph()) {
    delete command_.graph_;
    clear_has_command();
  }
}
inline ::TideChartGraphCommand* TideChartCommand::release_graph() {
  // @@protoc_insertion_point(field_release:TideChartCommand.graph)
  if (has_graph()) {
    clear_has_command();
      ::TideChartGraphCommand* temp = command_.graph_;
    command_.graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TideChartGraphCommand& TideChartCommand::graph() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.graph)
  return has_graph()
      ? *command_.graph_
      : *reinterpret_cast< ::TideChartGraphCommand*>(&::_TideChartGraphCommand_default_instance_);
}
inline ::TideChartGraphCommand* TideChartCommand::mutable_graph() {
  if (!has_graph()) {
    clear_command();
    set_has_graph();
    command_.graph_ = CreateMaybeMessage< ::TideChartGraphCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommand.graph)
  return command_.graph_;
}

// .TideChartPropertyCommand props = 12;
inline bool TideChartCommand::has_props() const {
  return command_case() == kProps;
}
inline void TideChartCommand::set_has_props() {
  _oneof_case_[0] = kProps;
}
inline void TideChartCommand::clear_props() {
  if (has_props()) {
    delete command_.props_;
    clear_has_command();
  }
}
inline ::TideChartPropertyCommand* TideChartCommand::release_props() {
  // @@protoc_insertion_point(field_release:TideChartCommand.props)
  if (has_props()) {
    clear_has_command();
      ::TideChartPropertyCommand* temp = command_.props_;
    command_.props_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TideChartPropertyCommand& TideChartCommand::props() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.props)
  return has_props()
      ? *command_.props_
      : *reinterpret_cast< ::TideChartPropertyCommand*>(&::_TideChartPropertyCommand_default_instance_);
}
inline ::TideChartPropertyCommand* TideChartCommand::mutable_props() {
  if (!has_props()) {
    clear_command();
    set_has_props();
    command_.props_ = CreateMaybeMessage< ::TideChartPropertyCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommand.props)
  return command_.props_;
}

// .TideChartNoteCommand note = 13;
inline bool TideChartCommand::has_note() const {
  return command_case() == kNote;
}
inline void TideChartCommand::set_has_note() {
  _oneof_case_[0] = kNote;
}
inline void TideChartCommand::clear_note() {
  if (has_note()) {
    delete command_.note_;
    clear_has_command();
  }
}
inline ::TideChartNoteCommand* TideChartCommand::release_note() {
  // @@protoc_insertion_point(field_release:TideChartCommand.note)
  if (has_note()) {
    clear_has_command();
      ::TideChartNoteCommand* temp = command_.note_;
    command_.note_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TideChartNoteCommand& TideChartCommand::note() const {
  // @@protoc_insertion_point(field_get:TideChartCommand.note)
  return has_note()
      ? *command_.note_
      : *reinterpret_cast< ::TideChartNoteCommand*>(&::_TideChartNoteCommand_default_instance_);
}
inline ::TideChartNoteCommand* TideChartCommand::mutable_note() {
  if (!has_note()) {
    clear_command();
    set_has_note();
    command_.note_ = CreateMaybeMessage< ::TideChartNoteCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommand.note)
  return command_.note_;
}

inline bool TideChartCommand::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void TideChartCommand::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline TideChartCommand::CommandCase TideChartCommand::command_case() const {
  return TideChartCommand::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TideChartGroupCommand

// repeated .TideChartCommand commands = 1;
inline int TideChartGroupCommand::commands_size() const {
  return commands_.size();
}
inline void TideChartGroupCommand::clear_commands() {
  commands_.Clear();
}
inline ::TideChartCommand* TideChartGroupCommand::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartGroupCommand.commands)
  return commands_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartCommand >*
TideChartGroupCommand::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:TideChartGroupCommand.commands)
  return &commands_;
}
inline const ::TideChartCommand& TideChartGroupCommand::commands(int index) const {
  // @@protoc_insertion_point(field_get:TideChartGroupCommand.commands)
  return commands_.Get(index);
}
inline ::TideChartCommand* TideChartGroupCommand::add_commands() {
  // @@protoc_insertion_point(field_add:TideChartGroupCommand.commands)
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartCommand >&
TideChartGroupCommand::commands() const {
  // @@protoc_insertion_point(field_list:TideChartGroupCommand.commands)
  return commands_;
}

// -------------------------------------------------------------------

// TideChartMoveCommand

// string node = 1;
inline void TideChartMoveCommand::clear_node() {
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartMoveCommand::node() const {
  // @@protoc_insertion_point(field_get:TideChartMoveCommand.node)
  return node_.GetNoArena();
}
inline void TideChartMoveCommand::set_node(const ::std::string& value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartMoveCommand.node)
}
#if LANG_CXX11
inline void TideChartMoveCommand::set_node(::std::string&& value) {
  
  node_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartMoveCommand.node)
}
#endif
inline void TideChartMoveCommand::set_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartMoveCommand.node)
}
inline void TideChartMoveCommand::set_node(const char* value, size_t size) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartMoveCommand.node)
}
inline ::std::string* TideChartMoveCommand::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:TideChartMoveCommand.node)
  return node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartMoveCommand::release_node() {
  // @@protoc_insertion_point(field_release:TideChartMoveCommand.node)
  
  return node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartMoveCommand::set_allocated_node(::std::string* node) {
  if (node != nullptr) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:TideChartMoveCommand.node)
}

// sint32 fromPosX = 2;
inline void TideChartMoveCommand::clear_fromposx() {
  fromposx_ = 0;
}
inline ::google::protobuf::int32 TideChartMoveCommand::fromposx() const {
  // @@protoc_insertion_point(field_get:TideChartMoveCommand.fromPosX)
  return fromposx_;
}
inline void TideChartMoveCommand::set_fromposx(::google::protobuf::int32 value) {
  
  fromposx_ = value;
  // @@protoc_insertion_point(field_set:TideChartMoveCommand.fromPosX)
}

// sint32 fromPosY = 3;
inline void TideChartMoveCommand::clear_fromposy() {
  fromposy_ = 0;
}
inline ::google::protobuf::int32 TideChartMoveCommand::fromposy() const {
  // @@protoc_insertion_point(field_get:TideChartMoveCommand.fromPosY)
  return fromposy_;
}
inline void TideChartMoveCommand::set_fromposy(::google::protobuf::int32 value) {
  
  fromposy_ = value;
  // @@protoc_insertion_point(field_set:TideChartMoveCommand.fromPosY)
}

// sint32 toPosX = 4;
inline void TideChartMoveCommand::clear_toposx() {
  toposx_ = 0;
}
inline ::google::protobuf::int32 TideChartMoveCommand::toposx() const {
  // @@protoc_insertion_point(field_get:TideChartMoveCommand.toPosX)
  return toposx_;
}
inline void TideChartMoveCommand::set_toposx(::google::protobuf::int32 value) {
  
  toposx_ = value;
  // @@protoc_insertion_point(field_set:TideChartMoveCommand.toPosX)
}

// sint32 toPosY = 5;
inline void TideChartMoveCommand::clear_toposy() {
  toposy_ = 0;
}
inline ::google::protobuf::int32 TideChartMoveCommand::toposy() const {
  // @@protoc_insertion_point(field_get:TideChartMoveCommand.toPosY)
  return toposy_;
}
inline void TideChartMoveCommand::set_toposy(::google::protobuf::int32 value) {
  
  toposy_ = value;
  // @@protoc_insertion_point(field_set:TideChartMoveCommand.toPosY)
}

// -------------------------------------------------------------------

// TideChartCommentBoxCommand

// .TideChartCommentBox fromComment = 1;
inline bool TideChartCommentBoxCommand::has_fromcomment() const {
  return this != internal_default_instance() && fromcomment_ != nullptr;
}
inline void TideChartCommentBoxCommand::clear_fromcomment() {
  if (GetArenaNoVirtual() == nullptr && fromcomment_ != nullptr) {
    delete fromcomment_;
  }
  fromcomment_ = nullptr;
}
inline const ::TideChartCommentBox& TideChartCommentBoxCommand::fromcomment() const {
  const ::TideChartCommentBox* p = fromcomment_;
  // @@protoc_insertion_point(field_get:TideChartCommentBoxCommand.fromComment)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartCommentBox*>(
      &::_TideChartCommentBox_default_instance_);
}
inline ::TideChartCommentBox* TideChartCommentBoxCommand::release_fromcomment() {
  // @@protoc_insertion_point(field_release:TideChartCommentBoxCommand.fromComment)
  
  ::TideChartCommentBox* temp = fromcomment_;
  fromcomment_ = nullptr;
  return temp;
}
inline ::TideChartCommentBox* TideChartCommentBoxCommand::mutable_fromcomment() {
  
  if (fromcomment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartCommentBox>(GetArenaNoVirtual());
    fromcomment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommentBoxCommand.fromComment)
  return fromcomment_;
}
inline void TideChartCommentBoxCommand::set_allocated_fromcomment(::TideChartCommentBox* fromcomment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fromcomment_;
  }
  if (fromcomment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fromcomment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fromcomment, submessage_arena);
    }
    
  } else {
    
  }
  fromcomment_ = fromcomment;
  // @@protoc_insertion_point(field_set_allocated:TideChartCommentBoxCommand.fromComment)
}

// .TideChartCommentBox toComment = 2;
inline bool TideChartCommentBoxCommand::has_tocomment() const {
  return this != internal_default_instance() && tocomment_ != nullptr;
}
inline void TideChartCommentBoxCommand::clear_tocomment() {
  if (GetArenaNoVirtual() == nullptr && tocomment_ != nullptr) {
    delete tocomment_;
  }
  tocomment_ = nullptr;
}
inline const ::TideChartCommentBox& TideChartCommentBoxCommand::tocomment() const {
  const ::TideChartCommentBox* p = tocomment_;
  // @@protoc_insertion_point(field_get:TideChartCommentBoxCommand.toComment)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartCommentBox*>(
      &::_TideChartCommentBox_default_instance_);
}
inline ::TideChartCommentBox* TideChartCommentBoxCommand::release_tocomment() {
  // @@protoc_insertion_point(field_release:TideChartCommentBoxCommand.toComment)
  
  ::TideChartCommentBox* temp = tocomment_;
  tocomment_ = nullptr;
  return temp;
}
inline ::TideChartCommentBox* TideChartCommentBoxCommand::mutable_tocomment() {
  
  if (tocomment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartCommentBox>(GetArenaNoVirtual());
    tocomment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartCommentBoxCommand.toComment)
  return tocomment_;
}
inline void TideChartCommentBoxCommand::set_allocated_tocomment(::TideChartCommentBox* tocomment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tocomment_;
  }
  if (tocomment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tocomment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tocomment, submessage_arena);
    }
    
  } else {
    
  }
  tocomment_ = tocomment;
  // @@protoc_insertion_point(field_set_allocated:TideChartCommentBoxCommand.toComment)
}

// .TideChartCommandUpdateType type = 3;
inline void TideChartCommentBoxCommand::clear_type() {
  type_ = 0;
}
inline ::TideChartCommandUpdateType TideChartCommentBoxCommand::type() const {
  // @@protoc_insertion_point(field_get:TideChartCommentBoxCommand.type)
  return static_cast< ::TideChartCommandUpdateType >(type_);
}
inline void TideChartCommentBoxCommand::set_type(::TideChartCommandUpdateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TideChartCommentBoxCommand.type)
}

// -------------------------------------------------------------------

// TideChartWidgetCommand

// .TideChartWidget fromWidget = 1;
inline bool TideChartWidgetCommand::has_fromwidget() const {
  return this != internal_default_instance() && fromwidget_ != nullptr;
}
inline void TideChartWidgetCommand::clear_fromwidget() {
  if (GetArenaNoVirtual() == nullptr && fromwidget_ != nullptr) {
    delete fromwidget_;
  }
  fromwidget_ = nullptr;
}
inline const ::TideChartWidget& TideChartWidgetCommand::fromwidget() const {
  const ::TideChartWidget* p = fromwidget_;
  // @@protoc_insertion_point(field_get:TideChartWidgetCommand.fromWidget)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartWidget*>(
      &::_TideChartWidget_default_instance_);
}
inline ::TideChartWidget* TideChartWidgetCommand::release_fromwidget() {
  // @@protoc_insertion_point(field_release:TideChartWidgetCommand.fromWidget)
  
  ::TideChartWidget* temp = fromwidget_;
  fromwidget_ = nullptr;
  return temp;
}
inline ::TideChartWidget* TideChartWidgetCommand::mutable_fromwidget() {
  
  if (fromwidget_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartWidget>(GetArenaNoVirtual());
    fromwidget_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartWidgetCommand.fromWidget)
  return fromwidget_;
}
inline void TideChartWidgetCommand::set_allocated_fromwidget(::TideChartWidget* fromwidget) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fromwidget_;
  }
  if (fromwidget) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fromwidget = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fromwidget, submessage_arena);
    }
    
  } else {
    
  }
  fromwidget_ = fromwidget;
  // @@protoc_insertion_point(field_set_allocated:TideChartWidgetCommand.fromWidget)
}

// .TideChartWidget toWidget = 2;
inline bool TideChartWidgetCommand::has_towidget() const {
  return this != internal_default_instance() && towidget_ != nullptr;
}
inline void TideChartWidgetCommand::clear_towidget() {
  if (GetArenaNoVirtual() == nullptr && towidget_ != nullptr) {
    delete towidget_;
  }
  towidget_ = nullptr;
}
inline const ::TideChartWidget& TideChartWidgetCommand::towidget() const {
  const ::TideChartWidget* p = towidget_;
  // @@protoc_insertion_point(field_get:TideChartWidgetCommand.toWidget)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartWidget*>(
      &::_TideChartWidget_default_instance_);
}
inline ::TideChartWidget* TideChartWidgetCommand::release_towidget() {
  // @@protoc_insertion_point(field_release:TideChartWidgetCommand.toWidget)
  
  ::TideChartWidget* temp = towidget_;
  towidget_ = nullptr;
  return temp;
}
inline ::TideChartWidget* TideChartWidgetCommand::mutable_towidget() {
  
  if (towidget_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartWidget>(GetArenaNoVirtual());
    towidget_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartWidgetCommand.toWidget)
  return towidget_;
}
inline void TideChartWidgetCommand::set_allocated_towidget(::TideChartWidget* towidget) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete towidget_;
  }
  if (towidget) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      towidget = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, towidget, submessage_arena);
    }
    
  } else {
    
  }
  towidget_ = towidget;
  // @@protoc_insertion_point(field_set_allocated:TideChartWidgetCommand.toWidget)
}

// .TideChartCommandUpdateType type = 3;
inline void TideChartWidgetCommand::clear_type() {
  type_ = 0;
}
inline ::TideChartCommandUpdateType TideChartWidgetCommand::type() const {
  // @@protoc_insertion_point(field_get:TideChartWidgetCommand.type)
  return static_cast< ::TideChartCommandUpdateType >(type_);
}
inline void TideChartWidgetCommand::set_type(::TideChartCommandUpdateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TideChartWidgetCommand.type)
}

// -------------------------------------------------------------------

// TideChartPortCommand

// .TideChartPort fromPort = 1;
inline bool TideChartPortCommand::has_fromport() const {
  return this != internal_default_instance() && fromport_ != nullptr;
}
inline void TideChartPortCommand::clear_fromport() {
  if (GetArenaNoVirtual() == nullptr && fromport_ != nullptr) {
    delete fromport_;
  }
  fromport_ = nullptr;
}
inline const ::TideChartPort& TideChartPortCommand::fromport() const {
  const ::TideChartPort* p = fromport_;
  // @@protoc_insertion_point(field_get:TideChartPortCommand.fromPort)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartPort*>(
      &::_TideChartPort_default_instance_);
}
inline ::TideChartPort* TideChartPortCommand::release_fromport() {
  // @@protoc_insertion_point(field_release:TideChartPortCommand.fromPort)
  
  ::TideChartPort* temp = fromport_;
  fromport_ = nullptr;
  return temp;
}
inline ::TideChartPort* TideChartPortCommand::mutable_fromport() {
  
  if (fromport_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartPort>(GetArenaNoVirtual());
    fromport_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartPortCommand.fromPort)
  return fromport_;
}
inline void TideChartPortCommand::set_allocated_fromport(::TideChartPort* fromport) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fromport_;
  }
  if (fromport) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fromport = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fromport, submessage_arena);
    }
    
  } else {
    
  }
  fromport_ = fromport;
  // @@protoc_insertion_point(field_set_allocated:TideChartPortCommand.fromPort)
}

// .TideChartPort toPort = 2;
inline bool TideChartPortCommand::has_toport() const {
  return this != internal_default_instance() && toport_ != nullptr;
}
inline void TideChartPortCommand::clear_toport() {
  if (GetArenaNoVirtual() == nullptr && toport_ != nullptr) {
    delete toport_;
  }
  toport_ = nullptr;
}
inline const ::TideChartPort& TideChartPortCommand::toport() const {
  const ::TideChartPort* p = toport_;
  // @@protoc_insertion_point(field_get:TideChartPortCommand.toPort)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartPort*>(
      &::_TideChartPort_default_instance_);
}
inline ::TideChartPort* TideChartPortCommand::release_toport() {
  // @@protoc_insertion_point(field_release:TideChartPortCommand.toPort)
  
  ::TideChartPort* temp = toport_;
  toport_ = nullptr;
  return temp;
}
inline ::TideChartPort* TideChartPortCommand::mutable_toport() {
  
  if (toport_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartPort>(GetArenaNoVirtual());
    toport_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartPortCommand.toPort)
  return toport_;
}
inline void TideChartPortCommand::set_allocated_toport(::TideChartPort* toport) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete toport_;
  }
  if (toport) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      toport = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, toport, submessage_arena);
    }
    
  } else {
    
  }
  toport_ = toport;
  // @@protoc_insertion_point(field_set_allocated:TideChartPortCommand.toPort)
}

// .TideChartCommandUpdateType type = 3;
inline void TideChartPortCommand::clear_type() {
  type_ = 0;
}
inline ::TideChartCommandUpdateType TideChartPortCommand::type() const {
  // @@protoc_insertion_point(field_get:TideChartPortCommand.type)
  return static_cast< ::TideChartCommandUpdateType >(type_);
}
inline void TideChartPortCommand::set_type(::TideChartCommandUpdateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TideChartPortCommand.type)
}

// -------------------------------------------------------------------

// TideChartLinkCommand

// .TideChartLink fromLink = 1;
inline bool TideChartLinkCommand::has_fromlink() const {
  return this != internal_default_instance() && fromlink_ != nullptr;
}
inline void TideChartLinkCommand::clear_fromlink() {
  if (GetArenaNoVirtual() == nullptr && fromlink_ != nullptr) {
    delete fromlink_;
  }
  fromlink_ = nullptr;
}
inline const ::TideChartLink& TideChartLinkCommand::fromlink() const {
  const ::TideChartLink* p = fromlink_;
  // @@protoc_insertion_point(field_get:TideChartLinkCommand.fromLink)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartLink*>(
      &::_TideChartLink_default_instance_);
}
inline ::TideChartLink* TideChartLinkCommand::release_fromlink() {
  // @@protoc_insertion_point(field_release:TideChartLinkCommand.fromLink)
  
  ::TideChartLink* temp = fromlink_;
  fromlink_ = nullptr;
  return temp;
}
inline ::TideChartLink* TideChartLinkCommand::mutable_fromlink() {
  
  if (fromlink_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartLink>(GetArenaNoVirtual());
    fromlink_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartLinkCommand.fromLink)
  return fromlink_;
}
inline void TideChartLinkCommand::set_allocated_fromlink(::TideChartLink* fromlink) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fromlink_;
  }
  if (fromlink) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fromlink = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fromlink, submessage_arena);
    }
    
  } else {
    
  }
  fromlink_ = fromlink;
  // @@protoc_insertion_point(field_set_allocated:TideChartLinkCommand.fromLink)
}

// .TideChartLink toLink = 2;
inline bool TideChartLinkCommand::has_tolink() const {
  return this != internal_default_instance() && tolink_ != nullptr;
}
inline void TideChartLinkCommand::clear_tolink() {
  if (GetArenaNoVirtual() == nullptr && tolink_ != nullptr) {
    delete tolink_;
  }
  tolink_ = nullptr;
}
inline const ::TideChartLink& TideChartLinkCommand::tolink() const {
  const ::TideChartLink* p = tolink_;
  // @@protoc_insertion_point(field_get:TideChartLinkCommand.toLink)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartLink*>(
      &::_TideChartLink_default_instance_);
}
inline ::TideChartLink* TideChartLinkCommand::release_tolink() {
  // @@protoc_insertion_point(field_release:TideChartLinkCommand.toLink)
  
  ::TideChartLink* temp = tolink_;
  tolink_ = nullptr;
  return temp;
}
inline ::TideChartLink* TideChartLinkCommand::mutable_tolink() {
  
  if (tolink_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartLink>(GetArenaNoVirtual());
    tolink_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartLinkCommand.toLink)
  return tolink_;
}
inline void TideChartLinkCommand::set_allocated_tolink(::TideChartLink* tolink) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tolink_;
  }
  if (tolink) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tolink = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tolink, submessage_arena);
    }
    
  } else {
    
  }
  tolink_ = tolink;
  // @@protoc_insertion_point(field_set_allocated:TideChartLinkCommand.toLink)
}

// .TideChartCommandUpdateType type = 3;
inline void TideChartLinkCommand::clear_type() {
  type_ = 0;
}
inline ::TideChartCommandUpdateType TideChartLinkCommand::type() const {
  // @@protoc_insertion_point(field_get:TideChartLinkCommand.type)
  return static_cast< ::TideChartCommandUpdateType >(type_);
}
inline void TideChartLinkCommand::set_type(::TideChartCommandUpdateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TideChartLinkCommand.type)
}

// -------------------------------------------------------------------

// TideChartNodeCommand

// .TideChartNode fromNode = 1;
inline bool TideChartNodeCommand::has_fromnode() const {
  return this != internal_default_instance() && fromnode_ != nullptr;
}
inline void TideChartNodeCommand::clear_fromnode() {
  if (GetArenaNoVirtual() == nullptr && fromnode_ != nullptr) {
    delete fromnode_;
  }
  fromnode_ = nullptr;
}
inline const ::TideChartNode& TideChartNodeCommand::fromnode() const {
  const ::TideChartNode* p = fromnode_;
  // @@protoc_insertion_point(field_get:TideChartNodeCommand.fromNode)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartNode*>(
      &::_TideChartNode_default_instance_);
}
inline ::TideChartNode* TideChartNodeCommand::release_fromnode() {
  // @@protoc_insertion_point(field_release:TideChartNodeCommand.fromNode)
  
  ::TideChartNode* temp = fromnode_;
  fromnode_ = nullptr;
  return temp;
}
inline ::TideChartNode* TideChartNodeCommand::mutable_fromnode() {
  
  if (fromnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartNode>(GetArenaNoVirtual());
    fromnode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartNodeCommand.fromNode)
  return fromnode_;
}
inline void TideChartNodeCommand::set_allocated_fromnode(::TideChartNode* fromnode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fromnode_;
  }
  if (fromnode) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fromnode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fromnode, submessage_arena);
    }
    
  } else {
    
  }
  fromnode_ = fromnode;
  // @@protoc_insertion_point(field_set_allocated:TideChartNodeCommand.fromNode)
}

// .TideChartNode toNode = 2;
inline bool TideChartNodeCommand::has_tonode() const {
  return this != internal_default_instance() && tonode_ != nullptr;
}
inline void TideChartNodeCommand::clear_tonode() {
  if (GetArenaNoVirtual() == nullptr && tonode_ != nullptr) {
    delete tonode_;
  }
  tonode_ = nullptr;
}
inline const ::TideChartNode& TideChartNodeCommand::tonode() const {
  const ::TideChartNode* p = tonode_;
  // @@protoc_insertion_point(field_get:TideChartNodeCommand.toNode)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartNode*>(
      &::_TideChartNode_default_instance_);
}
inline ::TideChartNode* TideChartNodeCommand::release_tonode() {
  // @@protoc_insertion_point(field_release:TideChartNodeCommand.toNode)
  
  ::TideChartNode* temp = tonode_;
  tonode_ = nullptr;
  return temp;
}
inline ::TideChartNode* TideChartNodeCommand::mutable_tonode() {
  
  if (tonode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartNode>(GetArenaNoVirtual());
    tonode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartNodeCommand.toNode)
  return tonode_;
}
inline void TideChartNodeCommand::set_allocated_tonode(::TideChartNode* tonode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tonode_;
  }
  if (tonode) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tonode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tonode, submessage_arena);
    }
    
  } else {
    
  }
  tonode_ = tonode;
  // @@protoc_insertion_point(field_set_allocated:TideChartNodeCommand.toNode)
}

// .TideChartCommandUpdateType type = 3;
inline void TideChartNodeCommand::clear_type() {
  type_ = 0;
}
inline ::TideChartCommandUpdateType TideChartNodeCommand::type() const {
  // @@protoc_insertion_point(field_get:TideChartNodeCommand.type)
  return static_cast< ::TideChartCommandUpdateType >(type_);
}
inline void TideChartNodeCommand::set_type(::TideChartCommandUpdateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TideChartNodeCommand.type)
}

// -------------------------------------------------------------------

// TideChartRegionCommand

// .TideChartRegion fromRegion = 1;
inline bool TideChartRegionCommand::has_fromregion() const {
  return this != internal_default_instance() && fromregion_ != nullptr;
}
inline void TideChartRegionCommand::clear_fromregion() {
  if (GetArenaNoVirtual() == nullptr && fromregion_ != nullptr) {
    delete fromregion_;
  }
  fromregion_ = nullptr;
}
inline const ::TideChartRegion& TideChartRegionCommand::fromregion() const {
  const ::TideChartRegion* p = fromregion_;
  // @@protoc_insertion_point(field_get:TideChartRegionCommand.fromRegion)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartRegion*>(
      &::_TideChartRegion_default_instance_);
}
inline ::TideChartRegion* TideChartRegionCommand::release_fromregion() {
  // @@protoc_insertion_point(field_release:TideChartRegionCommand.fromRegion)
  
  ::TideChartRegion* temp = fromregion_;
  fromregion_ = nullptr;
  return temp;
}
inline ::TideChartRegion* TideChartRegionCommand::mutable_fromregion() {
  
  if (fromregion_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartRegion>(GetArenaNoVirtual());
    fromregion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartRegionCommand.fromRegion)
  return fromregion_;
}
inline void TideChartRegionCommand::set_allocated_fromregion(::TideChartRegion* fromregion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fromregion_;
  }
  if (fromregion) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fromregion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fromregion, submessage_arena);
    }
    
  } else {
    
  }
  fromregion_ = fromregion;
  // @@protoc_insertion_point(field_set_allocated:TideChartRegionCommand.fromRegion)
}

// .TideChartRegion toRegion = 2;
inline bool TideChartRegionCommand::has_toregion() const {
  return this != internal_default_instance() && toregion_ != nullptr;
}
inline void TideChartRegionCommand::clear_toregion() {
  if (GetArenaNoVirtual() == nullptr && toregion_ != nullptr) {
    delete toregion_;
  }
  toregion_ = nullptr;
}
inline const ::TideChartRegion& TideChartRegionCommand::toregion() const {
  const ::TideChartRegion* p = toregion_;
  // @@protoc_insertion_point(field_get:TideChartRegionCommand.toRegion)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartRegion*>(
      &::_TideChartRegion_default_instance_);
}
inline ::TideChartRegion* TideChartRegionCommand::release_toregion() {
  // @@protoc_insertion_point(field_release:TideChartRegionCommand.toRegion)
  
  ::TideChartRegion* temp = toregion_;
  toregion_ = nullptr;
  return temp;
}
inline ::TideChartRegion* TideChartRegionCommand::mutable_toregion() {
  
  if (toregion_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartRegion>(GetArenaNoVirtual());
    toregion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartRegionCommand.toRegion)
  return toregion_;
}
inline void TideChartRegionCommand::set_allocated_toregion(::TideChartRegion* toregion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete toregion_;
  }
  if (toregion) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      toregion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, toregion, submessage_arena);
    }
    
  } else {
    
  }
  toregion_ = toregion;
  // @@protoc_insertion_point(field_set_allocated:TideChartRegionCommand.toRegion)
}

// .TideChartCommandUpdateType type = 3;
inline void TideChartRegionCommand::clear_type() {
  type_ = 0;
}
inline ::TideChartCommandUpdateType TideChartRegionCommand::type() const {
  // @@protoc_insertion_point(field_get:TideChartRegionCommand.type)
  return static_cast< ::TideChartCommandUpdateType >(type_);
}
inline void TideChartRegionCommand::set_type(::TideChartCommandUpdateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TideChartRegionCommand.type)
}

// -------------------------------------------------------------------

// TideChartGraphCommand

// .TideChartGraph fromGraph = 1;
inline bool TideChartGraphCommand::has_fromgraph() const {
  return this != internal_default_instance() && fromgraph_ != nullptr;
}
inline void TideChartGraphCommand::clear_fromgraph() {
  if (GetArenaNoVirtual() == nullptr && fromgraph_ != nullptr) {
    delete fromgraph_;
  }
  fromgraph_ = nullptr;
}
inline const ::TideChartGraph& TideChartGraphCommand::fromgraph() const {
  const ::TideChartGraph* p = fromgraph_;
  // @@protoc_insertion_point(field_get:TideChartGraphCommand.fromGraph)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartGraph*>(
      &::_TideChartGraph_default_instance_);
}
inline ::TideChartGraph* TideChartGraphCommand::release_fromgraph() {
  // @@protoc_insertion_point(field_release:TideChartGraphCommand.fromGraph)
  
  ::TideChartGraph* temp = fromgraph_;
  fromgraph_ = nullptr;
  return temp;
}
inline ::TideChartGraph* TideChartGraphCommand::mutable_fromgraph() {
  
  if (fromgraph_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartGraph>(GetArenaNoVirtual());
    fromgraph_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartGraphCommand.fromGraph)
  return fromgraph_;
}
inline void TideChartGraphCommand::set_allocated_fromgraph(::TideChartGraph* fromgraph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fromgraph_;
  }
  if (fromgraph) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fromgraph = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fromgraph, submessage_arena);
    }
    
  } else {
    
  }
  fromgraph_ = fromgraph;
  // @@protoc_insertion_point(field_set_allocated:TideChartGraphCommand.fromGraph)
}

// .TideChartGraph toGraph = 2;
inline bool TideChartGraphCommand::has_tograph() const {
  return this != internal_default_instance() && tograph_ != nullptr;
}
inline void TideChartGraphCommand::clear_tograph() {
  if (GetArenaNoVirtual() == nullptr && tograph_ != nullptr) {
    delete tograph_;
  }
  tograph_ = nullptr;
}
inline const ::TideChartGraph& TideChartGraphCommand::tograph() const {
  const ::TideChartGraph* p = tograph_;
  // @@protoc_insertion_point(field_get:TideChartGraphCommand.toGraph)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartGraph*>(
      &::_TideChartGraph_default_instance_);
}
inline ::TideChartGraph* TideChartGraphCommand::release_tograph() {
  // @@protoc_insertion_point(field_release:TideChartGraphCommand.toGraph)
  
  ::TideChartGraph* temp = tograph_;
  tograph_ = nullptr;
  return temp;
}
inline ::TideChartGraph* TideChartGraphCommand::mutable_tograph() {
  
  if (tograph_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartGraph>(GetArenaNoVirtual());
    tograph_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartGraphCommand.toGraph)
  return tograph_;
}
inline void TideChartGraphCommand::set_allocated_tograph(::TideChartGraph* tograph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tograph_;
  }
  if (tograph) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tograph = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tograph, submessage_arena);
    }
    
  } else {
    
  }
  tograph_ = tograph;
  // @@protoc_insertion_point(field_set_allocated:TideChartGraphCommand.toGraph)
}

// .TideChartCommandUpdateType type = 3;
inline void TideChartGraphCommand::clear_type() {
  type_ = 0;
}
inline ::TideChartCommandUpdateType TideChartGraphCommand::type() const {
  // @@protoc_insertion_point(field_get:TideChartGraphCommand.type)
  return static_cast< ::TideChartCommandUpdateType >(type_);
}
inline void TideChartGraphCommand::set_type(::TideChartCommandUpdateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TideChartGraphCommand.type)
}

// -------------------------------------------------------------------

// TideChartPropertyCommand

// repeated .TideChartProperty fromProps = 1;
inline int TideChartPropertyCommand::fromprops_size() const {
  return fromprops_.size();
}
inline void TideChartPropertyCommand::clear_fromprops() {
  fromprops_.Clear();
}
inline ::TideChartProperty* TideChartPropertyCommand::mutable_fromprops(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartPropertyCommand.fromProps)
  return fromprops_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartPropertyCommand::mutable_fromprops() {
  // @@protoc_insertion_point(field_mutable_list:TideChartPropertyCommand.fromProps)
  return &fromprops_;
}
inline const ::TideChartProperty& TideChartPropertyCommand::fromprops(int index) const {
  // @@protoc_insertion_point(field_get:TideChartPropertyCommand.fromProps)
  return fromprops_.Get(index);
}
inline ::TideChartProperty* TideChartPropertyCommand::add_fromprops() {
  // @@protoc_insertion_point(field_add:TideChartPropertyCommand.fromProps)
  return fromprops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartPropertyCommand::fromprops() const {
  // @@protoc_insertion_point(field_list:TideChartPropertyCommand.fromProps)
  return fromprops_;
}

// repeated .TideChartProperty toProps = 2;
inline int TideChartPropertyCommand::toprops_size() const {
  return toprops_.size();
}
inline void TideChartPropertyCommand::clear_toprops() {
  toprops_.Clear();
}
inline ::TideChartProperty* TideChartPropertyCommand::mutable_toprops(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartPropertyCommand.toProps)
  return toprops_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartPropertyCommand::mutable_toprops() {
  // @@protoc_insertion_point(field_mutable_list:TideChartPropertyCommand.toProps)
  return &toprops_;
}
inline const ::TideChartProperty& TideChartPropertyCommand::toprops(int index) const {
  // @@protoc_insertion_point(field_get:TideChartPropertyCommand.toProps)
  return toprops_.Get(index);
}
inline ::TideChartProperty* TideChartPropertyCommand::add_toprops() {
  // @@protoc_insertion_point(field_add:TideChartPropertyCommand.toProps)
  return toprops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartPropertyCommand::toprops() const {
  // @@protoc_insertion_point(field_list:TideChartPropertyCommand.toProps)
  return toprops_;
}

// .TideChartCommandUpdateType type = 3;
inline void TideChartPropertyCommand::clear_type() {
  type_ = 0;
}
inline ::TideChartCommandUpdateType TideChartPropertyCommand::type() const {
  // @@protoc_insertion_point(field_get:TideChartPropertyCommand.type)
  return static_cast< ::TideChartCommandUpdateType >(type_);
}
inline void TideChartPropertyCommand::set_type(::TideChartCommandUpdateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.type)
}

// string node = 5;
inline bool TideChartPropertyCommand::has_node() const {
  return target_case() == kNode;
}
inline void TideChartPropertyCommand::set_has_node() {
  _oneof_case_[0] = kNode;
}
inline void TideChartPropertyCommand::clear_node() {
  if (has_node()) {
    target_.node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& TideChartPropertyCommand::node() const {
  // @@protoc_insertion_point(field_get:TideChartPropertyCommand.node)
  if (has_node()) {
    return target_.node_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartPropertyCommand::set_node(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.node)
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.node)
}
#if LANG_CXX11
inline void TideChartPropertyCommand::set_node(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.node)
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPropertyCommand.node)
}
#endif
inline void TideChartPropertyCommand::set_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPropertyCommand.node)
}
inline void TideChartPropertyCommand::set_node(const char* value, size_t size) {
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPropertyCommand.node)
}
inline ::std::string* TideChartPropertyCommand::mutable_node() {
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartPropertyCommand.node)
  return target_.node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPropertyCommand::release_node() {
  // @@protoc_insertion_point(field_release:TideChartPropertyCommand.node)
  if (has_node()) {
    clear_has_target();
    return target_.node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartPropertyCommand::set_allocated_node(::std::string* node) {
  if (has_target()) {
    clear_target();
  }
  if (node != nullptr) {
    set_has_node();
    target_.node_.UnsafeSetDefault(node);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartPropertyCommand.node)
}

// string region = 6;
inline bool TideChartPropertyCommand::has_region() const {
  return target_case() == kRegion;
}
inline void TideChartPropertyCommand::set_has_region() {
  _oneof_case_[0] = kRegion;
}
inline void TideChartPropertyCommand::clear_region() {
  if (has_region()) {
    target_.region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& TideChartPropertyCommand::region() const {
  // @@protoc_insertion_point(field_get:TideChartPropertyCommand.region)
  if (has_region()) {
    return target_.region_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartPropertyCommand::set_region(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.region)
  if (!has_region()) {
    clear_target();
    set_has_region();
    target_.region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.region)
}
#if LANG_CXX11
inline void TideChartPropertyCommand::set_region(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.region)
  if (!has_region()) {
    clear_target();
    set_has_region();
    target_.region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPropertyCommand.region)
}
#endif
inline void TideChartPropertyCommand::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_region()) {
    clear_target();
    set_has_region();
    target_.region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPropertyCommand.region)
}
inline void TideChartPropertyCommand::set_region(const char* value, size_t size) {
  if (!has_region()) {
    clear_target();
    set_has_region();
    target_.region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPropertyCommand.region)
}
inline ::std::string* TideChartPropertyCommand::mutable_region() {
  if (!has_region()) {
    clear_target();
    set_has_region();
    target_.region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartPropertyCommand.region)
  return target_.region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPropertyCommand::release_region() {
  // @@protoc_insertion_point(field_release:TideChartPropertyCommand.region)
  if (has_region()) {
    clear_has_target();
    return target_.region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartPropertyCommand::set_allocated_region(::std::string* region) {
  if (has_target()) {
    clear_target();
  }
  if (region != nullptr) {
    set_has_region();
    target_.region_.UnsafeSetDefault(region);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartPropertyCommand.region)
}

// string widget = 7;
inline bool TideChartPropertyCommand::has_widget() const {
  return target_case() == kWidget;
}
inline void TideChartPropertyCommand::set_has_widget() {
  _oneof_case_[0] = kWidget;
}
inline void TideChartPropertyCommand::clear_widget() {
  if (has_widget()) {
    target_.widget_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& TideChartPropertyCommand::widget() const {
  // @@protoc_insertion_point(field_get:TideChartPropertyCommand.widget)
  if (has_widget()) {
    return target_.widget_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartPropertyCommand::set_widget(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.widget)
  if (!has_widget()) {
    clear_target();
    set_has_widget();
    target_.widget_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.widget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.widget)
}
#if LANG_CXX11
inline void TideChartPropertyCommand::set_widget(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.widget)
  if (!has_widget()) {
    clear_target();
    set_has_widget();
    target_.widget_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.widget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPropertyCommand.widget)
}
#endif
inline void TideChartPropertyCommand::set_widget(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_widget()) {
    clear_target();
    set_has_widget();
    target_.widget_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.widget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPropertyCommand.widget)
}
inline void TideChartPropertyCommand::set_widget(const char* value, size_t size) {
  if (!has_widget()) {
    clear_target();
    set_has_widget();
    target_.widget_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.widget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPropertyCommand.widget)
}
inline ::std::string* TideChartPropertyCommand::mutable_widget() {
  if (!has_widget()) {
    clear_target();
    set_has_widget();
    target_.widget_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartPropertyCommand.widget)
  return target_.widget_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPropertyCommand::release_widget() {
  // @@protoc_insertion_point(field_release:TideChartPropertyCommand.widget)
  if (has_widget()) {
    clear_has_target();
    return target_.widget_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartPropertyCommand::set_allocated_widget(::std::string* widget) {
  if (has_target()) {
    clear_target();
  }
  if (widget != nullptr) {
    set_has_widget();
    target_.widget_.UnsafeSetDefault(widget);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartPropertyCommand.widget)
}

// string graph = 8;
inline bool TideChartPropertyCommand::has_graph() const {
  return target_case() == kGraph;
}
inline void TideChartPropertyCommand::set_has_graph() {
  _oneof_case_[0] = kGraph;
}
inline void TideChartPropertyCommand::clear_graph() {
  if (has_graph()) {
    target_.graph_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& TideChartPropertyCommand::graph() const {
  // @@protoc_insertion_point(field_get:TideChartPropertyCommand.graph)
  if (has_graph()) {
    return target_.graph_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartPropertyCommand::set_graph(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.graph)
  if (!has_graph()) {
    clear_target();
    set_has_graph();
    target_.graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.graph)
}
#if LANG_CXX11
inline void TideChartPropertyCommand::set_graph(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartPropertyCommand.graph)
  if (!has_graph()) {
    clear_target();
    set_has_graph();
    target_.graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartPropertyCommand.graph)
}
#endif
inline void TideChartPropertyCommand::set_graph(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_graph()) {
    clear_target();
    set_has_graph();
    target_.graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartPropertyCommand.graph)
}
inline void TideChartPropertyCommand::set_graph(const char* value, size_t size) {
  if (!has_graph()) {
    clear_target();
    set_has_graph();
    target_.graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartPropertyCommand.graph)
}
inline ::std::string* TideChartPropertyCommand::mutable_graph() {
  if (!has_graph()) {
    clear_target();
    set_has_graph();
    target_.graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartPropertyCommand.graph)
  return target_.graph_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartPropertyCommand::release_graph() {
  // @@protoc_insertion_point(field_release:TideChartPropertyCommand.graph)
  if (has_graph()) {
    clear_has_target();
    return target_.graph_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartPropertyCommand::set_allocated_graph(::std::string* graph) {
  if (has_target()) {
    clear_target();
  }
  if (graph != nullptr) {
    set_has_graph();
    target_.graph_.UnsafeSetDefault(graph);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartPropertyCommand.graph)
}

inline bool TideChartPropertyCommand::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void TideChartPropertyCommand::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline TideChartPropertyCommand::TargetCase TideChartPropertyCommand::target_case() const {
  return TideChartPropertyCommand::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TideChartNoteCommand

// repeated .TideChartNote notes = 1;
inline int TideChartNoteCommand::notes_size() const {
  return notes_.size();
}
inline void TideChartNoteCommand::clear_notes() {
  notes_.Clear();
}
inline ::TideChartNote* TideChartNoteCommand::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartNoteCommand.notes)
  return notes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartNote >*
TideChartNoteCommand::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:TideChartNoteCommand.notes)
  return &notes_;
}
inline const ::TideChartNote& TideChartNoteCommand::notes(int index) const {
  // @@protoc_insertion_point(field_get:TideChartNoteCommand.notes)
  return notes_.Get(index);
}
inline ::TideChartNote* TideChartNoteCommand::add_notes() {
  // @@protoc_insertion_point(field_add:TideChartNoteCommand.notes)
  return notes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartNote >&
TideChartNoteCommand::notes() const {
  // @@protoc_insertion_point(field_list:TideChartNoteCommand.notes)
  return notes_;
}

// .TideChartCommandUpdateType type = 2;
inline void TideChartNoteCommand::clear_type() {
  type_ = 0;
}
inline ::TideChartCommandUpdateType TideChartNoteCommand::type() const {
  // @@protoc_insertion_point(field_get:TideChartNoteCommand.type)
  return static_cast< ::TideChartCommandUpdateType >(type_);
}
inline void TideChartNoteCommand::set_type(::TideChartCommandUpdateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TideChartNoteCommand.type)
}

// string node = 3;
inline bool TideChartNoteCommand::has_node() const {
  return target_case() == kNode;
}
inline void TideChartNoteCommand::set_has_node() {
  _oneof_case_[0] = kNode;
}
inline void TideChartNoteCommand::clear_node() {
  if (has_node()) {
    target_.node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& TideChartNoteCommand::node() const {
  // @@protoc_insertion_point(field_get:TideChartNoteCommand.node)
  if (has_node()) {
    return target_.node_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartNoteCommand::set_node(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartNoteCommand.node)
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNoteCommand.node)
}
#if LANG_CXX11
inline void TideChartNoteCommand::set_node(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartNoteCommand.node)
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNoteCommand.node)
}
#endif
inline void TideChartNoteCommand::set_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNoteCommand.node)
}
inline void TideChartNoteCommand::set_node(const char* value, size_t size) {
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNoteCommand.node)
}
inline ::std::string* TideChartNoteCommand::mutable_node() {
  if (!has_node()) {
    clear_target();
    set_has_node();
    target_.node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartNoteCommand.node)
  return target_.node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNoteCommand::release_node() {
  // @@protoc_insertion_point(field_release:TideChartNoteCommand.node)
  if (has_node()) {
    clear_has_target();
    return target_.node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartNoteCommand::set_allocated_node(::std::string* node) {
  if (has_target()) {
    clear_target();
  }
  if (node != nullptr) {
    set_has_node();
    target_.node_.UnsafeSetDefault(node);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartNoteCommand.node)
}

// string region = 4;
inline bool TideChartNoteCommand::has_region() const {
  return target_case() == kRegion;
}
inline void TideChartNoteCommand::set_has_region() {
  _oneof_case_[0] = kRegion;
}
inline void TideChartNoteCommand::clear_region() {
  if (has_region()) {
    target_.region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& TideChartNoteCommand::region() const {
  // @@protoc_insertion_point(field_get:TideChartNoteCommand.region)
  if (has_region()) {
    return target_.region_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartNoteCommand::set_region(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartNoteCommand.region)
  if (!has_region()) {
    clear_target();
    set_has_region();
    target_.region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNoteCommand.region)
}
#if LANG_CXX11
inline void TideChartNoteCommand::set_region(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartNoteCommand.region)
  if (!has_region()) {
    clear_target();
    set_has_region();
    target_.region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNoteCommand.region)
}
#endif
inline void TideChartNoteCommand::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_region()) {
    clear_target();
    set_has_region();
    target_.region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNoteCommand.region)
}
inline void TideChartNoteCommand::set_region(const char* value, size_t size) {
  if (!has_region()) {
    clear_target();
    set_has_region();
    target_.region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNoteCommand.region)
}
inline ::std::string* TideChartNoteCommand::mutable_region() {
  if (!has_region()) {
    clear_target();
    set_has_region();
    target_.region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartNoteCommand.region)
  return target_.region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNoteCommand::release_region() {
  // @@protoc_insertion_point(field_release:TideChartNoteCommand.region)
  if (has_region()) {
    clear_has_target();
    return target_.region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartNoteCommand::set_allocated_region(::std::string* region) {
  if (has_target()) {
    clear_target();
  }
  if (region != nullptr) {
    set_has_region();
    target_.region_.UnsafeSetDefault(region);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartNoteCommand.region)
}

// string graph = 5;
inline bool TideChartNoteCommand::has_graph() const {
  return target_case() == kGraph;
}
inline void TideChartNoteCommand::set_has_graph() {
  _oneof_case_[0] = kGraph;
}
inline void TideChartNoteCommand::clear_graph() {
  if (has_graph()) {
    target_.graph_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& TideChartNoteCommand::graph() const {
  // @@protoc_insertion_point(field_get:TideChartNoteCommand.graph)
  if (has_graph()) {
    return target_.graph_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartNoteCommand::set_graph(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartNoteCommand.graph)
  if (!has_graph()) {
    clear_target();
    set_has_graph();
    target_.graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartNoteCommand.graph)
}
#if LANG_CXX11
inline void TideChartNoteCommand::set_graph(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartNoteCommand.graph)
  if (!has_graph()) {
    clear_target();
    set_has_graph();
    target_.graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartNoteCommand.graph)
}
#endif
inline void TideChartNoteCommand::set_graph(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_graph()) {
    clear_target();
    set_has_graph();
    target_.graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartNoteCommand.graph)
}
inline void TideChartNoteCommand::set_graph(const char* value, size_t size) {
  if (!has_graph()) {
    clear_target();
    set_has_graph();
    target_.graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartNoteCommand.graph)
}
inline ::std::string* TideChartNoteCommand::mutable_graph() {
  if (!has_graph()) {
    clear_target();
    set_has_graph();
    target_.graph_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartNoteCommand.graph)
  return target_.graph_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartNoteCommand::release_graph() {
  // @@protoc_insertion_point(field_release:TideChartNoteCommand.graph)
  if (has_graph()) {
    clear_has_target();
    return target_.graph_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartNoteCommand::set_allocated_graph(::std::string* graph) {
  if (has_target()) {
    clear_target();
  }
  if (graph != nullptr) {
    set_has_graph();
    target_.graph_.UnsafeSetDefault(graph);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartNoteCommand.graph)
}

inline bool TideChartNoteCommand::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void TideChartNoteCommand::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline TideChartNoteCommand::TargetCase TideChartNoteCommand::target_case() const {
  return TideChartNoteCommand::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TideChartSource

// string id = 1;
inline void TideChartSource::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSource::id() const {
  // @@protoc_insertion_point(field_get:TideChartSource.id)
  return id_.GetNoArena();
}
inline void TideChartSource::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSource.id)
}
#if LANG_CXX11
inline void TideChartSource::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSource.id)
}
#endif
inline void TideChartSource::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSource.id)
}
inline void TideChartSource::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSource.id)
}
inline ::std::string* TideChartSource::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSource.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSource::release_id() {
  // @@protoc_insertion_point(field_release:TideChartSource.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSource::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TideChartSource.id)
}

// string name = 2;
inline void TideChartSource::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSource::name() const {
  // @@protoc_insertion_point(field_get:TideChartSource.name)
  return name_.GetNoArena();
}
inline void TideChartSource::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSource.name)
}
#if LANG_CXX11
inline void TideChartSource::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSource.name)
}
#endif
inline void TideChartSource::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSource.name)
}
inline void TideChartSource::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSource.name)
}
inline ::std::string* TideChartSource::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSource.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSource::release_name() {
  // @@protoc_insertion_point(field_release:TideChartSource.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSource::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TideChartSource.name)
}

// string path = 3;
inline void TideChartSource::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSource::path() const {
  // @@protoc_insertion_point(field_get:TideChartSource.path)
  return path_.GetNoArena();
}
inline void TideChartSource::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSource.path)
}
#if LANG_CXX11
inline void TideChartSource::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSource.path)
}
#endif
inline void TideChartSource::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSource.path)
}
inline void TideChartSource::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSource.path)
}
inline ::std::string* TideChartSource::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSource.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSource::release_path() {
  // @@protoc_insertion_point(field_release:TideChartSource.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSource::set_allocated_path(::std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:TideChartSource.path)
}

// string modifiedDate = 5;
inline void TideChartSource::clear_modifieddate() {
  modifieddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSource::modifieddate() const {
  // @@protoc_insertion_point(field_get:TideChartSource.modifiedDate)
  return modifieddate_.GetNoArena();
}
inline void TideChartSource::set_modifieddate(const ::std::string& value) {
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSource.modifiedDate)
}
#if LANG_CXX11
inline void TideChartSource::set_modifieddate(::std::string&& value) {
  
  modifieddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSource.modifiedDate)
}
#endif
inline void TideChartSource::set_modifieddate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSource.modifiedDate)
}
inline void TideChartSource::set_modifieddate(const char* value, size_t size) {
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSource.modifiedDate)
}
inline ::std::string* TideChartSource::mutable_modifieddate() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSource.modifiedDate)
  return modifieddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSource::release_modifieddate() {
  // @@protoc_insertion_point(field_release:TideChartSource.modifiedDate)
  
  return modifieddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSource::set_allocated_modifieddate(::std::string* modifieddate) {
  if (modifieddate != nullptr) {
    
  } else {
    
  }
  modifieddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modifieddate);
  // @@protoc_insertion_point(field_set_allocated:TideChartSource.modifiedDate)
}

// string modifiedBy = 6;
inline void TideChartSource::clear_modifiedby() {
  modifiedby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSource::modifiedby() const {
  // @@protoc_insertion_point(field_get:TideChartSource.modifiedBy)
  return modifiedby_.GetNoArena();
}
inline void TideChartSource::set_modifiedby(const ::std::string& value) {
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSource.modifiedBy)
}
#if LANG_CXX11
inline void TideChartSource::set_modifiedby(::std::string&& value) {
  
  modifiedby_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSource.modifiedBy)
}
#endif
inline void TideChartSource::set_modifiedby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSource.modifiedBy)
}
inline void TideChartSource::set_modifiedby(const char* value, size_t size) {
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSource.modifiedBy)
}
inline ::std::string* TideChartSource::mutable_modifiedby() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSource.modifiedBy)
  return modifiedby_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSource::release_modifiedby() {
  // @@protoc_insertion_point(field_release:TideChartSource.modifiedBy)
  
  return modifiedby_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSource::set_allocated_modifiedby(::std::string* modifiedby) {
  if (modifiedby != nullptr) {
    
  } else {
    
  }
  modifiedby_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modifiedby);
  // @@protoc_insertion_point(field_set_allocated:TideChartSource.modifiedBy)
}

// string version = 7;
inline bool TideChartSource::has_version() const {
  return content_case() == kVersion;
}
inline void TideChartSource::set_has_version() {
  _oneof_case_[0] = kVersion;
}
inline void TideChartSource::clear_version() {
  if (has_version()) {
    content_.version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& TideChartSource::version() const {
  // @@protoc_insertion_point(field_get:TideChartSource.version)
  if (has_version()) {
    return content_.version_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartSource::set_version(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartSource.version)
  if (!has_version()) {
    clear_content();
    set_has_version();
    content_.version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSource.version)
}
#if LANG_CXX11
inline void TideChartSource::set_version(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartSource.version)
  if (!has_version()) {
    clear_content();
    set_has_version();
    content_.version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSource.version)
}
#endif
inline void TideChartSource::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_version()) {
    clear_content();
    set_has_version();
    content_.version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSource.version)
}
inline void TideChartSource::set_version(const char* value, size_t size) {
  if (!has_version()) {
    clear_content();
    set_has_version();
    content_.version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSource.version)
}
inline ::std::string* TideChartSource::mutable_version() {
  if (!has_version()) {
    clear_content();
    set_has_version();
    content_.version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartSource.version)
  return content_.version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSource::release_version() {
  // @@protoc_insertion_point(field_release:TideChartSource.version)
  if (has_version()) {
    clear_has_content();
    return content_.version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartSource::set_allocated_version(::std::string* version) {
  if (has_content()) {
    clear_content();
  }
  if (version != nullptr) {
    set_has_version();
    content_.version_.UnsafeSetDefault(version);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartSource.version)
}

// string script = 8;
inline bool TideChartSource::has_script() const {
  return content_case() == kScript;
}
inline void TideChartSource::set_has_script() {
  _oneof_case_[0] = kScript;
}
inline void TideChartSource::clear_script() {
  if (has_script()) {
    content_.script_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& TideChartSource::script() const {
  // @@protoc_insertion_point(field_get:TideChartSource.script)
  if (has_script()) {
    return content_.script_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartSource::set_script(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartSource.script)
  if (!has_script()) {
    clear_content();
    set_has_script();
    content_.script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSource.script)
}
#if LANG_CXX11
inline void TideChartSource::set_script(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartSource.script)
  if (!has_script()) {
    clear_content();
    set_has_script();
    content_.script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSource.script)
}
#endif
inline void TideChartSource::set_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_script()) {
    clear_content();
    set_has_script();
    content_.script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSource.script)
}
inline void TideChartSource::set_script(const char* value, size_t size) {
  if (!has_script()) {
    clear_content();
    set_has_script();
    content_.script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSource.script)
}
inline ::std::string* TideChartSource::mutable_script() {
  if (!has_script()) {
    clear_content();
    set_has_script();
    content_.script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartSource.script)
  return content_.script_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSource::release_script() {
  // @@protoc_insertion_point(field_release:TideChartSource.script)
  if (has_script()) {
    clear_has_content();
    return content_.script_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartSource::set_allocated_script(::std::string* script) {
  if (has_content()) {
    clear_content();
  }
  if (script != nullptr) {
    set_has_script();
    content_.script_.UnsafeSetDefault(script);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartSource.script)
}

inline bool TideChartSource::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void TideChartSource::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline TideChartSource::ContentCase TideChartSource::content_case() const {
  return TideChartSource::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TideChartLibrary

// string id = 1;
inline void TideChartLibrary::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLibrary::id() const {
  // @@protoc_insertion_point(field_get:TideChartLibrary.id)
  return id_.GetNoArena();
}
inline void TideChartLibrary::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLibrary.id)
}
#if LANG_CXX11
inline void TideChartLibrary::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLibrary.id)
}
#endif
inline void TideChartLibrary::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLibrary.id)
}
inline void TideChartLibrary::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLibrary.id)
}
inline ::std::string* TideChartLibrary::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLibrary.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLibrary::release_id() {
  // @@protoc_insertion_point(field_release:TideChartLibrary.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLibrary::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TideChartLibrary.id)
}

// string name = 2;
inline void TideChartLibrary::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLibrary::name() const {
  // @@protoc_insertion_point(field_get:TideChartLibrary.name)
  return name_.GetNoArena();
}
inline void TideChartLibrary::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLibrary.name)
}
#if LANG_CXX11
inline void TideChartLibrary::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLibrary.name)
}
#endif
inline void TideChartLibrary::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLibrary.name)
}
inline void TideChartLibrary::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLibrary.name)
}
inline ::std::string* TideChartLibrary::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLibrary.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLibrary::release_name() {
  // @@protoc_insertion_point(field_release:TideChartLibrary.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLibrary::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TideChartLibrary.name)
}

// string title = 3;
inline void TideChartLibrary::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLibrary::title() const {
  // @@protoc_insertion_point(field_get:TideChartLibrary.title)
  return title_.GetNoArena();
}
inline void TideChartLibrary::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLibrary.title)
}
#if LANG_CXX11
inline void TideChartLibrary::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLibrary.title)
}
#endif
inline void TideChartLibrary::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLibrary.title)
}
inline void TideChartLibrary::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLibrary.title)
}
inline ::std::string* TideChartLibrary::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLibrary.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLibrary::release_title() {
  // @@protoc_insertion_point(field_release:TideChartLibrary.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLibrary::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:TideChartLibrary.title)
}

// string origin = 10;
inline void TideChartLibrary::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLibrary::origin() const {
  // @@protoc_insertion_point(field_get:TideChartLibrary.origin)
  return origin_.GetNoArena();
}
inline void TideChartLibrary::set_origin(const ::std::string& value) {
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLibrary.origin)
}
#if LANG_CXX11
inline void TideChartLibrary::set_origin(::std::string&& value) {
  
  origin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLibrary.origin)
}
#endif
inline void TideChartLibrary::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLibrary.origin)
}
inline void TideChartLibrary::set_origin(const char* value, size_t size) {
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLibrary.origin)
}
inline ::std::string* TideChartLibrary::mutable_origin() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLibrary.origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLibrary::release_origin() {
  // @@protoc_insertion_point(field_release:TideChartLibrary.origin)
  
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLibrary::set_allocated_origin(::std::string* origin) {
  if (origin != nullptr) {
    
  } else {
    
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:TideChartLibrary.origin)
}

// string branch = 11;
inline void TideChartLibrary::clear_branch() {
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLibrary::branch() const {
  // @@protoc_insertion_point(field_get:TideChartLibrary.branch)
  return branch_.GetNoArena();
}
inline void TideChartLibrary::set_branch(const ::std::string& value) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLibrary.branch)
}
#if LANG_CXX11
inline void TideChartLibrary::set_branch(::std::string&& value) {
  
  branch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLibrary.branch)
}
#endif
inline void TideChartLibrary::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLibrary.branch)
}
inline void TideChartLibrary::set_branch(const char* value, size_t size) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLibrary.branch)
}
inline ::std::string* TideChartLibrary::mutable_branch() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLibrary.branch)
  return branch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLibrary::release_branch() {
  // @@protoc_insertion_point(field_release:TideChartLibrary.branch)
  
  return branch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLibrary::set_allocated_branch(::std::string* branch) {
  if (branch != nullptr) {
    
  } else {
    
  }
  branch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branch);
  // @@protoc_insertion_point(field_set_allocated:TideChartLibrary.branch)
}

// string path = 12;
inline void TideChartLibrary::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLibrary::path() const {
  // @@protoc_insertion_point(field_get:TideChartLibrary.path)
  return path_.GetNoArena();
}
inline void TideChartLibrary::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLibrary.path)
}
#if LANG_CXX11
inline void TideChartLibrary::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLibrary.path)
}
#endif
inline void TideChartLibrary::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLibrary.path)
}
inline void TideChartLibrary::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLibrary.path)
}
inline ::std::string* TideChartLibrary::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLibrary.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLibrary::release_path() {
  // @@protoc_insertion_point(field_release:TideChartLibrary.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLibrary::set_allocated_path(::std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:TideChartLibrary.path)
}

// repeated .TideChartSource files = 14;
inline int TideChartLibrary::files_size() const {
  return files_.size();
}
inline void TideChartLibrary::clear_files() {
  files_.Clear();
}
inline ::TideChartSource* TideChartLibrary::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartLibrary.files)
  return files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartSource >*
TideChartLibrary::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:TideChartLibrary.files)
  return &files_;
}
inline const ::TideChartSource& TideChartLibrary::files(int index) const {
  // @@protoc_insertion_point(field_get:TideChartLibrary.files)
  return files_.Get(index);
}
inline ::TideChartSource* TideChartLibrary::add_files() {
  // @@protoc_insertion_point(field_add:TideChartLibrary.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartSource >&
TideChartLibrary::files() const {
  // @@protoc_insertion_point(field_list:TideChartLibrary.files)
  return files_;
}

// .TideChartData methods = 15;
inline bool TideChartLibrary::has_methods() const {
  return this != internal_default_instance() && methods_ != nullptr;
}
inline void TideChartLibrary::clear_methods() {
  if (GetArenaNoVirtual() == nullptr && methods_ != nullptr) {
    delete methods_;
  }
  methods_ = nullptr;
}
inline const ::TideChartData& TideChartLibrary::methods() const {
  const ::TideChartData* p = methods_;
  // @@protoc_insertion_point(field_get:TideChartLibrary.methods)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartData*>(
      &::_TideChartData_default_instance_);
}
inline ::TideChartData* TideChartLibrary::release_methods() {
  // @@protoc_insertion_point(field_release:TideChartLibrary.methods)
  
  ::TideChartData* temp = methods_;
  methods_ = nullptr;
  return temp;
}
inline ::TideChartData* TideChartLibrary::mutable_methods() {
  
  if (methods_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartData>(GetArenaNoVirtual());
    methods_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartLibrary.methods)
  return methods_;
}
inline void TideChartLibrary::set_allocated_methods(::TideChartData* methods) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete methods_;
  }
  if (methods) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      methods = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, methods, submessage_arena);
    }
    
  } else {
    
  }
  methods_ = methods;
  // @@protoc_insertion_point(field_set_allocated:TideChartLibrary.methods)
}

// repeated .TideChartProperty settings = 16;
inline int TideChartLibrary::settings_size() const {
  return settings_.size();
}
inline void TideChartLibrary::clear_settings() {
  settings_.Clear();
}
inline ::TideChartProperty* TideChartLibrary::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartLibrary.settings)
  return settings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartLibrary::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:TideChartLibrary.settings)
  return &settings_;
}
inline const ::TideChartProperty& TideChartLibrary::settings(int index) const {
  // @@protoc_insertion_point(field_get:TideChartLibrary.settings)
  return settings_.Get(index);
}
inline ::TideChartProperty* TideChartLibrary::add_settings() {
  // @@protoc_insertion_point(field_add:TideChartLibrary.settings)
  return settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartLibrary::settings() const {
  // @@protoc_insertion_point(field_list:TideChartLibrary.settings)
  return settings_;
}

// -------------------------------------------------------------------

// TideChartSite

// int64 index = 1;
inline void TideChartSite::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartSite::index() const {
  // @@protoc_insertion_point(field_get:TideChartSite.index)
  return index_;
}
inline void TideChartSite::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:TideChartSite.index)
}

// repeated .TideChartSite stack = 2;
inline int TideChartSite::stack_size() const {
  return stack_.size();
}
inline void TideChartSite::clear_stack() {
  stack_.Clear();
}
inline ::TideChartSite* TideChartSite::mutable_stack(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartSite.stack)
  return stack_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartSite >*
TideChartSite::mutable_stack() {
  // @@protoc_insertion_point(field_mutable_list:TideChartSite.stack)
  return &stack_;
}
inline const ::TideChartSite& TideChartSite::stack(int index) const {
  // @@protoc_insertion_point(field_get:TideChartSite.stack)
  return stack_.Get(index);
}
inline ::TideChartSite* TideChartSite::add_stack() {
  // @@protoc_insertion_point(field_add:TideChartSite.stack)
  return stack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartSite >&
TideChartSite::stack() const {
  // @@protoc_insertion_point(field_list:TideChartSite.stack)
  return stack_;
}

// string path = 3;
inline void TideChartSite::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSite::path() const {
  // @@protoc_insertion_point(field_get:TideChartSite.path)
  return path_.GetNoArena();
}
inline void TideChartSite::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSite.path)
}
#if LANG_CXX11
inline void TideChartSite::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSite.path)
}
#endif
inline void TideChartSite::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSite.path)
}
inline void TideChartSite::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSite.path)
}
inline ::std::string* TideChartSite::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSite.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSite::release_path() {
  // @@protoc_insertion_point(field_release:TideChartSite.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSite::set_allocated_path(::std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:TideChartSite.path)
}

// string trigger = 4;
inline void TideChartSite::clear_trigger() {
  trigger_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSite::trigger() const {
  // @@protoc_insertion_point(field_get:TideChartSite.trigger)
  return trigger_.GetNoArena();
}
inline void TideChartSite::set_trigger(const ::std::string& value) {
  
  trigger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSite.trigger)
}
#if LANG_CXX11
inline void TideChartSite::set_trigger(::std::string&& value) {
  
  trigger_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSite.trigger)
}
#endif
inline void TideChartSite::set_trigger(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trigger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSite.trigger)
}
inline void TideChartSite::set_trigger(const char* value, size_t size) {
  
  trigger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSite.trigger)
}
inline ::std::string* TideChartSite::mutable_trigger() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSite.trigger)
  return trigger_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSite::release_trigger() {
  // @@protoc_insertion_point(field_release:TideChartSite.trigger)
  
  return trigger_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSite::set_allocated_trigger(::std::string* trigger) {
  if (trigger != nullptr) {
    
  } else {
    
  }
  trigger_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger);
  // @@protoc_insertion_point(field_set_allocated:TideChartSite.trigger)
}

// string event = 5;
inline void TideChartSite::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSite::event() const {
  // @@protoc_insertion_point(field_get:TideChartSite.event)
  return event_.GetNoArena();
}
inline void TideChartSite::set_event(const ::std::string& value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSite.event)
}
#if LANG_CXX11
inline void TideChartSite::set_event(::std::string&& value) {
  
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSite.event)
}
#endif
inline void TideChartSite::set_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSite.event)
}
inline void TideChartSite::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSite.event)
}
inline ::std::string* TideChartSite::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSite.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSite::release_event() {
  // @@protoc_insertion_point(field_release:TideChartSite.event)
  
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSite::set_allocated_event(::std::string* event) {
  if (event != nullptr) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:TideChartSite.event)
}

// repeated string scope = 6;
inline int TideChartSite::scope_size() const {
  return scope_.size();
}
inline void TideChartSite::clear_scope() {
  scope_.Clear();
}
inline const ::std::string& TideChartSite::scope(int index) const {
  // @@protoc_insertion_point(field_get:TideChartSite.scope)
  return scope_.Get(index);
}
inline ::std::string* TideChartSite::mutable_scope(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartSite.scope)
  return scope_.Mutable(index);
}
inline void TideChartSite::set_scope(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartSite.scope)
  scope_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TideChartSite::set_scope(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartSite.scope)
  scope_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TideChartSite::set_scope(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scope_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TideChartSite.scope)
}
inline void TideChartSite::set_scope(int index, const char* value, size_t size) {
  scope_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TideChartSite.scope)
}
inline ::std::string* TideChartSite::add_scope() {
  // @@protoc_insertion_point(field_add_mutable:TideChartSite.scope)
  return scope_.Add();
}
inline void TideChartSite::add_scope(const ::std::string& value) {
  scope_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TideChartSite.scope)
}
#if LANG_CXX11
inline void TideChartSite::add_scope(::std::string&& value) {
  scope_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TideChartSite.scope)
}
#endif
inline void TideChartSite::add_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scope_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TideChartSite.scope)
}
inline void TideChartSite::add_scope(const char* value, size_t size) {
  scope_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TideChartSite.scope)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
TideChartSite::scope() const {
  // @@protoc_insertion_point(field_list:TideChartSite.scope)
  return scope_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
TideChartSite::mutable_scope() {
  // @@protoc_insertion_point(field_mutable_list:TideChartSite.scope)
  return &scope_;
}

// string filter = 7;
inline void TideChartSite::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSite::filter() const {
  // @@protoc_insertion_point(field_get:TideChartSite.filter)
  return filter_.GetNoArena();
}
inline void TideChartSite::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSite.filter)
}
#if LANG_CXX11
inline void TideChartSite::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSite.filter)
}
#endif
inline void TideChartSite::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSite.filter)
}
inline void TideChartSite::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSite.filter)
}
inline ::std::string* TideChartSite::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSite.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSite::release_filter() {
  // @@protoc_insertion_point(field_release:TideChartSite.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSite::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:TideChartSite.filter)
}

// string graph = 8;
inline void TideChartSite::clear_graph() {
  graph_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSite::graph() const {
  // @@protoc_insertion_point(field_get:TideChartSite.graph)
  return graph_.GetNoArena();
}
inline void TideChartSite::set_graph(const ::std::string& value) {
  
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSite.graph)
}
#if LANG_CXX11
inline void TideChartSite::set_graph(::std::string&& value) {
  
  graph_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSite.graph)
}
#endif
inline void TideChartSite::set_graph(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSite.graph)
}
inline void TideChartSite::set_graph(const char* value, size_t size) {
  
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSite.graph)
}
inline ::std::string* TideChartSite::mutable_graph() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSite.graph)
  return graph_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSite::release_graph() {
  // @@protoc_insertion_point(field_release:TideChartSite.graph)
  
  return graph_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSite::set_allocated_graph(::std::string* graph) {
  if (graph != nullptr) {
    
  } else {
    
  }
  graph_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph);
  // @@protoc_insertion_point(field_set_allocated:TideChartSite.graph)
}

// string region = 9;
inline void TideChartSite::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSite::region() const {
  // @@protoc_insertion_point(field_get:TideChartSite.region)
  return region_.GetNoArena();
}
inline void TideChartSite::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSite.region)
}
#if LANG_CXX11
inline void TideChartSite::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSite.region)
}
#endif
inline void TideChartSite::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSite.region)
}
inline void TideChartSite::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSite.region)
}
inline ::std::string* TideChartSite::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSite.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSite::release_region() {
  // @@protoc_insertion_point(field_release:TideChartSite.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSite::set_allocated_region(::std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:TideChartSite.region)
}

// string node = 10;
inline void TideChartSite::clear_node() {
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSite::node() const {
  // @@protoc_insertion_point(field_get:TideChartSite.node)
  return node_.GetNoArena();
}
inline void TideChartSite::set_node(const ::std::string& value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSite.node)
}
#if LANG_CXX11
inline void TideChartSite::set_node(::std::string&& value) {
  
  node_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSite.node)
}
#endif
inline void TideChartSite::set_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSite.node)
}
inline void TideChartSite::set_node(const char* value, size_t size) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSite.node)
}
inline ::std::string* TideChartSite::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSite.node)
  return node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSite::release_node() {
  // @@protoc_insertion_point(field_release:TideChartSite.node)
  
  return node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSite::set_allocated_node(::std::string* node) {
  if (node != nullptr) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:TideChartSite.node)
}

// string port = 11;
inline void TideChartSite::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartSite::port() const {
  // @@protoc_insertion_point(field_get:TideChartSite.port)
  return port_.GetNoArena();
}
inline void TideChartSite::set_port(const ::std::string& value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartSite.port)
}
#if LANG_CXX11
inline void TideChartSite::set_port(::std::string&& value) {
  
  port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartSite.port)
}
#endif
inline void TideChartSite::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartSite.port)
}
inline void TideChartSite::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartSite.port)
}
inline ::std::string* TideChartSite::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:TideChartSite.port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartSite::release_port() {
  // @@protoc_insertion_point(field_release:TideChartSite.port)
  
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartSite::set_allocated_port(::std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:TideChartSite.port)
}

// repeated .TideChartProperty local = 12;
inline int TideChartSite::local_size() const {
  return local_.size();
}
inline void TideChartSite::clear_local() {
  local_.Clear();
}
inline ::TideChartProperty* TideChartSite::mutable_local(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartSite.local)
  return local_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartSite::mutable_local() {
  // @@protoc_insertion_point(field_mutable_list:TideChartSite.local)
  return &local_;
}
inline const ::TideChartProperty& TideChartSite::local(int index) const {
  // @@protoc_insertion_point(field_get:TideChartSite.local)
  return local_.Get(index);
}
inline ::TideChartProperty* TideChartSite::add_local() {
  // @@protoc_insertion_point(field_add:TideChartSite.local)
  return local_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartSite::local() const {
  // @@protoc_insertion_point(field_list:TideChartSite.local)
  return local_;
}

// -------------------------------------------------------------------

// TideChartMessage

// int64 index = 1;
inline void TideChartMessage::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartMessage::index() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.index)
  return index_;
}
inline void TideChartMessage::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:TideChartMessage.index)
}

// int64 timestamp = 2;
inline void TideChartMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.timestamp)
  return timestamp_;
}
inline void TideChartMessage::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TideChartMessage.timestamp)
}

// int64 origin = 4;
inline void TideChartMessage::clear_origin() {
  origin_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartMessage::origin() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.origin)
  return origin_;
}
inline void TideChartMessage::set_origin(::google::protobuf::int64 value) {
  
  origin_ = value;
  // @@protoc_insertion_point(field_set:TideChartMessage.origin)
}

// int64 previous = 5;
inline void TideChartMessage::clear_previous() {
  previous_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartMessage::previous() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.previous)
  return previous_;
}
inline void TideChartMessage::set_previous(::google::protobuf::int64 value) {
  
  previous_ = value;
  // @@protoc_insertion_point(field_set:TideChartMessage.previous)
}

// int64 source = 7;
inline void TideChartMessage::clear_source() {
  source_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartMessage::source() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.source)
  return source_;
}
inline void TideChartMessage::set_source(::google::protobuf::int64 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:TideChartMessage.source)
}

// int64 target = 8;
inline void TideChartMessage::clear_target() {
  target_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartMessage::target() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.target)
  return target_;
}
inline void TideChartMessage::set_target(::google::protobuf::int64 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:TideChartMessage.target)
}

// int64 delayUntil = 9;
inline void TideChartMessage::clear_delayuntil() {
  delayuntil_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartMessage::delayuntil() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.delayUntil)
  return delayuntil_;
}
inline void TideChartMessage::set_delayuntil(::google::protobuf::int64 value) {
  
  delayuntil_ = value;
  // @@protoc_insertion_point(field_set:TideChartMessage.delayUntil)
}

// int64 holdToken = 10;
inline void TideChartMessage::clear_holdtoken() {
  holdtoken_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartMessage::holdtoken() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.holdToken)
  return holdtoken_;
}
inline void TideChartMessage::set_holdtoken(::google::protobuf::int64 value) {
  
  holdtoken_ = value;
  // @@protoc_insertion_point(field_set:TideChartMessage.holdToken)
}

// int64 cancelToken = 11;
inline void TideChartMessage::clear_canceltoken() {
  canceltoken_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartMessage::canceltoken() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.cancelToken)
  return canceltoken_;
}
inline void TideChartMessage::set_canceltoken(::google::protobuf::int64 value) {
  
  canceltoken_ = value;
  // @@protoc_insertion_point(field_set:TideChartMessage.cancelToken)
}

// string type = 12;
inline void TideChartMessage::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartMessage::type() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.type)
  return type_.GetNoArena();
}
inline void TideChartMessage::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartMessage.type)
}
#if LANG_CXX11
inline void TideChartMessage::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartMessage.type)
}
#endif
inline void TideChartMessage::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartMessage.type)
}
inline void TideChartMessage::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartMessage.type)
}
inline ::std::string* TideChartMessage::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:TideChartMessage.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartMessage::release_type() {
  // @@protoc_insertion_point(field_release:TideChartMessage.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartMessage::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:TideChartMessage.type)
}

// int32 version = 13;
inline void TideChartMessage::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 TideChartMessage::version() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.version)
  return version_;
}
inline void TideChartMessage::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:TideChartMessage.version)
}

// string jsonContent = 14;
inline bool TideChartMessage::has_jsoncontent() const {
  return content_case() == kJsonContent;
}
inline void TideChartMessage::set_has_jsoncontent() {
  _oneof_case_[0] = kJsonContent;
}
inline void TideChartMessage::clear_jsoncontent() {
  if (has_jsoncontent()) {
    content_.jsoncontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& TideChartMessage::jsoncontent() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.jsonContent)
  if (has_jsoncontent()) {
    return content_.jsoncontent_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartMessage::set_jsoncontent(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartMessage.jsonContent)
  if (!has_jsoncontent()) {
    clear_content();
    set_has_jsoncontent();
    content_.jsoncontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.jsoncontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartMessage.jsonContent)
}
#if LANG_CXX11
inline void TideChartMessage::set_jsoncontent(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartMessage.jsonContent)
  if (!has_jsoncontent()) {
    clear_content();
    set_has_jsoncontent();
    content_.jsoncontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.jsoncontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartMessage.jsonContent)
}
#endif
inline void TideChartMessage::set_jsoncontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_jsoncontent()) {
    clear_content();
    set_has_jsoncontent();
    content_.jsoncontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.jsoncontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartMessage.jsonContent)
}
inline void TideChartMessage::set_jsoncontent(const char* value, size_t size) {
  if (!has_jsoncontent()) {
    clear_content();
    set_has_jsoncontent();
    content_.jsoncontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.jsoncontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartMessage.jsonContent)
}
inline ::std::string* TideChartMessage::mutable_jsoncontent() {
  if (!has_jsoncontent()) {
    clear_content();
    set_has_jsoncontent();
    content_.jsoncontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartMessage.jsonContent)
  return content_.jsoncontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartMessage::release_jsoncontent() {
  // @@protoc_insertion_point(field_release:TideChartMessage.jsonContent)
  if (has_jsoncontent()) {
    clear_has_content();
    return content_.jsoncontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartMessage::set_allocated_jsoncontent(::std::string* jsoncontent) {
  if (has_content()) {
    clear_content();
  }
  if (jsoncontent != nullptr) {
    set_has_jsoncontent();
    content_.jsoncontent_.UnsafeSetDefault(jsoncontent);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartMessage.jsonContent)
}

// bytes msgContent = 15;
inline bool TideChartMessage::has_msgcontent() const {
  return content_case() == kMsgContent;
}
inline void TideChartMessage::set_has_msgcontent() {
  _oneof_case_[0] = kMsgContent;
}
inline void TideChartMessage::clear_msgcontent() {
  if (has_msgcontent()) {
    content_.msgcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& TideChartMessage::msgcontent() const {
  // @@protoc_insertion_point(field_get:TideChartMessage.msgContent)
  if (has_msgcontent()) {
    return content_.msgcontent_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TideChartMessage::set_msgcontent(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartMessage.msgContent)
  if (!has_msgcontent()) {
    clear_content();
    set_has_msgcontent();
    content_.msgcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.msgcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartMessage.msgContent)
}
#if LANG_CXX11
inline void TideChartMessage::set_msgcontent(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartMessage.msgContent)
  if (!has_msgcontent()) {
    clear_content();
    set_has_msgcontent();
    content_.msgcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.msgcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartMessage.msgContent)
}
#endif
inline void TideChartMessage::set_msgcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_msgcontent()) {
    clear_content();
    set_has_msgcontent();
    content_.msgcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.msgcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartMessage.msgContent)
}
inline void TideChartMessage::set_msgcontent(const void* value, size_t size) {
  if (!has_msgcontent()) {
    clear_content();
    set_has_msgcontent();
    content_.msgcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.msgcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartMessage.msgContent)
}
inline ::std::string* TideChartMessage::mutable_msgcontent() {
  if (!has_msgcontent()) {
    clear_content();
    set_has_msgcontent();
    content_.msgcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TideChartMessage.msgContent)
  return content_.msgcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartMessage::release_msgcontent() {
  // @@protoc_insertion_point(field_release:TideChartMessage.msgContent)
  if (has_msgcontent()) {
    clear_has_content();
    return content_.msgcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TideChartMessage::set_allocated_msgcontent(::std::string* msgcontent) {
  if (has_content()) {
    clear_content();
  }
  if (msgcontent != nullptr) {
    set_has_msgcontent();
    content_.msgcontent_.UnsafeSetDefault(msgcontent);
  }
  // @@protoc_insertion_point(field_set_allocated:TideChartMessage.msgContent)
}

inline bool TideChartMessage::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void TideChartMessage::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline TideChartMessage::ContentCase TideChartMessage::content_case() const {
  return TideChartMessage::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TideChartContextChange

// int64 index = 1;
inline void TideChartContextChange::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartContextChange::index() const {
  // @@protoc_insertion_point(field_get:TideChartContextChange.index)
  return index_;
}
inline void TideChartContextChange::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:TideChartContextChange.index)
}

// int64 timestamp = 2;
inline void TideChartContextChange::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartContextChange::timestamp() const {
  // @@protoc_insertion_point(field_get:TideChartContextChange.timestamp)
  return timestamp_;
}
inline void TideChartContextChange::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TideChartContextChange.timestamp)
}

// string type = 3;
inline void TideChartContextChange::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartContextChange::type() const {
  // @@protoc_insertion_point(field_get:TideChartContextChange.type)
  return type_.GetNoArena();
}
inline void TideChartContextChange::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartContextChange.type)
}
#if LANG_CXX11
inline void TideChartContextChange::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartContextChange.type)
}
#endif
inline void TideChartContextChange::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartContextChange.type)
}
inline void TideChartContextChange::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartContextChange.type)
}
inline ::std::string* TideChartContextChange::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:TideChartContextChange.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartContextChange::release_type() {
  // @@protoc_insertion_point(field_release:TideChartContextChange.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartContextChange::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:TideChartContextChange.type)
}

// repeated .TideChartProperty props = 4;
inline int TideChartContextChange::props_size() const {
  return props_.size();
}
inline void TideChartContextChange::clear_props() {
  props_.Clear();
}
inline ::TideChartProperty* TideChartContextChange::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartContextChange.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartContextChange::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:TideChartContextChange.props)
  return &props_;
}
inline const ::TideChartProperty& TideChartContextChange::props(int index) const {
  // @@protoc_insertion_point(field_get:TideChartContextChange.props)
  return props_.Get(index);
}
inline ::TideChartProperty* TideChartContextChange::add_props() {
  // @@protoc_insertion_point(field_add:TideChartContextChange.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartContextChange::props() const {
  // @@protoc_insertion_point(field_list:TideChartContextChange.props)
  return props_;
}

// -------------------------------------------------------------------

// TideChartLogEntry

// int64 index = 1;
inline void TideChartLogEntry::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartLogEntry::index() const {
  // @@protoc_insertion_point(field_get:TideChartLogEntry.index)
  return index_;
}
inline void TideChartLogEntry::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:TideChartLogEntry.index)
}

// int64 timestamp = 2;
inline void TideChartLogEntry::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartLogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:TideChartLogEntry.timestamp)
  return timestamp_;
}
inline void TideChartLogEntry::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TideChartLogEntry.timestamp)
}

// int64 source = 3;
inline void TideChartLogEntry::clear_source() {
  source_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartLogEntry::source() const {
  // @@protoc_insertion_point(field_get:TideChartLogEntry.source)
  return source_;
}
inline void TideChartLogEntry::set_source(::google::protobuf::int64 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:TideChartLogEntry.source)
}

// .TideChartLogLevel level = 4;
inline void TideChartLogEntry::clear_level() {
  level_ = 0;
}
inline ::TideChartLogLevel TideChartLogEntry::level() const {
  // @@protoc_insertion_point(field_get:TideChartLogEntry.level)
  return static_cast< ::TideChartLogLevel >(level_);
}
inline void TideChartLogEntry::set_level(::TideChartLogLevel value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:TideChartLogEntry.level)
}

// repeated string tags = 5;
inline int TideChartLogEntry::tags_size() const {
  return tags_.size();
}
inline void TideChartLogEntry::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& TideChartLogEntry::tags(int index) const {
  // @@protoc_insertion_point(field_get:TideChartLogEntry.tags)
  return tags_.Get(index);
}
inline ::std::string* TideChartLogEntry::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartLogEntry.tags)
  return tags_.Mutable(index);
}
inline void TideChartLogEntry::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TideChartLogEntry.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TideChartLogEntry::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TideChartLogEntry.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TideChartLogEntry::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TideChartLogEntry.tags)
}
inline void TideChartLogEntry::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TideChartLogEntry.tags)
}
inline ::std::string* TideChartLogEntry::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:TideChartLogEntry.tags)
  return tags_.Add();
}
inline void TideChartLogEntry::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TideChartLogEntry.tags)
}
#if LANG_CXX11
inline void TideChartLogEntry::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TideChartLogEntry.tags)
}
#endif
inline void TideChartLogEntry::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TideChartLogEntry.tags)
}
inline void TideChartLogEntry::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TideChartLogEntry.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
TideChartLogEntry::tags() const {
  // @@protoc_insertion_point(field_list:TideChartLogEntry.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
TideChartLogEntry::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:TideChartLogEntry.tags)
  return &tags_;
}

// string message = 6;
inline void TideChartLogEntry::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartLogEntry::message() const {
  // @@protoc_insertion_point(field_get:TideChartLogEntry.message)
  return message_.GetNoArena();
}
inline void TideChartLogEntry::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartLogEntry.message)
}
#if LANG_CXX11
inline void TideChartLogEntry::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartLogEntry.message)
}
#endif
inline void TideChartLogEntry::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartLogEntry.message)
}
inline void TideChartLogEntry::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartLogEntry.message)
}
inline ::std::string* TideChartLogEntry::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:TideChartLogEntry.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartLogEntry::release_message() {
  // @@protoc_insertion_point(field_release:TideChartLogEntry.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartLogEntry::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:TideChartLogEntry.message)
}

// repeated int64 refs = 7;
inline int TideChartLogEntry::refs_size() const {
  return refs_.size();
}
inline void TideChartLogEntry::clear_refs() {
  refs_.Clear();
}
inline ::google::protobuf::int64 TideChartLogEntry::refs(int index) const {
  // @@protoc_insertion_point(field_get:TideChartLogEntry.refs)
  return refs_.Get(index);
}
inline void TideChartLogEntry::set_refs(int index, ::google::protobuf::int64 value) {
  refs_.Set(index, value);
  // @@protoc_insertion_point(field_set:TideChartLogEntry.refs)
}
inline void TideChartLogEntry::add_refs(::google::protobuf::int64 value) {
  refs_.Add(value);
  // @@protoc_insertion_point(field_add:TideChartLogEntry.refs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TideChartLogEntry::refs() const {
  // @@protoc_insertion_point(field_list:TideChartLogEntry.refs)
  return refs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TideChartLogEntry::mutable_refs() {
  // @@protoc_insertion_point(field_mutable_list:TideChartLogEntry.refs)
  return &refs_;
}

// repeated .TideChartProperty props = 8;
inline int TideChartLogEntry::props_size() const {
  return props_.size();
}
inline void TideChartLogEntry::clear_props() {
  props_.Clear();
}
inline ::TideChartProperty* TideChartLogEntry::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartLogEntry.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartLogEntry::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:TideChartLogEntry.props)
  return &props_;
}
inline const ::TideChartProperty& TideChartLogEntry::props(int index) const {
  // @@protoc_insertion_point(field_get:TideChartLogEntry.props)
  return props_.Get(index);
}
inline ::TideChartProperty* TideChartLogEntry::add_props() {
  // @@protoc_insertion_point(field_add:TideChartLogEntry.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartLogEntry::props() const {
  // @@protoc_insertion_point(field_list:TideChartLogEntry.props)
  return props_;
}

// -------------------------------------------------------------------

// TideChartContext

// string id = 1;
inline void TideChartContext::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartContext::id() const {
  // @@protoc_insertion_point(field_get:TideChartContext.id)
  return id_.GetNoArena();
}
inline void TideChartContext::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartContext.id)
}
#if LANG_CXX11
inline void TideChartContext::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartContext.id)
}
#endif
inline void TideChartContext::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartContext.id)
}
inline void TideChartContext::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartContext.id)
}
inline ::std::string* TideChartContext::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TideChartContext.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartContext::release_id() {
  // @@protoc_insertion_point(field_release:TideChartContext.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartContext::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TideChartContext.id)
}

// int64 index = 2;
inline void TideChartContext::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartContext::index() const {
  // @@protoc_insertion_point(field_get:TideChartContext.index)
  return index_;
}
inline void TideChartContext::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:TideChartContext.index)
}

// int64 timestamp = 3;
inline void TideChartContext::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartContext::timestamp() const {
  // @@protoc_insertion_point(field_get:TideChartContext.timestamp)
  return timestamp_;
}
inline void TideChartContext::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TideChartContext.timestamp)
}

// string version = 4;
inline void TideChartContext::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartContext::version() const {
  // @@protoc_insertion_point(field_get:TideChartContext.version)
  return version_.GetNoArena();
}
inline void TideChartContext::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartContext.version)
}
#if LANG_CXX11
inline void TideChartContext::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartContext.version)
}
#endif
inline void TideChartContext::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartContext.version)
}
inline void TideChartContext::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartContext.version)
}
inline ::std::string* TideChartContext::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:TideChartContext.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartContext::release_version() {
  // @@protoc_insertion_point(field_release:TideChartContext.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartContext::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TideChartContext.version)
}

// repeated .TideChartSite sites = 5;
inline int TideChartContext::sites_size() const {
  return sites_.size();
}
inline void TideChartContext::clear_sites() {
  sites_.Clear();
}
inline ::TideChartSite* TideChartContext::mutable_sites(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartContext.sites)
  return sites_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartSite >*
TideChartContext::mutable_sites() {
  // @@protoc_insertion_point(field_mutable_list:TideChartContext.sites)
  return &sites_;
}
inline const ::TideChartSite& TideChartContext::sites(int index) const {
  // @@protoc_insertion_point(field_get:TideChartContext.sites)
  return sites_.Get(index);
}
inline ::TideChartSite* TideChartContext::add_sites() {
  // @@protoc_insertion_point(field_add:TideChartContext.sites)
  return sites_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartSite >&
TideChartContext::sites() const {
  // @@protoc_insertion_point(field_list:TideChartContext.sites)
  return sites_;
}

// repeated .TideChartMessage messages = 6;
inline int TideChartContext::messages_size() const {
  return messages_.size();
}
inline void TideChartContext::clear_messages() {
  messages_.Clear();
}
inline ::TideChartMessage* TideChartContext::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartContext.messages)
  return messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartMessage >*
TideChartContext::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:TideChartContext.messages)
  return &messages_;
}
inline const ::TideChartMessage& TideChartContext::messages(int index) const {
  // @@protoc_insertion_point(field_get:TideChartContext.messages)
  return messages_.Get(index);
}
inline ::TideChartMessage* TideChartContext::add_messages() {
  // @@protoc_insertion_point(field_add:TideChartContext.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartMessage >&
TideChartContext::messages() const {
  // @@protoc_insertion_point(field_list:TideChartContext.messages)
  return messages_;
}

// repeated .TideChartProperty global = 7;
inline int TideChartContext::global_size() const {
  return global_.size();
}
inline void TideChartContext::clear_global() {
  global_.Clear();
}
inline ::TideChartProperty* TideChartContext::mutable_global(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartContext.global)
  return global_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartContext::mutable_global() {
  // @@protoc_insertion_point(field_mutable_list:TideChartContext.global)
  return &global_;
}
inline const ::TideChartProperty& TideChartContext::global(int index) const {
  // @@protoc_insertion_point(field_get:TideChartContext.global)
  return global_.Get(index);
}
inline ::TideChartProperty* TideChartContext::add_global() {
  // @@protoc_insertion_point(field_add:TideChartContext.global)
  return global_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartContext::global() const {
  // @@protoc_insertion_point(field_list:TideChartContext.global)
  return global_;
}

// int64 startTime = 8;
inline void TideChartContext::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartContext::starttime() const {
  // @@protoc_insertion_point(field_get:TideChartContext.startTime)
  return starttime_;
}
inline void TideChartContext::set_starttime(::google::protobuf::int64 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:TideChartContext.startTime)
}

// int64 startIndex = 9;
inline void TideChartContext::clear_startindex() {
  startindex_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TideChartContext::startindex() const {
  // @@protoc_insertion_point(field_get:TideChartContext.startIndex)
  return startindex_;
}
inline void TideChartContext::set_startindex(::google::protobuf::int64 value) {
  
  startindex_ = value;
  // @@protoc_insertion_point(field_set:TideChartContext.startIndex)
}

// repeated int64 active = 10;
inline int TideChartContext::active_size() const {
  return active_.size();
}
inline void TideChartContext::clear_active() {
  active_.Clear();
}
inline ::google::protobuf::int64 TideChartContext::active(int index) const {
  // @@protoc_insertion_point(field_get:TideChartContext.active)
  return active_.Get(index);
}
inline void TideChartContext::set_active(int index, ::google::protobuf::int64 value) {
  active_.Set(index, value);
  // @@protoc_insertion_point(field_set:TideChartContext.active)
}
inline void TideChartContext::add_active(::google::protobuf::int64 value) {
  active_.Add(value);
  // @@protoc_insertion_point(field_add:TideChartContext.active)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TideChartContext::active() const {
  // @@protoc_insertion_point(field_list:TideChartContext.active)
  return active_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TideChartContext::mutable_active() {
  // @@protoc_insertion_point(field_mutable_list:TideChartContext.active)
  return &active_;
}

// repeated int64 waiting = 11;
inline int TideChartContext::waiting_size() const {
  return waiting_.size();
}
inline void TideChartContext::clear_waiting() {
  waiting_.Clear();
}
inline ::google::protobuf::int64 TideChartContext::waiting(int index) const {
  // @@protoc_insertion_point(field_get:TideChartContext.waiting)
  return waiting_.Get(index);
}
inline void TideChartContext::set_waiting(int index, ::google::protobuf::int64 value) {
  waiting_.Set(index, value);
  // @@protoc_insertion_point(field_set:TideChartContext.waiting)
}
inline void TideChartContext::add_waiting(::google::protobuf::int64 value) {
  waiting_.Add(value);
  // @@protoc_insertion_point(field_add:TideChartContext.waiting)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TideChartContext::waiting() const {
  // @@protoc_insertion_point(field_list:TideChartContext.waiting)
  return waiting_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TideChartContext::mutable_waiting() {
  // @@protoc_insertion_point(field_mutable_list:TideChartContext.waiting)
  return &waiting_;
}

// repeated int64 paused = 12;
inline int TideChartContext::paused_size() const {
  return paused_.size();
}
inline void TideChartContext::clear_paused() {
  paused_.Clear();
}
inline ::google::protobuf::int64 TideChartContext::paused(int index) const {
  // @@protoc_insertion_point(field_get:TideChartContext.paused)
  return paused_.Get(index);
}
inline void TideChartContext::set_paused(int index, ::google::protobuf::int64 value) {
  paused_.Set(index, value);
  // @@protoc_insertion_point(field_set:TideChartContext.paused)
}
inline void TideChartContext::add_paused(::google::protobuf::int64 value) {
  paused_.Add(value);
  // @@protoc_insertion_point(field_add:TideChartContext.paused)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TideChartContext::paused() const {
  // @@protoc_insertion_point(field_list:TideChartContext.paused)
  return paused_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TideChartContext::mutable_paused() {
  // @@protoc_insertion_point(field_mutable_list:TideChartContext.paused)
  return &paused_;
}

// repeated int64 disabled = 13;
inline int TideChartContext::disabled_size() const {
  return disabled_.size();
}
inline void TideChartContext::clear_disabled() {
  disabled_.Clear();
}
inline ::google::protobuf::int64 TideChartContext::disabled(int index) const {
  // @@protoc_insertion_point(field_get:TideChartContext.disabled)
  return disabled_.Get(index);
}
inline void TideChartContext::set_disabled(int index, ::google::protobuf::int64 value) {
  disabled_.Set(index, value);
  // @@protoc_insertion_point(field_set:TideChartContext.disabled)
}
inline void TideChartContext::add_disabled(::google::protobuf::int64 value) {
  disabled_.Add(value);
  // @@protoc_insertion_point(field_add:TideChartContext.disabled)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TideChartContext::disabled() const {
  // @@protoc_insertion_point(field_list:TideChartContext.disabled)
  return disabled_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TideChartContext::mutable_disabled() {
  // @@protoc_insertion_point(field_mutable_list:TideChartContext.disabled)
  return &disabled_;
}

// repeated .TideChartContextChange events = 14;
inline int TideChartContext::events_size() const {
  return events_.size();
}
inline void TideChartContext::clear_events() {
  events_.Clear();
}
inline ::TideChartContextChange* TideChartContext::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartContext.events)
  return events_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartContextChange >*
TideChartContext::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:TideChartContext.events)
  return &events_;
}
inline const ::TideChartContextChange& TideChartContext::events(int index) const {
  // @@protoc_insertion_point(field_get:TideChartContext.events)
  return events_.Get(index);
}
inline ::TideChartContextChange* TideChartContext::add_events() {
  // @@protoc_insertion_point(field_add:TideChartContext.events)
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartContextChange >&
TideChartContext::events() const {
  // @@protoc_insertion_point(field_list:TideChartContext.events)
  return events_;
}

// repeated .TideChartLogEntry log = 15;
inline int TideChartContext::log_size() const {
  return log_.size();
}
inline void TideChartContext::clear_log() {
  log_.Clear();
}
inline ::TideChartLogEntry* TideChartContext::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartContext.log)
  return log_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartLogEntry >*
TideChartContext::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:TideChartContext.log)
  return &log_;
}
inline const ::TideChartLogEntry& TideChartContext::log(int index) const {
  // @@protoc_insertion_point(field_get:TideChartContext.log)
  return log_.Get(index);
}
inline ::TideChartLogEntry* TideChartContext::add_log() {
  // @@protoc_insertion_point(field_add:TideChartContext.log)
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartLogEntry >&
TideChartContext::log() const {
  // @@protoc_insertion_point(field_list:TideChartContext.log)
  return log_;
}

// -------------------------------------------------------------------

// TideChartData

// string version = 1;
inline void TideChartData::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartData::version() const {
  // @@protoc_insertion_point(field_get:TideChartData.version)
  return version_.GetNoArena();
}
inline void TideChartData::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartData.version)
}
#if LANG_CXX11
inline void TideChartData::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartData.version)
}
#endif
inline void TideChartData::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartData.version)
}
inline void TideChartData::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartData.version)
}
inline ::std::string* TideChartData::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:TideChartData.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartData::release_version() {
  // @@protoc_insertion_point(field_release:TideChartData.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartData::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TideChartData.version)
}

// string branch = 2;
inline void TideChartData::clear_branch() {
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartData::branch() const {
  // @@protoc_insertion_point(field_get:TideChartData.branch)
  return branch_.GetNoArena();
}
inline void TideChartData::set_branch(const ::std::string& value) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartData.branch)
}
#if LANG_CXX11
inline void TideChartData::set_branch(::std::string&& value) {
  
  branch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartData.branch)
}
#endif
inline void TideChartData::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartData.branch)
}
inline void TideChartData::set_branch(const char* value, size_t size) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartData.branch)
}
inline ::std::string* TideChartData::mutable_branch() {
  
  // @@protoc_insertion_point(field_mutable:TideChartData.branch)
  return branch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartData::release_branch() {
  // @@protoc_insertion_point(field_release:TideChartData.branch)
  
  return branch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartData::set_allocated_branch(::std::string* branch) {
  if (branch != nullptr) {
    
  } else {
    
  }
  branch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branch);
  // @@protoc_insertion_point(field_set_allocated:TideChartData.branch)
}

// string source = 3;
inline void TideChartData::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartData::source() const {
  // @@protoc_insertion_point(field_get:TideChartData.source)
  return source_.GetNoArena();
}
inline void TideChartData::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartData.source)
}
#if LANG_CXX11
inline void TideChartData::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartData.source)
}
#endif
inline void TideChartData::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartData.source)
}
inline void TideChartData::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartData.source)
}
inline ::std::string* TideChartData::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:TideChartData.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartData::release_source() {
  // @@protoc_insertion_point(field_release:TideChartData.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartData::set_allocated_source(::std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:TideChartData.source)
}

// string merge = 4;
inline void TideChartData::clear_merge() {
  merge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartData::merge() const {
  // @@protoc_insertion_point(field_get:TideChartData.merge)
  return merge_.GetNoArena();
}
inline void TideChartData::set_merge(const ::std::string& value) {
  
  merge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartData.merge)
}
#if LANG_CXX11
inline void TideChartData::set_merge(::std::string&& value) {
  
  merge_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartData.merge)
}
#endif
inline void TideChartData::set_merge(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartData.merge)
}
inline void TideChartData::set_merge(const char* value, size_t size) {
  
  merge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartData.merge)
}
inline ::std::string* TideChartData::mutable_merge() {
  
  // @@protoc_insertion_point(field_mutable:TideChartData.merge)
  return merge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartData::release_merge() {
  // @@protoc_insertion_point(field_release:TideChartData.merge)
  
  return merge_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartData::set_allocated_merge(::std::string* merge) {
  if (merge != nullptr) {
    
  } else {
    
  }
  merge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merge);
  // @@protoc_insertion_point(field_set_allocated:TideChartData.merge)
}

// string commitDate = 5;
inline void TideChartData::clear_commitdate() {
  commitdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartData::commitdate() const {
  // @@protoc_insertion_point(field_get:TideChartData.commitDate)
  return commitdate_.GetNoArena();
}
inline void TideChartData::set_commitdate(const ::std::string& value) {
  
  commitdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartData.commitDate)
}
#if LANG_CXX11
inline void TideChartData::set_commitdate(::std::string&& value) {
  
  commitdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartData.commitDate)
}
#endif
inline void TideChartData::set_commitdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commitdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartData.commitDate)
}
inline void TideChartData::set_commitdate(const char* value, size_t size) {
  
  commitdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartData.commitDate)
}
inline ::std::string* TideChartData::mutable_commitdate() {
  
  // @@protoc_insertion_point(field_mutable:TideChartData.commitDate)
  return commitdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartData::release_commitdate() {
  // @@protoc_insertion_point(field_release:TideChartData.commitDate)
  
  return commitdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartData::set_allocated_commitdate(::std::string* commitdate) {
  if (commitdate != nullptr) {
    
  } else {
    
  }
  commitdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commitdate);
  // @@protoc_insertion_point(field_set_allocated:TideChartData.commitDate)
}

// string commitBy = 6;
inline void TideChartData::clear_commitby() {
  commitby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartData::commitby() const {
  // @@protoc_insertion_point(field_get:TideChartData.commitBy)
  return commitby_.GetNoArena();
}
inline void TideChartData::set_commitby(const ::std::string& value) {
  
  commitby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartData.commitBy)
}
#if LANG_CXX11
inline void TideChartData::set_commitby(::std::string&& value) {
  
  commitby_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartData.commitBy)
}
#endif
inline void TideChartData::set_commitby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commitby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartData.commitBy)
}
inline void TideChartData::set_commitby(const char* value, size_t size) {
  
  commitby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartData.commitBy)
}
inline ::std::string* TideChartData::mutable_commitby() {
  
  // @@protoc_insertion_point(field_mutable:TideChartData.commitBy)
  return commitby_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartData::release_commitby() {
  // @@protoc_insertion_point(field_release:TideChartData.commitBy)
  
  return commitby_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartData::set_allocated_commitby(::std::string* commitby) {
  if (commitby != nullptr) {
    
  } else {
    
  }
  commitby_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commitby);
  // @@protoc_insertion_point(field_set_allocated:TideChartData.commitBy)
}

// string commitDesc = 7;
inline void TideChartData::clear_commitdesc() {
  commitdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartData::commitdesc() const {
  // @@protoc_insertion_point(field_get:TideChartData.commitDesc)
  return commitdesc_.GetNoArena();
}
inline void TideChartData::set_commitdesc(const ::std::string& value) {
  
  commitdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartData.commitDesc)
}
#if LANG_CXX11
inline void TideChartData::set_commitdesc(::std::string&& value) {
  
  commitdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartData.commitDesc)
}
#endif
inline void TideChartData::set_commitdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commitdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartData.commitDesc)
}
inline void TideChartData::set_commitdesc(const char* value, size_t size) {
  
  commitdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartData.commitDesc)
}
inline ::std::string* TideChartData::mutable_commitdesc() {
  
  // @@protoc_insertion_point(field_mutable:TideChartData.commitDesc)
  return commitdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartData::release_commitdesc() {
  // @@protoc_insertion_point(field_release:TideChartData.commitDesc)
  
  return commitdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartData::set_allocated_commitdesc(::std::string* commitdesc) {
  if (commitdesc != nullptr) {
    
  } else {
    
  }
  commitdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commitdesc);
  // @@protoc_insertion_point(field_set_allocated:TideChartData.commitDesc)
}

// string commitNotes = 8;
inline void TideChartData::clear_commitnotes() {
  commitnotes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartData::commitnotes() const {
  // @@protoc_insertion_point(field_get:TideChartData.commitNotes)
  return commitnotes_.GetNoArena();
}
inline void TideChartData::set_commitnotes(const ::std::string& value) {
  
  commitnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartData.commitNotes)
}
#if LANG_CXX11
inline void TideChartData::set_commitnotes(::std::string&& value) {
  
  commitnotes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartData.commitNotes)
}
#endif
inline void TideChartData::set_commitnotes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commitnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartData.commitNotes)
}
inline void TideChartData::set_commitnotes(const char* value, size_t size) {
  
  commitnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartData.commitNotes)
}
inline ::std::string* TideChartData::mutable_commitnotes() {
  
  // @@protoc_insertion_point(field_mutable:TideChartData.commitNotes)
  return commitnotes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartData::release_commitnotes() {
  // @@protoc_insertion_point(field_release:TideChartData.commitNotes)
  
  return commitnotes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartData::set_allocated_commitnotes(::std::string* commitnotes) {
  if (commitnotes != nullptr) {
    
  } else {
    
  }
  commitnotes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commitnotes);
  // @@protoc_insertion_point(field_set_allocated:TideChartData.commitNotes)
}

// repeated .TideChartGraph sheets = 9;
inline int TideChartData::sheets_size() const {
  return sheets_.size();
}
inline void TideChartData::clear_sheets() {
  sheets_.Clear();
}
inline ::TideChartGraph* TideChartData::mutable_sheets(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartData.sheets)
  return sheets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartGraph >*
TideChartData::mutable_sheets() {
  // @@protoc_insertion_point(field_mutable_list:TideChartData.sheets)
  return &sheets_;
}
inline const ::TideChartGraph& TideChartData::sheets(int index) const {
  // @@protoc_insertion_point(field_get:TideChartData.sheets)
  return sheets_.Get(index);
}
inline ::TideChartGraph* TideChartData::add_sheets() {
  // @@protoc_insertion_point(field_add:TideChartData.sheets)
  return sheets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartGraph >&
TideChartData::sheets() const {
  // @@protoc_insertion_point(field_list:TideChartData.sheets)
  return sheets_;
}

// repeated .TideChartProperty props = 10;
inline int TideChartData::props_size() const {
  return props_.size();
}
inline void TideChartData::clear_props() {
  props_.Clear();
}
inline ::TideChartProperty* TideChartData::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartData.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartData::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:TideChartData.props)
  return &props_;
}
inline const ::TideChartProperty& TideChartData::props(int index) const {
  // @@protoc_insertion_point(field_get:TideChartData.props)
  return props_.Get(index);
}
inline ::TideChartProperty* TideChartData::add_props() {
  // @@protoc_insertion_point(field_add:TideChartData.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartData::props() const {
  // @@protoc_insertion_point(field_list:TideChartData.props)
  return props_;
}

// repeated .TideChartNote notes = 11;
inline int TideChartData::notes_size() const {
  return notes_.size();
}
inline void TideChartData::clear_notes() {
  notes_.Clear();
}
inline ::TideChartNote* TideChartData::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartData.notes)
  return notes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartNote >*
TideChartData::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:TideChartData.notes)
  return &notes_;
}
inline const ::TideChartNote& TideChartData::notes(int index) const {
  // @@protoc_insertion_point(field_get:TideChartData.notes)
  return notes_.Get(index);
}
inline ::TideChartNote* TideChartData::add_notes() {
  // @@protoc_insertion_point(field_add:TideChartData.notes)
  return notes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartNote >&
TideChartData::notes() const {
  // @@protoc_insertion_point(field_list:TideChartData.notes)
  return notes_;
}

// repeated .TideChartLibrary library = 12;
inline int TideChartData::library_size() const {
  return library_.size();
}
inline void TideChartData::clear_library() {
  library_.Clear();
}
inline ::TideChartLibrary* TideChartData::mutable_library(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartData.library)
  return library_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartLibrary >*
TideChartData::mutable_library() {
  // @@protoc_insertion_point(field_mutable_list:TideChartData.library)
  return &library_;
}
inline const ::TideChartLibrary& TideChartData::library(int index) const {
  // @@protoc_insertion_point(field_get:TideChartData.library)
  return library_.Get(index);
}
inline ::TideChartLibrary* TideChartData::add_library() {
  // @@protoc_insertion_point(field_add:TideChartData.library)
  return library_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartLibrary >&
TideChartData::library() const {
  // @@protoc_insertion_point(field_list:TideChartData.library)
  return library_;
}

// repeated .TideChartProperty settings = 22;
inline int TideChartData::settings_size() const {
  return settings_.size();
}
inline void TideChartData::clear_settings() {
  settings_.Clear();
}
inline ::TideChartProperty* TideChartData::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartData.settings)
  return settings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartProperty >*
TideChartData::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:TideChartData.settings)
  return &settings_;
}
inline const ::TideChartProperty& TideChartData::settings(int index) const {
  // @@protoc_insertion_point(field_get:TideChartData.settings)
  return settings_.Get(index);
}
inline ::TideChartProperty* TideChartData::add_settings() {
  // @@protoc_insertion_point(field_add:TideChartData.settings)
  return settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartProperty >&
TideChartData::settings() const {
  // @@protoc_insertion_point(field_list:TideChartData.settings)
  return settings_;
}

// -------------------------------------------------------------------

// TideChartHeader

// string version = 1;
inline void TideChartHeader::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartHeader::version() const {
  // @@protoc_insertion_point(field_get:TideChartHeader.version)
  return version_.GetNoArena();
}
inline void TideChartHeader::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartHeader.version)
}
#if LANG_CXX11
inline void TideChartHeader::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartHeader.version)
}
#endif
inline void TideChartHeader::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartHeader.version)
}
inline void TideChartHeader::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartHeader.version)
}
inline ::std::string* TideChartHeader::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:TideChartHeader.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartHeader::release_version() {
  // @@protoc_insertion_point(field_release:TideChartHeader.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartHeader::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TideChartHeader.version)
}

// string branch = 2;
inline void TideChartHeader::clear_branch() {
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartHeader::branch() const {
  // @@protoc_insertion_point(field_get:TideChartHeader.branch)
  return branch_.GetNoArena();
}
inline void TideChartHeader::set_branch(const ::std::string& value) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartHeader.branch)
}
#if LANG_CXX11
inline void TideChartHeader::set_branch(::std::string&& value) {
  
  branch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartHeader.branch)
}
#endif
inline void TideChartHeader::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartHeader.branch)
}
inline void TideChartHeader::set_branch(const char* value, size_t size) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartHeader.branch)
}
inline ::std::string* TideChartHeader::mutable_branch() {
  
  // @@protoc_insertion_point(field_mutable:TideChartHeader.branch)
  return branch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartHeader::release_branch() {
  // @@protoc_insertion_point(field_release:TideChartHeader.branch)
  
  return branch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartHeader::set_allocated_branch(::std::string* branch) {
  if (branch != nullptr) {
    
  } else {
    
  }
  branch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branch);
  // @@protoc_insertion_point(field_set_allocated:TideChartHeader.branch)
}

// string source = 3;
inline void TideChartHeader::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartHeader::source() const {
  // @@protoc_insertion_point(field_get:TideChartHeader.source)
  return source_.GetNoArena();
}
inline void TideChartHeader::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartHeader.source)
}
#if LANG_CXX11
inline void TideChartHeader::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartHeader.source)
}
#endif
inline void TideChartHeader::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartHeader.source)
}
inline void TideChartHeader::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartHeader.source)
}
inline ::std::string* TideChartHeader::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:TideChartHeader.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartHeader::release_source() {
  // @@protoc_insertion_point(field_release:TideChartHeader.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartHeader::set_allocated_source(::std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:TideChartHeader.source)
}

// string merge = 4;
inline void TideChartHeader::clear_merge() {
  merge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartHeader::merge() const {
  // @@protoc_insertion_point(field_get:TideChartHeader.merge)
  return merge_.GetNoArena();
}
inline void TideChartHeader::set_merge(const ::std::string& value) {
  
  merge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartHeader.merge)
}
#if LANG_CXX11
inline void TideChartHeader::set_merge(::std::string&& value) {
  
  merge_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartHeader.merge)
}
#endif
inline void TideChartHeader::set_merge(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartHeader.merge)
}
inline void TideChartHeader::set_merge(const char* value, size_t size) {
  
  merge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartHeader.merge)
}
inline ::std::string* TideChartHeader::mutable_merge() {
  
  // @@protoc_insertion_point(field_mutable:TideChartHeader.merge)
  return merge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartHeader::release_merge() {
  // @@protoc_insertion_point(field_release:TideChartHeader.merge)
  
  return merge_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartHeader::set_allocated_merge(::std::string* merge) {
  if (merge != nullptr) {
    
  } else {
    
  }
  merge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merge);
  // @@protoc_insertion_point(field_set_allocated:TideChartHeader.merge)
}

// string commitDate = 5;
inline void TideChartHeader::clear_commitdate() {
  commitdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartHeader::commitdate() const {
  // @@protoc_insertion_point(field_get:TideChartHeader.commitDate)
  return commitdate_.GetNoArena();
}
inline void TideChartHeader::set_commitdate(const ::std::string& value) {
  
  commitdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartHeader.commitDate)
}
#if LANG_CXX11
inline void TideChartHeader::set_commitdate(::std::string&& value) {
  
  commitdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartHeader.commitDate)
}
#endif
inline void TideChartHeader::set_commitdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commitdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartHeader.commitDate)
}
inline void TideChartHeader::set_commitdate(const char* value, size_t size) {
  
  commitdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartHeader.commitDate)
}
inline ::std::string* TideChartHeader::mutable_commitdate() {
  
  // @@protoc_insertion_point(field_mutable:TideChartHeader.commitDate)
  return commitdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartHeader::release_commitdate() {
  // @@protoc_insertion_point(field_release:TideChartHeader.commitDate)
  
  return commitdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartHeader::set_allocated_commitdate(::std::string* commitdate) {
  if (commitdate != nullptr) {
    
  } else {
    
  }
  commitdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commitdate);
  // @@protoc_insertion_point(field_set_allocated:TideChartHeader.commitDate)
}

// string commitBy = 6;
inline void TideChartHeader::clear_commitby() {
  commitby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartHeader::commitby() const {
  // @@protoc_insertion_point(field_get:TideChartHeader.commitBy)
  return commitby_.GetNoArena();
}
inline void TideChartHeader::set_commitby(const ::std::string& value) {
  
  commitby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartHeader.commitBy)
}
#if LANG_CXX11
inline void TideChartHeader::set_commitby(::std::string&& value) {
  
  commitby_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartHeader.commitBy)
}
#endif
inline void TideChartHeader::set_commitby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commitby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartHeader.commitBy)
}
inline void TideChartHeader::set_commitby(const char* value, size_t size) {
  
  commitby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartHeader.commitBy)
}
inline ::std::string* TideChartHeader::mutable_commitby() {
  
  // @@protoc_insertion_point(field_mutable:TideChartHeader.commitBy)
  return commitby_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartHeader::release_commitby() {
  // @@protoc_insertion_point(field_release:TideChartHeader.commitBy)
  
  return commitby_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartHeader::set_allocated_commitby(::std::string* commitby) {
  if (commitby != nullptr) {
    
  } else {
    
  }
  commitby_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commitby);
  // @@protoc_insertion_point(field_set_allocated:TideChartHeader.commitBy)
}

// string commitDesc = 7;
inline void TideChartHeader::clear_commitdesc() {
  commitdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartHeader::commitdesc() const {
  // @@protoc_insertion_point(field_get:TideChartHeader.commitDesc)
  return commitdesc_.GetNoArena();
}
inline void TideChartHeader::set_commitdesc(const ::std::string& value) {
  
  commitdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartHeader.commitDesc)
}
#if LANG_CXX11
inline void TideChartHeader::set_commitdesc(::std::string&& value) {
  
  commitdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartHeader.commitDesc)
}
#endif
inline void TideChartHeader::set_commitdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commitdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartHeader.commitDesc)
}
inline void TideChartHeader::set_commitdesc(const char* value, size_t size) {
  
  commitdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartHeader.commitDesc)
}
inline ::std::string* TideChartHeader::mutable_commitdesc() {
  
  // @@protoc_insertion_point(field_mutable:TideChartHeader.commitDesc)
  return commitdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartHeader::release_commitdesc() {
  // @@protoc_insertion_point(field_release:TideChartHeader.commitDesc)
  
  return commitdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartHeader::set_allocated_commitdesc(::std::string* commitdesc) {
  if (commitdesc != nullptr) {
    
  } else {
    
  }
  commitdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commitdesc);
  // @@protoc_insertion_point(field_set_allocated:TideChartHeader.commitDesc)
}

// string commitNotes = 8;
inline void TideChartHeader::clear_commitnotes() {
  commitnotes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartHeader::commitnotes() const {
  // @@protoc_insertion_point(field_get:TideChartHeader.commitNotes)
  return commitnotes_.GetNoArena();
}
inline void TideChartHeader::set_commitnotes(const ::std::string& value) {
  
  commitnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartHeader.commitNotes)
}
#if LANG_CXX11
inline void TideChartHeader::set_commitnotes(::std::string&& value) {
  
  commitnotes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartHeader.commitNotes)
}
#endif
inline void TideChartHeader::set_commitnotes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commitnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartHeader.commitNotes)
}
inline void TideChartHeader::set_commitnotes(const char* value, size_t size) {
  
  commitnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartHeader.commitNotes)
}
inline ::std::string* TideChartHeader::mutable_commitnotes() {
  
  // @@protoc_insertion_point(field_mutable:TideChartHeader.commitNotes)
  return commitnotes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartHeader::release_commitnotes() {
  // @@protoc_insertion_point(field_release:TideChartHeader.commitNotes)
  
  return commitnotes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartHeader::set_allocated_commitnotes(::std::string* commitnotes) {
  if (commitnotes != nullptr) {
    
  } else {
    
  }
  commitnotes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commitnotes);
  // @@protoc_insertion_point(field_set_allocated:TideChartHeader.commitNotes)
}

// -------------------------------------------------------------------

// TideChartFile

// string id = 1;
inline void TideChartFile::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFile::id() const {
  // @@protoc_insertion_point(field_get:TideChartFile.id)
  return id_.GetNoArena();
}
inline void TideChartFile::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFile.id)
}
#if LANG_CXX11
inline void TideChartFile::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFile.id)
}
#endif
inline void TideChartFile::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFile.id)
}
inline void TideChartFile::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFile.id)
}
inline ::std::string* TideChartFile::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFile.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFile::release_id() {
  // @@protoc_insertion_point(field_release:TideChartFile.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFile::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TideChartFile.id)
}

// string name = 2;
inline void TideChartFile::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFile::name() const {
  // @@protoc_insertion_point(field_get:TideChartFile.name)
  return name_.GetNoArena();
}
inline void TideChartFile::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFile.name)
}
#if LANG_CXX11
inline void TideChartFile::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFile.name)
}
#endif
inline void TideChartFile::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFile.name)
}
inline void TideChartFile::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFile.name)
}
inline ::std::string* TideChartFile::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFile.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFile::release_name() {
  // @@protoc_insertion_point(field_release:TideChartFile.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFile::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TideChartFile.name)
}

// string path = 3;
inline void TideChartFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFile::path() const {
  // @@protoc_insertion_point(field_get:TideChartFile.path)
  return path_.GetNoArena();
}
inline void TideChartFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFile.path)
}
#if LANG_CXX11
inline void TideChartFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFile.path)
}
#endif
inline void TideChartFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFile.path)
}
inline void TideChartFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFile.path)
}
inline ::std::string* TideChartFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFile::release_path() {
  // @@protoc_insertion_point(field_release:TideChartFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFile::set_allocated_path(::std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:TideChartFile.path)
}

// string origin = 4;
inline void TideChartFile::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFile::origin() const {
  // @@protoc_insertion_point(field_get:TideChartFile.origin)
  return origin_.GetNoArena();
}
inline void TideChartFile::set_origin(const ::std::string& value) {
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFile.origin)
}
#if LANG_CXX11
inline void TideChartFile::set_origin(::std::string&& value) {
  
  origin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFile.origin)
}
#endif
inline void TideChartFile::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFile.origin)
}
inline void TideChartFile::set_origin(const char* value, size_t size) {
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFile.origin)
}
inline ::std::string* TideChartFile::mutable_origin() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFile.origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFile::release_origin() {
  // @@protoc_insertion_point(field_release:TideChartFile.origin)
  
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFile::set_allocated_origin(::std::string* origin) {
  if (origin != nullptr) {
    
  } else {
    
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:TideChartFile.origin)
}

// string modifiedDate = 5;
inline void TideChartFile::clear_modifieddate() {
  modifieddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFile::modifieddate() const {
  // @@protoc_insertion_point(field_get:TideChartFile.modifiedDate)
  return modifieddate_.GetNoArena();
}
inline void TideChartFile::set_modifieddate(const ::std::string& value) {
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFile.modifiedDate)
}
#if LANG_CXX11
inline void TideChartFile::set_modifieddate(::std::string&& value) {
  
  modifieddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFile.modifiedDate)
}
#endif
inline void TideChartFile::set_modifieddate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFile.modifiedDate)
}
inline void TideChartFile::set_modifieddate(const char* value, size_t size) {
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFile.modifiedDate)
}
inline ::std::string* TideChartFile::mutable_modifieddate() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFile.modifiedDate)
  return modifieddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFile::release_modifieddate() {
  // @@protoc_insertion_point(field_release:TideChartFile.modifiedDate)
  
  return modifieddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFile::set_allocated_modifieddate(::std::string* modifieddate) {
  if (modifieddate != nullptr) {
    
  } else {
    
  }
  modifieddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modifieddate);
  // @@protoc_insertion_point(field_set_allocated:TideChartFile.modifiedDate)
}

// string modifiedBy = 6;
inline void TideChartFile::clear_modifiedby() {
  modifiedby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFile::modifiedby() const {
  // @@protoc_insertion_point(field_get:TideChartFile.modifiedBy)
  return modifiedby_.GetNoArena();
}
inline void TideChartFile::set_modifiedby(const ::std::string& value) {
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFile.modifiedBy)
}
#if LANG_CXX11
inline void TideChartFile::set_modifiedby(::std::string&& value) {
  
  modifiedby_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFile.modifiedBy)
}
#endif
inline void TideChartFile::set_modifiedby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFile.modifiedBy)
}
inline void TideChartFile::set_modifiedby(const char* value, size_t size) {
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFile.modifiedBy)
}
inline ::std::string* TideChartFile::mutable_modifiedby() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFile.modifiedBy)
  return modifiedby_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFile::release_modifiedby() {
  // @@protoc_insertion_point(field_release:TideChartFile.modifiedBy)
  
  return modifiedby_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFile::set_allocated_modifiedby(::std::string* modifiedby) {
  if (modifiedby != nullptr) {
    
  } else {
    
  }
  modifiedby_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modifiedby);
  // @@protoc_insertion_point(field_set_allocated:TideChartFile.modifiedBy)
}

// .TideChartData chart = 7;
inline bool TideChartFile::has_chart() const {
  return this != internal_default_instance() && chart_ != nullptr;
}
inline void TideChartFile::clear_chart() {
  if (GetArenaNoVirtual() == nullptr && chart_ != nullptr) {
    delete chart_;
  }
  chart_ = nullptr;
}
inline const ::TideChartData& TideChartFile::chart() const {
  const ::TideChartData* p = chart_;
  // @@protoc_insertion_point(field_get:TideChartFile.chart)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartData*>(
      &::_TideChartData_default_instance_);
}
inline ::TideChartData* TideChartFile::release_chart() {
  // @@protoc_insertion_point(field_release:TideChartFile.chart)
  
  ::TideChartData* temp = chart_;
  chart_ = nullptr;
  return temp;
}
inline ::TideChartData* TideChartFile::mutable_chart() {
  
  if (chart_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartData>(GetArenaNoVirtual());
    chart_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartFile.chart)
  return chart_;
}
inline void TideChartFile::set_allocated_chart(::TideChartData* chart) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chart_;
  }
  if (chart) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chart = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chart, submessage_arena);
    }
    
  } else {
    
  }
  chart_ = chart;
  // @@protoc_insertion_point(field_set_allocated:TideChartFile.chart)
}

// repeated .TideChartCommand working = 8;
inline int TideChartFile::working_size() const {
  return working_.size();
}
inline void TideChartFile::clear_working() {
  working_.Clear();
}
inline ::TideChartCommand* TideChartFile::mutable_working(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartFile.working)
  return working_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartCommand >*
TideChartFile::mutable_working() {
  // @@protoc_insertion_point(field_mutable_list:TideChartFile.working)
  return &working_;
}
inline const ::TideChartCommand& TideChartFile::working(int index) const {
  // @@protoc_insertion_point(field_get:TideChartFile.working)
  return working_.Get(index);
}
inline ::TideChartCommand* TideChartFile::add_working() {
  // @@protoc_insertion_point(field_add:TideChartFile.working)
  return working_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartCommand >&
TideChartFile::working() const {
  // @@protoc_insertion_point(field_list:TideChartFile.working)
  return working_;
}

// repeated .TideChartCommand remote = 9;
inline int TideChartFile::remote_size() const {
  return remote_.size();
}
inline void TideChartFile::clear_remote() {
  remote_.Clear();
}
inline ::TideChartCommand* TideChartFile::mutable_remote(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartFile.remote)
  return remote_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartCommand >*
TideChartFile::mutable_remote() {
  // @@protoc_insertion_point(field_mutable_list:TideChartFile.remote)
  return &remote_;
}
inline const ::TideChartCommand& TideChartFile::remote(int index) const {
  // @@protoc_insertion_point(field_get:TideChartFile.remote)
  return remote_.Get(index);
}
inline ::TideChartCommand* TideChartFile::add_remote() {
  // @@protoc_insertion_point(field_add:TideChartFile.remote)
  return remote_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartCommand >&
TideChartFile::remote() const {
  // @@protoc_insertion_point(field_list:TideChartFile.remote)
  return remote_;
}

// repeated .TideChartData history = 10;
inline int TideChartFile::history_size() const {
  return history_.size();
}
inline void TideChartFile::clear_history() {
  history_.Clear();
}
inline ::TideChartData* TideChartFile::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartFile.history)
  return history_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartData >*
TideChartFile::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:TideChartFile.history)
  return &history_;
}
inline const ::TideChartData& TideChartFile::history(int index) const {
  // @@protoc_insertion_point(field_get:TideChartFile.history)
  return history_.Get(index);
}
inline ::TideChartData* TideChartFile::add_history() {
  // @@protoc_insertion_point(field_add:TideChartFile.history)
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartData >&
TideChartFile::history() const {
  // @@protoc_insertion_point(field_list:TideChartFile.history)
  return history_;
}

// repeated .TideChartContext context = 11;
inline int TideChartFile::context_size() const {
  return context_.size();
}
inline void TideChartFile::clear_context() {
  context_.Clear();
}
inline ::TideChartContext* TideChartFile::mutable_context(int index) {
  // @@protoc_insertion_point(field_mutable:TideChartFile.context)
  return context_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TideChartContext >*
TideChartFile::mutable_context() {
  // @@protoc_insertion_point(field_mutable_list:TideChartFile.context)
  return &context_;
}
inline const ::TideChartContext& TideChartFile::context(int index) const {
  // @@protoc_insertion_point(field_get:TideChartFile.context)
  return context_.Get(index);
}
inline ::TideChartContext* TideChartFile::add_context() {
  // @@protoc_insertion_point(field_add:TideChartFile.context)
  return context_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TideChartContext >&
TideChartFile::context() const {
  // @@protoc_insertion_point(field_list:TideChartFile.context)
  return context_;
}

// -------------------------------------------------------------------

// TideChartFileHeader

// string id = 1;
inline void TideChartFileHeader::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileHeader::id() const {
  // @@protoc_insertion_point(field_get:TideChartFileHeader.id)
  return id_.GetNoArena();
}
inline void TideChartFileHeader::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileHeader.id)
}
#if LANG_CXX11
inline void TideChartFileHeader::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileHeader.id)
}
#endif
inline void TideChartFileHeader::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileHeader.id)
}
inline void TideChartFileHeader::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileHeader.id)
}
inline ::std::string* TideChartFileHeader::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileHeader.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileHeader::release_id() {
  // @@protoc_insertion_point(field_release:TideChartFileHeader.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileHeader::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileHeader.id)
}

// string name = 2;
inline void TideChartFileHeader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileHeader::name() const {
  // @@protoc_insertion_point(field_get:TideChartFileHeader.name)
  return name_.GetNoArena();
}
inline void TideChartFileHeader::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileHeader.name)
}
#if LANG_CXX11
inline void TideChartFileHeader::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileHeader.name)
}
#endif
inline void TideChartFileHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileHeader.name)
}
inline void TideChartFileHeader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileHeader.name)
}
inline ::std::string* TideChartFileHeader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileHeader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileHeader::release_name() {
  // @@protoc_insertion_point(field_release:TideChartFileHeader.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileHeader::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileHeader.name)
}

// string path = 3;
inline void TideChartFileHeader::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileHeader::path() const {
  // @@protoc_insertion_point(field_get:TideChartFileHeader.path)
  return path_.GetNoArena();
}
inline void TideChartFileHeader::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileHeader.path)
}
#if LANG_CXX11
inline void TideChartFileHeader::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileHeader.path)
}
#endif
inline void TideChartFileHeader::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileHeader.path)
}
inline void TideChartFileHeader::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileHeader.path)
}
inline ::std::string* TideChartFileHeader::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileHeader.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileHeader::release_path() {
  // @@protoc_insertion_point(field_release:TideChartFileHeader.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileHeader::set_allocated_path(::std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileHeader.path)
}

// string origin = 4;
inline void TideChartFileHeader::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileHeader::origin() const {
  // @@protoc_insertion_point(field_get:TideChartFileHeader.origin)
  return origin_.GetNoArena();
}
inline void TideChartFileHeader::set_origin(const ::std::string& value) {
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileHeader.origin)
}
#if LANG_CXX11
inline void TideChartFileHeader::set_origin(::std::string&& value) {
  
  origin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileHeader.origin)
}
#endif
inline void TideChartFileHeader::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileHeader.origin)
}
inline void TideChartFileHeader::set_origin(const char* value, size_t size) {
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileHeader.origin)
}
inline ::std::string* TideChartFileHeader::mutable_origin() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileHeader.origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileHeader::release_origin() {
  // @@protoc_insertion_point(field_release:TideChartFileHeader.origin)
  
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileHeader::set_allocated_origin(::std::string* origin) {
  if (origin != nullptr) {
    
  } else {
    
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileHeader.origin)
}

// string modifiedDate = 5;
inline void TideChartFileHeader::clear_modifieddate() {
  modifieddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileHeader::modifieddate() const {
  // @@protoc_insertion_point(field_get:TideChartFileHeader.modifiedDate)
  return modifieddate_.GetNoArena();
}
inline void TideChartFileHeader::set_modifieddate(const ::std::string& value) {
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileHeader.modifiedDate)
}
#if LANG_CXX11
inline void TideChartFileHeader::set_modifieddate(::std::string&& value) {
  
  modifieddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileHeader.modifiedDate)
}
#endif
inline void TideChartFileHeader::set_modifieddate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileHeader.modifiedDate)
}
inline void TideChartFileHeader::set_modifieddate(const char* value, size_t size) {
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileHeader.modifiedDate)
}
inline ::std::string* TideChartFileHeader::mutable_modifieddate() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileHeader.modifiedDate)
  return modifieddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileHeader::release_modifieddate() {
  // @@protoc_insertion_point(field_release:TideChartFileHeader.modifiedDate)
  
  return modifieddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileHeader::set_allocated_modifieddate(::std::string* modifieddate) {
  if (modifieddate != nullptr) {
    
  } else {
    
  }
  modifieddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modifieddate);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileHeader.modifiedDate)
}

// string modifiedBy = 6;
inline void TideChartFileHeader::clear_modifiedby() {
  modifiedby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileHeader::modifiedby() const {
  // @@protoc_insertion_point(field_get:TideChartFileHeader.modifiedBy)
  return modifiedby_.GetNoArena();
}
inline void TideChartFileHeader::set_modifiedby(const ::std::string& value) {
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileHeader.modifiedBy)
}
#if LANG_CXX11
inline void TideChartFileHeader::set_modifiedby(::std::string&& value) {
  
  modifiedby_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileHeader.modifiedBy)
}
#endif
inline void TideChartFileHeader::set_modifiedby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileHeader.modifiedBy)
}
inline void TideChartFileHeader::set_modifiedby(const char* value, size_t size) {
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileHeader.modifiedBy)
}
inline ::std::string* TideChartFileHeader::mutable_modifiedby() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileHeader.modifiedBy)
  return modifiedby_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileHeader::release_modifiedby() {
  // @@protoc_insertion_point(field_release:TideChartFileHeader.modifiedBy)
  
  return modifiedby_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileHeader::set_allocated_modifiedby(::std::string* modifiedby) {
  if (modifiedby != nullptr) {
    
  } else {
    
  }
  modifiedby_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modifiedby);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileHeader.modifiedBy)
}

// -------------------------------------------------------------------

// TideChartFileCurrent

// string id = 1;
inline void TideChartFileCurrent::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileCurrent::id() const {
  // @@protoc_insertion_point(field_get:TideChartFileCurrent.id)
  return id_.GetNoArena();
}
inline void TideChartFileCurrent::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileCurrent.id)
}
#if LANG_CXX11
inline void TideChartFileCurrent::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileCurrent.id)
}
#endif
inline void TideChartFileCurrent::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileCurrent.id)
}
inline void TideChartFileCurrent::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileCurrent.id)
}
inline ::std::string* TideChartFileCurrent::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileCurrent.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileCurrent::release_id() {
  // @@protoc_insertion_point(field_release:TideChartFileCurrent.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileCurrent::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileCurrent.id)
}

// string name = 2;
inline void TideChartFileCurrent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileCurrent::name() const {
  // @@protoc_insertion_point(field_get:TideChartFileCurrent.name)
  return name_.GetNoArena();
}
inline void TideChartFileCurrent::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileCurrent.name)
}
#if LANG_CXX11
inline void TideChartFileCurrent::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileCurrent.name)
}
#endif
inline void TideChartFileCurrent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileCurrent.name)
}
inline void TideChartFileCurrent::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileCurrent.name)
}
inline ::std::string* TideChartFileCurrent::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileCurrent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileCurrent::release_name() {
  // @@protoc_insertion_point(field_release:TideChartFileCurrent.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileCurrent::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileCurrent.name)
}

// string path = 3;
inline void TideChartFileCurrent::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileCurrent::path() const {
  // @@protoc_insertion_point(field_get:TideChartFileCurrent.path)
  return path_.GetNoArena();
}
inline void TideChartFileCurrent::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileCurrent.path)
}
#if LANG_CXX11
inline void TideChartFileCurrent::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileCurrent.path)
}
#endif
inline void TideChartFileCurrent::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileCurrent.path)
}
inline void TideChartFileCurrent::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileCurrent.path)
}
inline ::std::string* TideChartFileCurrent::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileCurrent.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileCurrent::release_path() {
  // @@protoc_insertion_point(field_release:TideChartFileCurrent.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileCurrent::set_allocated_path(::std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileCurrent.path)
}

// string origin = 4;
inline void TideChartFileCurrent::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileCurrent::origin() const {
  // @@protoc_insertion_point(field_get:TideChartFileCurrent.origin)
  return origin_.GetNoArena();
}
inline void TideChartFileCurrent::set_origin(const ::std::string& value) {
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileCurrent.origin)
}
#if LANG_CXX11
inline void TideChartFileCurrent::set_origin(::std::string&& value) {
  
  origin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileCurrent.origin)
}
#endif
inline void TideChartFileCurrent::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileCurrent.origin)
}
inline void TideChartFileCurrent::set_origin(const char* value, size_t size) {
  
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileCurrent.origin)
}
inline ::std::string* TideChartFileCurrent::mutable_origin() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileCurrent.origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileCurrent::release_origin() {
  // @@protoc_insertion_point(field_release:TideChartFileCurrent.origin)
  
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileCurrent::set_allocated_origin(::std::string* origin) {
  if (origin != nullptr) {
    
  } else {
    
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileCurrent.origin)
}

// string modifiedDate = 5;
inline void TideChartFileCurrent::clear_modifieddate() {
  modifieddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileCurrent::modifieddate() const {
  // @@protoc_insertion_point(field_get:TideChartFileCurrent.modifiedDate)
  return modifieddate_.GetNoArena();
}
inline void TideChartFileCurrent::set_modifieddate(const ::std::string& value) {
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileCurrent.modifiedDate)
}
#if LANG_CXX11
inline void TideChartFileCurrent::set_modifieddate(::std::string&& value) {
  
  modifieddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileCurrent.modifiedDate)
}
#endif
inline void TideChartFileCurrent::set_modifieddate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileCurrent.modifiedDate)
}
inline void TideChartFileCurrent::set_modifieddate(const char* value, size_t size) {
  
  modifieddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileCurrent.modifiedDate)
}
inline ::std::string* TideChartFileCurrent::mutable_modifieddate() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileCurrent.modifiedDate)
  return modifieddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileCurrent::release_modifieddate() {
  // @@protoc_insertion_point(field_release:TideChartFileCurrent.modifiedDate)
  
  return modifieddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileCurrent::set_allocated_modifieddate(::std::string* modifieddate) {
  if (modifieddate != nullptr) {
    
  } else {
    
  }
  modifieddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modifieddate);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileCurrent.modifiedDate)
}

// string modifiedBy = 6;
inline void TideChartFileCurrent::clear_modifiedby() {
  modifiedby_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TideChartFileCurrent::modifiedby() const {
  // @@protoc_insertion_point(field_get:TideChartFileCurrent.modifiedBy)
  return modifiedby_.GetNoArena();
}
inline void TideChartFileCurrent::set_modifiedby(const ::std::string& value) {
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TideChartFileCurrent.modifiedBy)
}
#if LANG_CXX11
inline void TideChartFileCurrent::set_modifiedby(::std::string&& value) {
  
  modifiedby_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TideChartFileCurrent.modifiedBy)
}
#endif
inline void TideChartFileCurrent::set_modifiedby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TideChartFileCurrent.modifiedBy)
}
inline void TideChartFileCurrent::set_modifiedby(const char* value, size_t size) {
  
  modifiedby_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TideChartFileCurrent.modifiedBy)
}
inline ::std::string* TideChartFileCurrent::mutable_modifiedby() {
  
  // @@protoc_insertion_point(field_mutable:TideChartFileCurrent.modifiedBy)
  return modifiedby_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TideChartFileCurrent::release_modifiedby() {
  // @@protoc_insertion_point(field_release:TideChartFileCurrent.modifiedBy)
  
  return modifiedby_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TideChartFileCurrent::set_allocated_modifiedby(::std::string* modifiedby) {
  if (modifiedby != nullptr) {
    
  } else {
    
  }
  modifiedby_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modifiedby);
  // @@protoc_insertion_point(field_set_allocated:TideChartFileCurrent.modifiedBy)
}

// .TideChartData chart = 7;
inline bool TideChartFileCurrent::has_chart() const {
  return this != internal_default_instance() && chart_ != nullptr;
}
inline void TideChartFileCurrent::clear_chart() {
  if (GetArenaNoVirtual() == nullptr && chart_ != nullptr) {
    delete chart_;
  }
  chart_ = nullptr;
}
inline const ::TideChartData& TideChartFileCurrent::chart() const {
  const ::TideChartData* p = chart_;
  // @@protoc_insertion_point(field_get:TideChartFileCurrent.chart)
  return p != nullptr ? *p : *reinterpret_cast<const ::TideChartData*>(
      &::_TideChartData_default_instance_);
}
inline ::TideChartData* TideChartFileCurrent::release_chart() {
  // @@protoc_insertion_point(field_release:TideChartFileCurrent.chart)
  
  ::TideChartData* temp = chart_;
  chart_ = nullptr;
  return temp;
}
inline ::TideChartData* TideChartFileCurrent::mutable_chart() {
  
  if (chart_ == nullptr) {
    auto* p = CreateMaybeMessage<::TideChartData>(GetArenaNoVirtual());
    chart_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TideChartFileCurrent.chart)
  return chart_;
}
inline void TideChartFileCurrent::set_allocated_chart(::TideChartData* chart) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chart_;
  }
  if (chart) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chart = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chart, submessage_arena);
    }
    
  } else {
    
  }
  chart_ = chart;
  // @@protoc_insertion_point(field_set_allocated:TideChartFileCurrent.chart)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TideChartCommandUpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TideChartCommandUpdateType>() {
  return ::TideChartCommandUpdateType_descriptor();
}
template <> struct is_proto_enum< ::TideChartLogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TideChartLogLevel>() {
  return ::TideChartLogLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_tide_5fchart_2eproto
