// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tide_chart.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from tide_chart.proto</summary>
public static partial class TideChartReflection {

  #region Descriptor
  /// <summary>File descriptor for tide_chart.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TideChartReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChB0aWRlX2NoYXJ0LnByb3RvImEKEVRpZGVDaGFydFByb3BlcnR5EgwKBG5h",
          "bWUYASABKAkSDAoEdHlwZRgCIAEoCRINCgV2YWx1ZRgDIAEoCRIhCgVwcm9w",
          "cxgEIAMoCzISLlRpZGVDaGFydFByb3BlcnR5IrUCChNUaWRlQ2hhcnRDb21t",
          "ZW50Qm94EgoKAmlkGAEgASgJEg4KBnJlZ2lvbhgCIAEoCRIMCgRwb3NYGAMg",
          "ASgREgwKBHBvc1kYBCABKBESDQoFd2lkdGgYBSABKAUSDgoGaGVpZ2h0GAYg",
          "ASgFEg4KBHRleHQYByABKAlIABIPCgVpbWFnZRgIIAEoDEgAEg4KBGljb24Y",
          "CSABKAlIABIQCghmb250U2l6ZRgKIAEoARIRCglmb250U3R5bGUYCyABKAkS",
          "EQoJYWxpZ25tZW50GAwgASgREg0KBWNvbG9yGA0gASgFEhIKCmJhY2tncm91",
          "bmQYDiABKAUSDgoGYm9yZGVyGA8gASgFEg4KBnJhaXNlZBgQIAEoCBIQCghy",
          "ZXZlcnNlZBgRIAEoCEIJCgdjb250ZW50IuIBCg9UaWRlQ2hhcnRXaWRnZXQS",
          "CgoCaWQYASABKAkSDAoEdHlwZRgCIAEoCRINCgV0aXRsZRgDIAEoCRIOCgZy",
          "ZWdpb24YBCABKAkSDAoEcG9zWBgFIAEoERIMCgRwb3NZGAYgASgREg0KBXdp",
          "ZHRoGAcgASgFEg4KBmhlaWdodBgIIAEoBRIOCgRsaW5rGAkgASgJSAASDgoE",
          "cG9ydBgKIAEoCUgAEg4KBG5vZGUYCyABKAlIABIhCgVwcm9wcxgMIAMoCzIS",
          "LlRpZGVDaGFydFByb3BlcnR5QggKBnRhcmdldCKAAgoNVGlkZUNoYXJ0UG9y",
          "dBIMCgR0eXBlGAEgASgJEgwKBG5hbWUYAiABKAkSDwoHb3JkaW5hbBgDIAEo",
          "BRIPCgdkZWZhdWx0GAQgASgIEhAKCHJlcXVpcmVkGAUgASgIEg8KB2FsbG93",
          "ZWQYBiADKAkSDAoEaGludBgHIAEoCRIkCghjb25zdGFudBgIIAEoCzISLlRp",
          "ZGVDaGFydFByb3BlcnR5Eg8KB3RyaWdnZXIYCSABKAkSDgoGZmlsdGVyGAog",
          "ASgJEg0KBWV2ZW50GAsgASgJEgwKBHN5bmMYDCABKAkSDQoFYmxvY2sYDSAB",
          "KAgSDQoFcXVldWUYDiABKAgixQEKDVRpZGVDaGFydExpbmsSDwoHb3V0Tm9k",
          "ZRgBIAEoCRIPCgdvdXRQb3J0GAIgASgJEg4KBmluTm9kZRgDIAEoCRIOCgZp",
          "blBvcnQYBCABKAkSDQoFZ3JvdXAYBSABKAUSDQoFZGVsYXkYBiABKAUSDgoG",
          "ZmlsdGVyGAcgASgJEg8KB2xvZ2dpbmcYECABKAgSEQoJZGVidWdnaW5nGBEg",
          "ASgIEg4KBnBhdXNlZBgSIAEoCBIQCghkaXNhYmxlZBgTIAEoCCJ3Cg1UaWRl",
          "Q2hhcnROb3RlEgoKAmlkGAEgASgJEg8KB3JlcGx5VG8YAiABKAkSEAoIY2hh",
          "bmdlVG8YAyABKAkSDwoHY29udGVudBgEIAEoCRIRCgljcmVhdGVkQnkYBSAB",
          "KAkSEwoLY3JlYXRlZERhdGUYBiABKAki7wIKDVRpZGVDaGFydE5vZGUSDAoE",
          "bmFtZRgBIAEoCRIMCgR0eXBlGAIgASgJEgwKBHBvc1gYAyABKBESDAoEcG9z",
          "WRgEIAEoERINCgV0aXRsZRgFIAEoCRIMCgRpY29uGAYgASgJEg8KB2xpYnJh",
          "cnkYByABKAkSDgoGbWV0aG9kGAggASgJEg0KBWRlbGF5GAkgASgFEh8KB2lu",
          "cG9ydHMYCiADKAsyDi5UaWRlQ2hhcnRQb3J0EiAKCG91dHBvcnRzGAsgAygL",
          "Mg4uVGlkZUNoYXJ0UG9ydBIhCgVwcm9wcxgMIAMoCzISLlRpZGVDaGFydFBy",
          "b3BlcnR5Eg8KB2xvZ2dpbmcYECABKAgSEQoJZGVidWdnaW5nGBEgASgIEg4K",
          "BnBhdXNlZBgSIAEoCBIQCghkaXNhYmxlZBgTIAEoCBIdCgVub3RlcxgUIAMo",
          "CzIOLlRpZGVDaGFydE5vdGUSDgoGc2NyaXB0GBUgASgJIvMBCg9UaWRlQ2hh",
          "cnRSZWdpb24SDAoEbmFtZRgBIAEoCRINCgV0aXRsZRgCIAEoCRINCgVub2Rl",
          "cxgDIAMoCRINCgVncm91cBgEIAEoBRINCgVzY29wZRgFIAEoCRIhCgVwcm9w",
          "cxgGIAMoCzISLlRpZGVDaGFydFByb3BlcnR5Eg8KB2xvZ2dpbmcYECABKAgS",
          "EQoJZGVidWdnaW5nGBEgASgIEg4KBnBhdXNlZBgSIAEoCBIQCghkaXNhYmxl",
          "ZBgTIAEoCBIdCgVub3RlcxgUIAMoCzIOLlRpZGVDaGFydE5vdGUSDgoGc2Ny",
          "aXB0GBUgASgJItADCg5UaWRlQ2hhcnRHcmFwaBIKCgJpZBgBIAEoCRIMCgR0",
          "eXBlGAIgASgJEgwKBG5hbWUYAyABKAkSDQoFdGl0bGUYBCABKAkSDwoHdmVy",
          "c2lvbhgFIAEoCRIOCgZzb3VyY2UYBiABKAkSHQoFbm9kZXMYByADKAsyDi5U",
          "aWRlQ2hhcnROb2RlEh0KBWxpbmtzGAggAygLMg4uVGlkZUNoYXJ0TGluaxIh",
          "CgdyZWdpb25zGAkgAygLMhAuVGlkZUNoYXJ0UmVnaW9uEiYKCGNvbW1lbnRz",
          "GAogAygLMhQuVGlkZUNoYXJ0Q29tbWVudEJveBIhCgd3aWRnZXRzGAsgAygL",
          "MhAuVGlkZUNoYXJ0V2lkZ2V0EiEKBXByb3BzGAwgAygLMhIuVGlkZUNoYXJ0",
          "UHJvcGVydHkSIgoHaGlzdG9yeRgNIAMoCzIRLlRpZGVDaGFydENvbW1hbmQS",
          "DwoHbG9nZ2luZxgQIAEoCBIRCglkZWJ1Z2dpbmcYESABKAgSDgoGcGF1c2Vk",
          "GBIgASgIEhAKCGRpc2FibGVkGBMgASgIEh0KBW5vdGVzGBQgAygLMg4uVGlk",
          "ZUNoYXJ0Tm90ZRIOCgZzY3JpcHQYFSABKAkihQQKEFRpZGVDaGFydENvbW1h",
          "bmQSDwoHdmVyc2lvbhgBIAEoCRIOCgZ0YXJnZXQYAiABKAkSJwoFZ3JvdXAY",
          "AyABKAsyFi5UaWRlQ2hhcnRHcm91cENvbW1hbmRIABIlCgRtb3ZlGAQgASgL",
          "MhUuVGlkZUNoYXJ0TW92ZUNvbW1hbmRIABIuCgdjb21tZW50GAUgASgLMhsu",
          "VGlkZUNoYXJ0Q29tbWVudEJveENvbW1hbmRIABIpCgZ3aWRnZXQYBiABKAsy",
          "Fy5UaWRlQ2hhcnRXaWRnZXRDb21tYW5kSAASJQoEcG9ydBgHIAEoCzIVLlRp",
          "ZGVDaGFydFBvcnRDb21tYW5kSAASJQoEbGluaxgIIAEoCzIVLlRpZGVDaGFy",
          "dExpbmtDb21tYW5kSAASJQoEbm9kZRgJIAEoCzIVLlRpZGVDaGFydE5vZGVD",
          "b21tYW5kSAASKQoGcmVnaW9uGAogASgLMhcuVGlkZUNoYXJ0UmVnaW9uQ29t",
          "bWFuZEgAEicKBWdyYXBoGAsgASgLMhYuVGlkZUNoYXJ0R3JhcGhDb21tYW5k",
          "SAASKgoFcHJvcHMYDCABKAsyGS5UaWRlQ2hhcnRQcm9wZXJ0eUNvbW1hbmRI",
          "ABIlCgRub3RlGA0gASgLMhUuVGlkZUNoYXJ0Tm90ZUNvbW1hbmRIAEIJCgdj",
          "b21tYW5kIjgKFVRpZGVDaGFydEdyb3VwQ29tbWFuZBIfCgRjbWRzGAEgAygL",
          "MhEuVGlkZUNoYXJ0Q29tbWFuZCJoChRUaWRlQ2hhcnRNb3ZlQ29tbWFuZBIM",
          "CgRub2RlGAEgASgJEhAKCGZyb21Qb3NYGAIgASgREhAKCGZyb21Qb3NZGAMg",
          "ASgREg4KBnRvUG9zWBgEIAEoERIOCgZ0b1Bvc1kYBSABKBEifgoaVGlkZUNo",
          "YXJ0Q29tbWVudEJveENvbW1hbmQSKQoLZnJvbUNvbW1lbnQYASABKAsyFC5U",
          "aWRlQ2hhcnRDb21tZW50Qm94EicKCXRvQ29tbWVudBgCIAEoCzIULlRpZGVD",
          "aGFydENvbW1lbnRCb3gSDAoEdHlwZRgDIAEoCSJwChZUaWRlQ2hhcnRXaWRn",
          "ZXRDb21tYW5kEiQKCmZyb21XaWRnZXQYASABKAsyEC5UaWRlQ2hhcnRXaWRn",
          "ZXQSIgoIdG9XaWRnZXQYAiABKAsyEC5UaWRlQ2hhcnRXaWRnZXQSDAoEdHlw",
          "ZRgDIAEoCSJmChRUaWRlQ2hhcnRQb3J0Q29tbWFuZBIgCghmcm9tUG9ydBgB",
          "IAEoCzIOLlRpZGVDaGFydFBvcnQSHgoGdG9Qb3J0GAIgASgLMg4uVGlkZUNo",
          "YXJ0UG9ydBIMCgR0eXBlGAMgASgJImYKFFRpZGVDaGFydExpbmtDb21tYW5k",
          "EiAKCGZyb21MaW5rGAEgASgLMg4uVGlkZUNoYXJ0TGluaxIeCgZ0b0xpbmsY",
          "AiABKAsyDi5UaWRlQ2hhcnRMaW5rEgwKBHR5cGUYAyABKAkiZgoUVGlkZUNo",
          "YXJ0Tm9kZUNvbW1hbmQSIAoIZnJvbU5vZGUYASABKAsyDi5UaWRlQ2hhcnRO",
          "b2RlEh4KBnRvTm9kZRgCIAEoCzIOLlRpZGVDaGFydE5vZGUSDAoEdHlwZRgD",
          "IAEoCSJwChZUaWRlQ2hhcnRSZWdpb25Db21tYW5kEiQKCmZyb21SZWdpb24Y",
          "ASABKAsyEC5UaWRlQ2hhcnRSZWdpb24SIgoIdG9SZWdpb24YAiABKAsyEC5U",
          "aWRlQ2hhcnRSZWdpb24SDAoEdHlwZRgDIAEoCSJrChVUaWRlQ2hhcnRHcmFw",
          "aENvbW1hbmQSIgoJZnJvbUdyYXBoGAEgASgLMg8uVGlkZUNoYXJ0R3JhcGgS",
          "IAoHdG9HcmFwaBgCIAEoCzIPLlRpZGVDaGFydEdyYXBoEgwKBHR5cGUYAyAB",
          "KAkiwwEKGFRpZGVDaGFydFByb3BlcnR5Q29tbWFuZBIlCglmcm9tUHJvcHMY",
          "ASADKAsyEi5UaWRlQ2hhcnRQcm9wZXJ0eRIjCgd0b1Byb3BzGAIgAygLMhIu",
          "VGlkZUNoYXJ0UHJvcGVydHkSDAoEdHlwZRgDIAEoCRIOCgRub2RlGAUgASgJ",
          "SAASEAoGcmVnaW9uGAYgASgJSAASEAoGd2lkZ2V0GAcgASgJSAASDwoFZ3Jh",
          "cGgYCCABKAlIAEIICgZ0YXJnZXQigAEKFFRpZGVDaGFydE5vdGVDb21tYW5k",
          "Eh0KBW5vdGVzGAEgAygLMg4uVGlkZUNoYXJ0Tm90ZRIMCgR0eXBlGAIgASgJ",
          "Eg4KBG5vZGUYAyABKAlIABIQCgZyZWdpb24YBCABKAlIABIPCgVncmFwaBgF",
          "IAEoCUgAQggKBnRhcmdldCKuAQoPVGlkZUNoYXJ0TWV0aG9kEgoKAmlkGAEg",
          "ASgJEgwKBG5hbWUYAiABKAkSDwoHZXh0ZW5kcxgDIAEoCRIOCgZzY3JpcHQY",
          "BCABKAkSHwoHaW5wb3J0cxgFIAMoCzIOLlRpZGVDaGFydFBvcnQSIAoIb3V0",
          "cG9ydHMYBiADKAsyDi5UaWRlQ2hhcnRQb3J0Eh0KBXByb3BzGAcgAygLMg4u",
          "VGlkZUNoYXJ0UG9ydCKRAQoPVGlkZUNoYXJ0U291cmNlEgoKAmlkGAEgASgJ",
          "EgwKBG5hbWUYAiABKAkSDAoEcGF0aBgDIAEoCRITCgtjcmVhdGVkRGF0ZRgF",
          "IAEoCRIRCgljcmVhdGVkQnkYBiABKAkSEQoHdmVyc2lvbhgHIAEoCUgAEhAK",
          "BnNjcmlwdBgIIAEoCUgAQgkKB2NvbnRlbnQirQEKEFRpZGVDaGFydExpYnJh",
          "cnkSCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRINCgV0aXRsZRgDIAEoCRIO",
          "CgZvcmlnaW4YBCABKAkSDgoGYnJhbmNoGAUgASgJEgwKBHBhdGgYBiABKAkS",
          "HwoFZmlsZXMYByADKAsyEC5UaWRlQ2hhcnRTb3VyY2USIQoHbWV0aG9kcxgI",
          "IAMoCzIQLlRpZGVDaGFydE1ldGhvZCLFAQoNVGlkZUNoYXJ0U2l0ZRINCgVp",
          "bmRleBgBIAEoAxIdCgVzdGFjaxgCIAMoCzIOLlRpZGVDaGFydFNpdGUSDAoE",
          "cGF0aBgDIAEoCRIPCgd0cmlnZ2VyGAQgASgJEg0KBWV2ZW50GAUgASgJEg0K",
          "BXNjb3BlGAYgAygJEg4KBmZpbHRlchgHIAEoCRINCgVncmFwaBgIIAEoCRIO",
          "CgZyZWdpb24YCSABKAkSDAoEbm9kZRgKIAEoCRIMCgRwb3J0GAsgASgJIokC",
          "ChBUaWRlQ2hhcnRNZXNzYWdlEg0KBWluZGV4GAEgASgDEhEKCXRpbWVzdGFt",
          "cBgCIAEoAxIOCgZvcmlnaW4YBCABKAMSEAoIcHJldmlvdXMYBSABKAMSDgoG",
          "c291cmNlGAcgASgDEg4KBnRhcmdldBgIIAEoAxISCgpkZWxheVVudGlsGAkg",
          "ASgDEhEKCWhvbGRUb2tlbhgKIAEoAxITCgtjYW5jZWxUb2tlbhgLIAEoAxIM",
          "CgR0eXBlGAwgASgJEg8KB3ZlcnNpb24YDSABKAUSFQoLanNvbkNvbnRlbnQY",
          "DiABKAlIABIUCgptc2dDb250ZW50GA8gASgMSABCCQoHY29udGVudCLJAgoN",
          "VGlkZUNoYXJ0RGF0YRIPCgd2ZXJzaW9uGAEgASgJEg4KBmJyYW5jaBgCIAEo",
          "CRIOCgZzb3VyY2UYAyABKAkSDQoFbWVyZ2UYBCABKAkSEgoKY29tbWl0RGF0",
          "ZRgFIAEoCRIQCghjb21taXRCeRgGIAEoCRISCgpjb21taXREZXNjGAcgASgJ",
          "EhMKC2NvbW1pdE5vdGVzGAggASgJEh8KBnNoZWV0cxgJIAMoCzIPLlRpZGVD",
          "aGFydEdyYXBoEiEKBXByb3BzGAogAygLMhIuVGlkZUNoYXJ0UHJvcGVydHkS",
          "HQoFbm90ZXMYCyADKAsyDi5UaWRlQ2hhcnROb3RlEiIKB2xpYnJhcnkYDCAD",
          "KAsyES5UaWRlQ2hhcnRMaWJyYXJ5EiIKBmdsb2JhbBgNIAMoCzISLlRpZGVD",
          "aGFydFByb3BlcnR5IqABCg9UaWRlQ2hhcnRIZWFkZXISDwoHdmVyc2lvbhgB",
          "IAEoCRIOCgZicmFuY2gYAiABKAkSDgoGc291cmNlGAMgASgJEg0KBW1lcmdl",
          "GAQgASgJEhIKCmNvbW1pdERhdGUYBSABKAkSEAoIY29tbWl0QnkYBiABKAkS",
          "EgoKY29tbWl0RGVzYxgHIAEoCRITCgtjb21taXROb3RlcxgIIAEoCSL4AQoN",
          "VGlkZUNoYXJ0RmlsZRIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEgwKBHBh",
          "dGgYAyABKAkSDgoGb3JpZ2luGAQgASgJEhQKDG1vZGlmaWVkRGF0ZRgFIAEo",
          "CRISCgptb2RpZmllZEJ5GAYgASgJEh0KBWNoYXJ0GAcgASgLMg4uVGlkZUNo",
          "YXJ0RGF0YRIiCgd3b3JraW5nGAggAygLMhEuVGlkZUNoYXJ0Q29tbWFuZBIh",
          "CgZyZW1vdGUYCSADKAsyES5UaWRlQ2hhcnRDb21tYW5kEh8KB2hpc3RvcnkY",
          "CiADKAsyDi5UaWRlQ2hhcnREYXRhIncKE1RpZGVDaGFydEZpbGVIZWFkZXIS",
          "CgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIMCgRwYXRoGAMgASgJEg4KBm9y",
          "aWdpbhgEIAEoCRIUCgxtb2RpZmllZERhdGUYBSABKAkSEgoKbW9kaWZpZWRC",
          "eRgGIAEoCSKXAQoUVGlkZUNoYXJ0RmlsZUN1cnJlbnQSCgoCaWQYASABKAkS",
          "DAoEbmFtZRgCIAEoCRIMCgRwYXRoGAMgASgJEg4KBm9yaWdpbhgEIAEoCRIU",
          "Cgxtb2RpZmllZERhdGUYBSABKAkSEgoKbW9kaWZpZWRCeRgGIAEoCRIdCgVj",
          "aGFydBgHIAEoCzIOLlRpZGVDaGFydERhdGFCC0IJVGlkZUNoYXJ0YgZwcm90",
          "bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartProperty), global::TideChartProperty.Parser, new[]{ "Name", "Type", "Value", "Props" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartCommentBox), global::TideChartCommentBox.Parser, new[]{ "Id", "Region", "PosX", "PosY", "Width", "Height", "Text", "Image", "Icon", "FontSize", "FontStyle", "Alignment", "Color", "Background", "Border", "Raised", "Reversed" }, new[]{ "Content" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartWidget), global::TideChartWidget.Parser, new[]{ "Id", "Type", "Title", "Region", "PosX", "PosY", "Width", "Height", "Link", "Port", "Node", "Props" }, new[]{ "Target" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartPort), global::TideChartPort.Parser, new[]{ "Type", "Name", "Ordinal", "Default", "Required", "Allowed", "Hint", "Constant", "Trigger", "Filter", "Event", "Sync", "Block", "Queue" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartLink), global::TideChartLink.Parser, new[]{ "OutNode", "OutPort", "InNode", "InPort", "Group", "Delay", "Filter", "Logging", "Debugging", "Paused", "Disabled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartNote), global::TideChartNote.Parser, new[]{ "Id", "ReplyTo", "ChangeTo", "Content", "CreatedBy", "CreatedDate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartNode), global::TideChartNode.Parser, new[]{ "Name", "Type", "PosX", "PosY", "Title", "Icon", "Library", "Method", "Delay", "Inports", "Outports", "Props", "Logging", "Debugging", "Paused", "Disabled", "Notes", "Script" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartRegion), global::TideChartRegion.Parser, new[]{ "Name", "Title", "Nodes", "Group", "Scope", "Props", "Logging", "Debugging", "Paused", "Disabled", "Notes", "Script" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartGraph), global::TideChartGraph.Parser, new[]{ "Id", "Type", "Name", "Title", "Version", "Source", "Nodes", "Links", "Regions", "Comments", "Widgets", "Props", "History", "Logging", "Debugging", "Paused", "Disabled", "Notes", "Script" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartCommand), global::TideChartCommand.Parser, new[]{ "Version", "Target", "Group", "Move", "Comment", "Widget", "Port", "Link", "Node", "Region", "Graph", "Props", "Note" }, new[]{ "Command" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartGroupCommand), global::TideChartGroupCommand.Parser, new[]{ "Cmds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartMoveCommand), global::TideChartMoveCommand.Parser, new[]{ "Node", "FromPosX", "FromPosY", "ToPosX", "ToPosY" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartCommentBoxCommand), global::TideChartCommentBoxCommand.Parser, new[]{ "FromComment", "ToComment", "Type" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartWidgetCommand), global::TideChartWidgetCommand.Parser, new[]{ "FromWidget", "ToWidget", "Type" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartPortCommand), global::TideChartPortCommand.Parser, new[]{ "FromPort", "ToPort", "Type" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartLinkCommand), global::TideChartLinkCommand.Parser, new[]{ "FromLink", "ToLink", "Type" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartNodeCommand), global::TideChartNodeCommand.Parser, new[]{ "FromNode", "ToNode", "Type" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartRegionCommand), global::TideChartRegionCommand.Parser, new[]{ "FromRegion", "ToRegion", "Type" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartGraphCommand), global::TideChartGraphCommand.Parser, new[]{ "FromGraph", "ToGraph", "Type" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartPropertyCommand), global::TideChartPropertyCommand.Parser, new[]{ "FromProps", "ToProps", "Type", "Node", "Region", "Widget", "Graph" }, new[]{ "Target" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartNoteCommand), global::TideChartNoteCommand.Parser, new[]{ "Notes", "Type", "Node", "Region", "Graph" }, new[]{ "Target" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartMethod), global::TideChartMethod.Parser, new[]{ "Id", "Name", "Extends", "Script", "Inports", "Outports", "Props" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartSource), global::TideChartSource.Parser, new[]{ "Id", "Name", "Path", "CreatedDate", "CreatedBy", "Version", "Script" }, new[]{ "Content" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartLibrary), global::TideChartLibrary.Parser, new[]{ "Id", "Name", "Title", "Origin", "Branch", "Path", "Files", "Methods" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartSite), global::TideChartSite.Parser, new[]{ "Index", "Stack", "Path", "Trigger", "Event", "Scope", "Filter", "Graph", "Region", "Node", "Port" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartMessage), global::TideChartMessage.Parser, new[]{ "Index", "Timestamp", "Origin", "Previous", "Source", "Target", "DelayUntil", "HoldToken", "CancelToken", "Type", "Version", "JsonContent", "MsgContent" }, new[]{ "Content" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartData), global::TideChartData.Parser, new[]{ "Version", "Branch", "Source", "Merge", "CommitDate", "CommitBy", "CommitDesc", "CommitNotes", "Sheets", "Props", "Notes", "Library", "Global" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartHeader), global::TideChartHeader.Parser, new[]{ "Version", "Branch", "Source", "Merge", "CommitDate", "CommitBy", "CommitDesc", "CommitNotes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartFile), global::TideChartFile.Parser, new[]{ "Id", "Name", "Path", "Origin", "ModifiedDate", "ModifiedBy", "Chart", "Working", "Remote", "History" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartFileHeader), global::TideChartFileHeader.Parser, new[]{ "Id", "Name", "Path", "Origin", "ModifiedDate", "ModifiedBy" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TideChartFileCurrent), global::TideChartFileCurrent.Parser, new[]{ "Id", "Name", "Path", "Origin", "ModifiedDate", "ModifiedBy", "Chart" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// a recursive data type that provides configuration values for graphs, regions and nodes
/// </summary>
public sealed partial class TideChartProperty : pb::IMessage<TideChartProperty> {
  private static readonly pb::MessageParser<TideChartProperty> _parser = new pb::MessageParser<TideChartProperty>(() => new TideChartProperty());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartProperty> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartProperty() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartProperty(TideChartProperty other) : this() {
    name_ = other.name_;
    type_ = other.type_;
    value_ = other.value_;
    props_ = other.props_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartProperty Clone() {
    return new TideChartProperty(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  /// property field name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private string type_ = "";
  /// <summary>
  /// property value type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 3;
  private string value_ = "";
  /// <summary>
  /// property value as a string
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Value {
    get { return value_; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::TideChartProperty> _repeated_props_codec
      = pb::FieldCodec.ForMessage(34, global::TideChartProperty.Parser);
  private readonly pbc::RepeatedField<global::TideChartProperty> props_ = new pbc::RepeatedField<global::TideChartProperty>();
  /// <summary>
  /// create a heirarchy of properties (repeated names form a collection)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartProperty> Props {
    get { return props_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartProperty);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartProperty other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Type != other.Type) return false;
    if (Value != other.Value) return false;
    if(!props_.Equals(other.props_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (Value.Length != 0) hash ^= Value.GetHashCode();
    hash ^= props_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Type);
    }
    if (Value.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Value);
    }
    props_.WriteTo(output, _repeated_props_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (Value.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
    }
    size += props_.CalculateSize(_repeated_props_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartProperty other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.Value.Length != 0) {
      Value = other.Value;
    }
    props_.Add(other.props_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Type = input.ReadString();
          break;
        }
        case 26: {
          Value = input.ReadString();
          break;
        }
        case 34: {
          props_.AddEntriesFrom(input, _repeated_props_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartCommentBox : pb::IMessage<TideChartCommentBox> {
  private static readonly pb::MessageParser<TideChartCommentBox> _parser = new pb::MessageParser<TideChartCommentBox>(() => new TideChartCommentBox());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartCommentBox> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartCommentBox() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartCommentBox(TideChartCommentBox other) : this() {
    id_ = other.id_;
    region_ = other.region_;
    posX_ = other.posX_;
    posY_ = other.posY_;
    width_ = other.width_;
    height_ = other.height_;
    fontSize_ = other.fontSize_;
    fontStyle_ = other.fontStyle_;
    alignment_ = other.alignment_;
    color_ = other.color_;
    background_ = other.background_;
    border_ = other.border_;
    raised_ = other.raised_;
    reversed_ = other.reversed_;
    switch (other.ContentCase) {
      case ContentOneofCase.Text:
        Text = other.Text;
        break;
      case ContentOneofCase.Image:
        Image = other.Image;
        break;
      case ContentOneofCase.Icon:
        Icon = other.Icon;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartCommentBox Clone() {
    return new TideChartCommentBox(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// unique id for the comment box
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "region" field.</summary>
  public const int RegionFieldNumber = 2;
  private string region_ = "";
  /// <summary>
  /// comment boxes can be relative to a region or to the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Region {
    get { return region_; }
    set {
      region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "posX" field.</summary>
  public const int PosXFieldNumber = 3;
  private int posX_;
  /// <summary>
  /// X position of the comment box 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "posY" field.</summary>
  public const int PosYFieldNumber = 4;
  private int posY_;
  /// <summary>
  /// Y position of the comment box 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 5;
  private int width_;
  /// <summary>
  /// width of comment box - 0 indicates autosize to fit content
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Width {
    get { return width_; }
    set {
      width_ = value;
    }
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 6;
  private int height_;
  /// <summary>
  /// height of comment box - 0 indicates autosize to fit content 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Height {
    get { return height_; }
    set {
      height_ = value;
    }
  }

  /// <summary>Field number for the "text" field.</summary>
  public const int TextFieldNumber = 7;
  /// <summary>
  /// text content for the comment
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Text {
    get { return contentCase_ == ContentOneofCase.Text ? (string) content_ : ""; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      contentCase_ = ContentOneofCase.Text;
    }
  }

  /// <summary>Field number for the "image" field.</summary>
  public const int ImageFieldNumber = 8;
  /// <summary>
  /// image to use for the comment
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Image {
    get { return contentCase_ == ContentOneofCase.Image ? (pb::ByteString) content_ : pb::ByteString.Empty; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      contentCase_ = ContentOneofCase.Image;
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 9;
  /// <summary>
  /// icon name to use for the comment
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return contentCase_ == ContentOneofCase.Icon ? (string) content_ : ""; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      contentCase_ = ContentOneofCase.Icon;
    }
  }

  /// <summary>Field number for the "fontSize" field.</summary>
  public const int FontSizeFieldNumber = 10;
  private double fontSize_;
  /// <summary>
  /// size of font to draw text
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double FontSize {
    get { return fontSize_; }
    set {
      fontSize_ = value;
    }
  }

  /// <summary>Field number for the "fontStyle" field.</summary>
  public const int FontStyleFieldNumber = 11;
  private string fontStyle_ = "";
  /// <summary>
  /// font style to use: Light, Regular, Bold, LightItalic, RegularItalic, BoldItalic
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FontStyle {
    get { return fontStyle_; }
    set {
      fontStyle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "alignment" field.</summary>
  public const int AlignmentFieldNumber = 12;
  private int alignment_;
  /// <summary>
  /// alignment of text within box (start (left):-1, middle:0, end (right):1)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Alignment {
    get { return alignment_; }
    set {
      alignment_ = value;
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 13;
  private int color_;
  /// <summary>
  /// color used to draw text - default is black
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Color {
    get { return color_; }
    set {
      color_ = value;
    }
  }

  /// <summary>Field number for the "background" field.</summary>
  public const int BackgroundFieldNumber = 14;
  private int background_;
  /// <summary>
  /// color used to draw background - default is transparent
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Background {
    get { return background_; }
    set {
      background_ = value;
    }
  }

  /// <summary>Field number for the "border" field.</summary>
  public const int BorderFieldNumber = 15;
  private int border_;
  /// <summary>
  /// color used to draw border - default is none
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Border {
    get { return border_; }
    set {
      border_ = value;
    }
  }

  /// <summary>Field number for the "raised" field.</summary>
  public const int RaisedFieldNumber = 16;
  private bool raised_;
  /// <summary>
  /// flag to indicate if a drop shadow should be used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Raised {
    get { return raised_; }
    set {
      raised_ = value;
    }
  }

  /// <summary>Field number for the "reversed" field.</summary>
  public const int ReversedFieldNumber = 17;
  private bool reversed_;
  /// <summary>
  /// flag to indicate if the text requires left to right layout order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Reversed {
    get { return reversed_; }
    set {
      reversed_ = value;
    }
  }

  private object content_;
  /// <summary>Enum of possible cases for the "content" oneof.</summary>
  public enum ContentOneofCase {
    None = 0,
    Text = 7,
    Image = 8,
    Icon = 9,
  }
  private ContentOneofCase contentCase_ = ContentOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentOneofCase ContentCase {
    get { return contentCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContent() {
    contentCase_ = ContentOneofCase.None;
    content_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartCommentBox);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartCommentBox other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Region != other.Region) return false;
    if (PosX != other.PosX) return false;
    if (PosY != other.PosY) return false;
    if (Width != other.Width) return false;
    if (Height != other.Height) return false;
    if (Text != other.Text) return false;
    if (Image != other.Image) return false;
    if (Icon != other.Icon) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FontSize, other.FontSize)) return false;
    if (FontStyle != other.FontStyle) return false;
    if (Alignment != other.Alignment) return false;
    if (Color != other.Color) return false;
    if (Background != other.Background) return false;
    if (Border != other.Border) return false;
    if (Raised != other.Raised) return false;
    if (Reversed != other.Reversed) return false;
    if (ContentCase != other.ContentCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Region.Length != 0) hash ^= Region.GetHashCode();
    if (PosX != 0) hash ^= PosX.GetHashCode();
    if (PosY != 0) hash ^= PosY.GetHashCode();
    if (Width != 0) hash ^= Width.GetHashCode();
    if (Height != 0) hash ^= Height.GetHashCode();
    if (contentCase_ == ContentOneofCase.Text) hash ^= Text.GetHashCode();
    if (contentCase_ == ContentOneofCase.Image) hash ^= Image.GetHashCode();
    if (contentCase_ == ContentOneofCase.Icon) hash ^= Icon.GetHashCode();
    if (FontSize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FontSize);
    if (FontStyle.Length != 0) hash ^= FontStyle.GetHashCode();
    if (Alignment != 0) hash ^= Alignment.GetHashCode();
    if (Color != 0) hash ^= Color.GetHashCode();
    if (Background != 0) hash ^= Background.GetHashCode();
    if (Border != 0) hash ^= Border.GetHashCode();
    if (Raised != false) hash ^= Raised.GetHashCode();
    if (Reversed != false) hash ^= Reversed.GetHashCode();
    hash ^= (int) contentCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Region.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Region);
    }
    if (PosX != 0) {
      output.WriteRawTag(24);
      output.WriteSInt32(PosX);
    }
    if (PosY != 0) {
      output.WriteRawTag(32);
      output.WriteSInt32(PosY);
    }
    if (Width != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Width);
    }
    if (Height != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Height);
    }
    if (contentCase_ == ContentOneofCase.Text) {
      output.WriteRawTag(58);
      output.WriteString(Text);
    }
    if (contentCase_ == ContentOneofCase.Image) {
      output.WriteRawTag(66);
      output.WriteBytes(Image);
    }
    if (contentCase_ == ContentOneofCase.Icon) {
      output.WriteRawTag(74);
      output.WriteString(Icon);
    }
    if (FontSize != 0D) {
      output.WriteRawTag(81);
      output.WriteDouble(FontSize);
    }
    if (FontStyle.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(FontStyle);
    }
    if (Alignment != 0) {
      output.WriteRawTag(96);
      output.WriteSInt32(Alignment);
    }
    if (Color != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(Color);
    }
    if (Background != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(Background);
    }
    if (Border != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(Border);
    }
    if (Raised != false) {
      output.WriteRawTag(128, 1);
      output.WriteBool(Raised);
    }
    if (Reversed != false) {
      output.WriteRawTag(136, 1);
      output.WriteBool(Reversed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Region.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
    }
    if (PosX != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PosX);
    }
    if (PosY != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PosY);
    }
    if (Width != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
    }
    if (Height != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
    }
    if (contentCase_ == ContentOneofCase.Text) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    if (contentCase_ == ContentOneofCase.Image) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
    }
    if (contentCase_ == ContentOneofCase.Icon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (FontSize != 0D) {
      size += 1 + 8;
    }
    if (FontStyle.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FontStyle);
    }
    if (Alignment != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Alignment);
    }
    if (Color != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
    }
    if (Background != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Background);
    }
    if (Border != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Border);
    }
    if (Raised != false) {
      size += 2 + 1;
    }
    if (Reversed != false) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartCommentBox other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Region.Length != 0) {
      Region = other.Region;
    }
    if (other.PosX != 0) {
      PosX = other.PosX;
    }
    if (other.PosY != 0) {
      PosY = other.PosY;
    }
    if (other.Width != 0) {
      Width = other.Width;
    }
    if (other.Height != 0) {
      Height = other.Height;
    }
    if (other.FontSize != 0D) {
      FontSize = other.FontSize;
    }
    if (other.FontStyle.Length != 0) {
      FontStyle = other.FontStyle;
    }
    if (other.Alignment != 0) {
      Alignment = other.Alignment;
    }
    if (other.Color != 0) {
      Color = other.Color;
    }
    if (other.Background != 0) {
      Background = other.Background;
    }
    if (other.Border != 0) {
      Border = other.Border;
    }
    if (other.Raised != false) {
      Raised = other.Raised;
    }
    if (other.Reversed != false) {
      Reversed = other.Reversed;
    }
    switch (other.ContentCase) {
      case ContentOneofCase.Text:
        Text = other.Text;
        break;
      case ContentOneofCase.Image:
        Image = other.Image;
        break;
      case ContentOneofCase.Icon:
        Icon = other.Icon;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Region = input.ReadString();
          break;
        }
        case 24: {
          PosX = input.ReadSInt32();
          break;
        }
        case 32: {
          PosY = input.ReadSInt32();
          break;
        }
        case 40: {
          Width = input.ReadInt32();
          break;
        }
        case 48: {
          Height = input.ReadInt32();
          break;
        }
        case 58: {
          Text = input.ReadString();
          break;
        }
        case 66: {
          Image = input.ReadBytes();
          break;
        }
        case 74: {
          Icon = input.ReadString();
          break;
        }
        case 81: {
          FontSize = input.ReadDouble();
          break;
        }
        case 90: {
          FontStyle = input.ReadString();
          break;
        }
        case 96: {
          Alignment = input.ReadSInt32();
          break;
        }
        case 104: {
          Color = input.ReadInt32();
          break;
        }
        case 112: {
          Background = input.ReadInt32();
          break;
        }
        case 120: {
          Border = input.ReadInt32();
          break;
        }
        case 128: {
          Raised = input.ReadBool();
          break;
        }
        case 136: {
          Reversed = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartWidget : pb::IMessage<TideChartWidget> {
  private static readonly pb::MessageParser<TideChartWidget> _parser = new pb::MessageParser<TideChartWidget>(() => new TideChartWidget());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartWidget> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartWidget() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartWidget(TideChartWidget other) : this() {
    id_ = other.id_;
    type_ = other.type_;
    title_ = other.title_;
    region_ = other.region_;
    posX_ = other.posX_;
    posY_ = other.posY_;
    width_ = other.width_;
    height_ = other.height_;
    props_ = other.props_.Clone();
    switch (other.TargetCase) {
      case TargetOneofCase.Link:
        Link = other.Link;
        break;
      case TargetOneofCase.Port:
        Port = other.Port;
        break;
      case TargetOneofCase.Node:
        Node = other.Node;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartWidget Clone() {
    return new TideChartWidget(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// unique id for the widget
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private string type_ = "";
  /// <summary>
  /// type of widget
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 3;
  private string title_ = "";
  /// <summary>
  /// description title of the widget
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "region" field.</summary>
  public const int RegionFieldNumber = 4;
  private string region_ = "";
  /// <summary>
  /// comment boxes can be relative to a region or to the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Region {
    get { return region_; }
    set {
      region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "posX" field.</summary>
  public const int PosXFieldNumber = 5;
  private int posX_;
  /// <summary>
  /// X position of the comment box 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "posY" field.</summary>
  public const int PosYFieldNumber = 6;
  private int posY_;
  /// <summary>
  /// Y position of the comment box 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 7;
  private int width_;
  /// <summary>
  /// width of comment box - 0 indicates autosize to fit content
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Width {
    get { return width_; }
    set {
      width_ = value;
    }
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 8;
  private int height_;
  /// <summary>
  /// height of comment box - 0 indicates autosize to fit content 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Height {
    get { return height_; }
    set {
      height_ = value;
    }
  }

  /// <summary>Field number for the "link" field.</summary>
  public const int LinkFieldNumber = 9;
  /// <summary>
  /// link widget is associated with (&lt;out-node>:&lt;out-port>->&lt;in-node>:&lt;in-port>)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Link {
    get { return targetCase_ == TargetOneofCase.Link ? (string) target_ : ""; }
    set {
      target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      targetCase_ = TargetOneofCase.Link;
    }
  }

  /// <summary>Field number for the "port" field.</summary>
  public const int PortFieldNumber = 10;
  /// <summary>
  /// port widget is associated with (&lt;node>:&lt;port>)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Port {
    get { return targetCase_ == TargetOneofCase.Port ? (string) target_ : ""; }
    set {
      target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      targetCase_ = TargetOneofCase.Port;
    }
  }

  /// <summary>Field number for the "node" field.</summary>
  public const int NodeFieldNumber = 11;
  /// <summary>
  /// name of node widget is associated with
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Node {
    get { return targetCase_ == TargetOneofCase.Node ? (string) target_ : ""; }
    set {
      target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      targetCase_ = TargetOneofCase.Node;
    }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 12;
  private static readonly pb::FieldCodec<global::TideChartProperty> _repeated_props_codec
      = pb::FieldCodec.ForMessage(98, global::TideChartProperty.Parser);
  private readonly pbc::RepeatedField<global::TideChartProperty> props_ = new pbc::RepeatedField<global::TideChartProperty>();
  /// <summary>
  /// widgets can have configuration paremeters
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartProperty> Props {
    get { return props_; }
  }

  private object target_;
  /// <summary>Enum of possible cases for the "target" oneof.</summary>
  public enum TargetOneofCase {
    None = 0,
    Link = 9,
    Port = 10,
    Node = 11,
  }
  private TargetOneofCase targetCase_ = TargetOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TargetOneofCase TargetCase {
    get { return targetCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTarget() {
    targetCase_ = TargetOneofCase.None;
    target_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartWidget);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartWidget other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Type != other.Type) return false;
    if (Title != other.Title) return false;
    if (Region != other.Region) return false;
    if (PosX != other.PosX) return false;
    if (PosY != other.PosY) return false;
    if (Width != other.Width) return false;
    if (Height != other.Height) return false;
    if (Link != other.Link) return false;
    if (Port != other.Port) return false;
    if (Node != other.Node) return false;
    if(!props_.Equals(other.props_)) return false;
    if (TargetCase != other.TargetCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (Region.Length != 0) hash ^= Region.GetHashCode();
    if (PosX != 0) hash ^= PosX.GetHashCode();
    if (PosY != 0) hash ^= PosY.GetHashCode();
    if (Width != 0) hash ^= Width.GetHashCode();
    if (Height != 0) hash ^= Height.GetHashCode();
    if (targetCase_ == TargetOneofCase.Link) hash ^= Link.GetHashCode();
    if (targetCase_ == TargetOneofCase.Port) hash ^= Port.GetHashCode();
    if (targetCase_ == TargetOneofCase.Node) hash ^= Node.GetHashCode();
    hash ^= props_.GetHashCode();
    hash ^= (int) targetCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Type);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Title);
    }
    if (Region.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Region);
    }
    if (PosX != 0) {
      output.WriteRawTag(40);
      output.WriteSInt32(PosX);
    }
    if (PosY != 0) {
      output.WriteRawTag(48);
      output.WriteSInt32(PosY);
    }
    if (Width != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Width);
    }
    if (Height != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Height);
    }
    if (targetCase_ == TargetOneofCase.Link) {
      output.WriteRawTag(74);
      output.WriteString(Link);
    }
    if (targetCase_ == TargetOneofCase.Port) {
      output.WriteRawTag(82);
      output.WriteString(Port);
    }
    if (targetCase_ == TargetOneofCase.Node) {
      output.WriteRawTag(90);
      output.WriteString(Node);
    }
    props_.WriteTo(output, _repeated_props_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (Region.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
    }
    if (PosX != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PosX);
    }
    if (PosY != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PosY);
    }
    if (Width != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
    }
    if (Height != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
    }
    if (targetCase_ == TargetOneofCase.Link) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
    }
    if (targetCase_ == TargetOneofCase.Port) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Port);
    }
    if (targetCase_ == TargetOneofCase.Node) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Node);
    }
    size += props_.CalculateSize(_repeated_props_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartWidget other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    if (other.Region.Length != 0) {
      Region = other.Region;
    }
    if (other.PosX != 0) {
      PosX = other.PosX;
    }
    if (other.PosY != 0) {
      PosY = other.PosY;
    }
    if (other.Width != 0) {
      Width = other.Width;
    }
    if (other.Height != 0) {
      Height = other.Height;
    }
    props_.Add(other.props_);
    switch (other.TargetCase) {
      case TargetOneofCase.Link:
        Link = other.Link;
        break;
      case TargetOneofCase.Port:
        Port = other.Port;
        break;
      case TargetOneofCase.Node:
        Node = other.Node;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Type = input.ReadString();
          break;
        }
        case 26: {
          Title = input.ReadString();
          break;
        }
        case 34: {
          Region = input.ReadString();
          break;
        }
        case 40: {
          PosX = input.ReadSInt32();
          break;
        }
        case 48: {
          PosY = input.ReadSInt32();
          break;
        }
        case 56: {
          Width = input.ReadInt32();
          break;
        }
        case 64: {
          Height = input.ReadInt32();
          break;
        }
        case 74: {
          Link = input.ReadString();
          break;
        }
        case 82: {
          Port = input.ReadString();
          break;
        }
        case 90: {
          Node = input.ReadString();
          break;
        }
        case 98: {
          props_.AddEntriesFrom(input, _repeated_props_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartPort : pb::IMessage<TideChartPort> {
  private static readonly pb::MessageParser<TideChartPort> _parser = new pb::MessageParser<TideChartPort>(() => new TideChartPort());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartPort> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartPort() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartPort(TideChartPort other) : this() {
    type_ = other.type_;
    name_ = other.name_;
    ordinal_ = other.ordinal_;
    default_ = other.default_;
    required_ = other.required_;
    allowed_ = other.allowed_.Clone();
    hint_ = other.hint_;
    constant_ = other.constant_ != null ? other.constant_.Clone() : null;
    trigger_ = other.trigger_;
    filter_ = other.filter_;
    event_ = other.event_;
    sync_ = other.sync_;
    block_ = other.block_;
    queue_ = other.queue_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartPort Clone() {
    return new TideChartPort(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private string type_ = "";
  /// <summary>
  /// type of port: inport, outport
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  /// port name (unique to node scope)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ordinal" field.</summary>
  public const int OrdinalFieldNumber = 3;
  private int ordinal_;
  /// <summary>
  /// position in the node's set of inports or outports
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Ordinal {
    get { return ordinal_; }
    set {
      ordinal_ = value;
    }
  }

  /// <summary>Field number for the "default" field.</summary>
  public const int DefaultFieldNumber = 4;
  private bool default_;
  /// <summary>
  /// used by methods to indicate which ports are used for default in/out routing
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Default {
    get { return default_; }
    set {
      default_ = value;
    }
  }

  /// <summary>Field number for the "required" field.</summary>
  public const int RequiredFieldNumber = 5;
  private bool required_;
  /// <summary>
  /// used by methods to indicate the port must exist
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Required {
    get { return required_; }
    set {
      required_ = value;
    }
  }

  /// <summary>Field number for the "allowed" field.</summary>
  public const int AllowedFieldNumber = 6;
  private static readonly pb::FieldCodec<string> _repeated_allowed_codec
      = pb::FieldCodec.ForString(50);
  private readonly pbc::RepeatedField<string> allowed_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// used by methods to define what value / message types are allowed to be
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Allowed {
    get { return allowed_; }
  }

  /// <summary>Field number for the "hint" field.</summary>
  public const int HintFieldNumber = 7;
  private string hint_ = "";
  /// <summary>
  /// used by methods to describe how a port should be used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Hint {
    get { return hint_; }
    set {
      hint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "constant" field.</summary>
  public const int ConstantFieldNumber = 8;
  private global::TideChartProperty constant_;
  /// <summary>
  /// a constant value applied to the inport
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartProperty Constant {
    get { return constant_; }
    set {
      constant_ = value;
    }
  }

  /// <summary>Field number for the "trigger" field.</summary>
  public const int TriggerFieldNumber = 9;
  private string trigger_ = "";
  /// <summary>
  /// a trigger the inport automatically reads from 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Trigger {
    get { return trigger_; }
    set {
      trigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "filter" field.</summary>
  public const int FilterFieldNumber = 10;
  private string filter_ = "";
  /// <summary>
  /// a filter or conditional expressions applied to messages received or sent
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Filter {
    get { return filter_; }
    set {
      filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "event" field.</summary>
  public const int EventFieldNumber = 11;
  private string event_ = "";
  /// <summary>
  /// an event the outport automatically writes to
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Event {
    get { return event_; }
    set {
      event_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sync" field.</summary>
  public const int SyncFieldNumber = 12;
  private string sync_ = "";
  /// <summary>
  /// creates a syncronizing group between ports
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Sync {
    get { return sync_; }
    set {
      sync_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "block" field.</summary>
  public const int BlockFieldNumber = 13;
  private bool block_;
  /// <summary>
  /// determines if the port will block to wait for the rest of the port group
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Block {
    get { return block_; }
    set {
      block_ = value;
    }
  }

  /// <summary>Field number for the "queue" field.</summary>
  public const int QueueFieldNumber = 14;
  private bool queue_;
  /// <summary>
  /// determines if messages should queue while blocking or replace with latest received
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Queue {
    get { return queue_; }
    set {
      queue_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartPort);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartPort other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Name != other.Name) return false;
    if (Ordinal != other.Ordinal) return false;
    if (Default != other.Default) return false;
    if (Required != other.Required) return false;
    if(!allowed_.Equals(other.allowed_)) return false;
    if (Hint != other.Hint) return false;
    if (!object.Equals(Constant, other.Constant)) return false;
    if (Trigger != other.Trigger) return false;
    if (Filter != other.Filter) return false;
    if (Event != other.Event) return false;
    if (Sync != other.Sync) return false;
    if (Block != other.Block) return false;
    if (Queue != other.Queue) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Ordinal != 0) hash ^= Ordinal.GetHashCode();
    if (Default != false) hash ^= Default.GetHashCode();
    if (Required != false) hash ^= Required.GetHashCode();
    hash ^= allowed_.GetHashCode();
    if (Hint.Length != 0) hash ^= Hint.GetHashCode();
    if (constant_ != null) hash ^= Constant.GetHashCode();
    if (Trigger.Length != 0) hash ^= Trigger.GetHashCode();
    if (Filter.Length != 0) hash ^= Filter.GetHashCode();
    if (Event.Length != 0) hash ^= Event.GetHashCode();
    if (Sync.Length != 0) hash ^= Sync.GetHashCode();
    if (Block != false) hash ^= Block.GetHashCode();
    if (Queue != false) hash ^= Queue.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Type);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Ordinal != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Ordinal);
    }
    if (Default != false) {
      output.WriteRawTag(32);
      output.WriteBool(Default);
    }
    if (Required != false) {
      output.WriteRawTag(40);
      output.WriteBool(Required);
    }
    allowed_.WriteTo(output, _repeated_allowed_codec);
    if (Hint.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Hint);
    }
    if (constant_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Constant);
    }
    if (Trigger.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Trigger);
    }
    if (Filter.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Filter);
    }
    if (Event.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(Event);
    }
    if (Sync.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(Sync);
    }
    if (Block != false) {
      output.WriteRawTag(104);
      output.WriteBool(Block);
    }
    if (Queue != false) {
      output.WriteRawTag(112);
      output.WriteBool(Queue);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Ordinal != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ordinal);
    }
    if (Default != false) {
      size += 1 + 1;
    }
    if (Required != false) {
      size += 1 + 1;
    }
    size += allowed_.CalculateSize(_repeated_allowed_codec);
    if (Hint.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Hint);
    }
    if (constant_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Constant);
    }
    if (Trigger.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Trigger);
    }
    if (Filter.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
    }
    if (Event.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Event);
    }
    if (Sync.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Sync);
    }
    if (Block != false) {
      size += 1 + 1;
    }
    if (Queue != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartPort other) {
    if (other == null) {
      return;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Ordinal != 0) {
      Ordinal = other.Ordinal;
    }
    if (other.Default != false) {
      Default = other.Default;
    }
    if (other.Required != false) {
      Required = other.Required;
    }
    allowed_.Add(other.allowed_);
    if (other.Hint.Length != 0) {
      Hint = other.Hint;
    }
    if (other.constant_ != null) {
      if (constant_ == null) {
        Constant = new global::TideChartProperty();
      }
      Constant.MergeFrom(other.Constant);
    }
    if (other.Trigger.Length != 0) {
      Trigger = other.Trigger;
    }
    if (other.Filter.Length != 0) {
      Filter = other.Filter;
    }
    if (other.Event.Length != 0) {
      Event = other.Event;
    }
    if (other.Sync.Length != 0) {
      Sync = other.Sync;
    }
    if (other.Block != false) {
      Block = other.Block;
    }
    if (other.Queue != false) {
      Queue = other.Queue;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Type = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Ordinal = input.ReadInt32();
          break;
        }
        case 32: {
          Default = input.ReadBool();
          break;
        }
        case 40: {
          Required = input.ReadBool();
          break;
        }
        case 50: {
          allowed_.AddEntriesFrom(input, _repeated_allowed_codec);
          break;
        }
        case 58: {
          Hint = input.ReadString();
          break;
        }
        case 66: {
          if (constant_ == null) {
            Constant = new global::TideChartProperty();
          }
          input.ReadMessage(Constant);
          break;
        }
        case 74: {
          Trigger = input.ReadString();
          break;
        }
        case 82: {
          Filter = input.ReadString();
          break;
        }
        case 90: {
          Event = input.ReadString();
          break;
        }
        case 98: {
          Sync = input.ReadString();
          break;
        }
        case 104: {
          Block = input.ReadBool();
          break;
        }
        case 112: {
          Queue = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartLink : pb::IMessage<TideChartLink> {
  private static readonly pb::MessageParser<TideChartLink> _parser = new pb::MessageParser<TideChartLink>(() => new TideChartLink());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartLink> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartLink() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartLink(TideChartLink other) : this() {
    outNode_ = other.outNode_;
    outPort_ = other.outPort_;
    inNode_ = other.inNode_;
    inPort_ = other.inPort_;
    group_ = other.group_;
    delay_ = other.delay_;
    filter_ = other.filter_;
    logging_ = other.logging_;
    debugging_ = other.debugging_;
    paused_ = other.paused_;
    disabled_ = other.disabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartLink Clone() {
    return new TideChartLink(this);
  }

  /// <summary>Field number for the "outNode" field.</summary>
  public const int OutNodeFieldNumber = 1;
  private string outNode_ = "";
  /// <summary>
  /// linking from node outports
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OutNode {
    get { return outNode_; }
    set {
      outNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "outPort" field.</summary>
  public const int OutPortFieldNumber = 2;
  private string outPort_ = "";
  /// <summary>
  /// outport linked from
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OutPort {
    get { return outPort_; }
    set {
      outPort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "inNode" field.</summary>
  public const int InNodeFieldNumber = 3;
  private string inNode_ = "";
  /// <summary>
  /// linking to node inports
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string InNode {
    get { return inNode_; }
    set {
      inNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "inPort" field.</summary>
  public const int InPortFieldNumber = 4;
  private string inPort_ = "";
  /// <summary>
  /// inport linked to
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string InPort {
    get { return inPort_; }
    set {
      inPort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "group" field.</summary>
  public const int GroupFieldNumber = 5;
  private int group_;
  /// <summary>
  /// links can be associated into groups (usually just determins color)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Group {
    get { return group_; }
    set {
      group_ = value;
    }
  }

  /// <summary>Field number for the "delay" field.</summary>
  public const int DelayFieldNumber = 6;
  private int delay_;
  /// <summary>
  /// automatic time delay (msec) added to messages (equivalent to routing thru a delay node)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  /// <summary>Field number for the "filter" field.</summary>
  public const int FilterFieldNumber = 7;
  private string filter_ = "";
  /// <summary>
  /// a filter or conditional expression applied to messages on the link
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Filter {
    get { return filter_; }
    set {
      filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "logging" field.</summary>
  public const int LoggingFieldNumber = 16;
  private bool logging_;
  /// <summary>
  /// flag indicating this link will trace messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Logging {
    get { return logging_; }
    set {
      logging_ = value;
    }
  }

  /// <summary>Field number for the "debugging" field.</summary>
  public const int DebuggingFieldNumber = 17;
  private bool debugging_;
  /// <summary>
  /// flag indicating this link is a debug breakpoint
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Debugging {
    get { return debugging_; }
    set {
      debugging_ = value;
    }
  }

  /// <summary>Field number for the "paused" field.</summary>
  public const int PausedFieldNumber = 18;
  private bool paused_;
  /// <summary>
  /// flag indicating this link is paused (messages are queued)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Paused {
    get { return paused_; }
    set {
      paused_ = value;
    }
  }

  /// <summary>Field number for the "disabled" field.</summary>
  public const int DisabledFieldNumber = 19;
  private bool disabled_;
  /// <summary>
  /// flag indicating this link is disabled (messages are dropped)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Disabled {
    get { return disabled_; }
    set {
      disabled_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartLink);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartLink other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OutNode != other.OutNode) return false;
    if (OutPort != other.OutPort) return false;
    if (InNode != other.InNode) return false;
    if (InPort != other.InPort) return false;
    if (Group != other.Group) return false;
    if (Delay != other.Delay) return false;
    if (Filter != other.Filter) return false;
    if (Logging != other.Logging) return false;
    if (Debugging != other.Debugging) return false;
    if (Paused != other.Paused) return false;
    if (Disabled != other.Disabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OutNode.Length != 0) hash ^= OutNode.GetHashCode();
    if (OutPort.Length != 0) hash ^= OutPort.GetHashCode();
    if (InNode.Length != 0) hash ^= InNode.GetHashCode();
    if (InPort.Length != 0) hash ^= InPort.GetHashCode();
    if (Group != 0) hash ^= Group.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    if (Filter.Length != 0) hash ^= Filter.GetHashCode();
    if (Logging != false) hash ^= Logging.GetHashCode();
    if (Debugging != false) hash ^= Debugging.GetHashCode();
    if (Paused != false) hash ^= Paused.GetHashCode();
    if (Disabled != false) hash ^= Disabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OutNode.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(OutNode);
    }
    if (OutPort.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(OutPort);
    }
    if (InNode.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(InNode);
    }
    if (InPort.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(InPort);
    }
    if (Group != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Group);
    }
    if (Delay != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Delay);
    }
    if (Filter.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Filter);
    }
    if (Logging != false) {
      output.WriteRawTag(128, 1);
      output.WriteBool(Logging);
    }
    if (Debugging != false) {
      output.WriteRawTag(136, 1);
      output.WriteBool(Debugging);
    }
    if (Paused != false) {
      output.WriteRawTag(144, 1);
      output.WriteBool(Paused);
    }
    if (Disabled != false) {
      output.WriteRawTag(152, 1);
      output.WriteBool(Disabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OutNode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OutNode);
    }
    if (OutPort.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OutPort);
    }
    if (InNode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(InNode);
    }
    if (InPort.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(InPort);
    }
    if (Group != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
    }
    if (Delay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
    }
    if (Filter.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
    }
    if (Logging != false) {
      size += 2 + 1;
    }
    if (Debugging != false) {
      size += 2 + 1;
    }
    if (Paused != false) {
      size += 2 + 1;
    }
    if (Disabled != false) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartLink other) {
    if (other == null) {
      return;
    }
    if (other.OutNode.Length != 0) {
      OutNode = other.OutNode;
    }
    if (other.OutPort.Length != 0) {
      OutPort = other.OutPort;
    }
    if (other.InNode.Length != 0) {
      InNode = other.InNode;
    }
    if (other.InPort.Length != 0) {
      InPort = other.InPort;
    }
    if (other.Group != 0) {
      Group = other.Group;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
    if (other.Filter.Length != 0) {
      Filter = other.Filter;
    }
    if (other.Logging != false) {
      Logging = other.Logging;
    }
    if (other.Debugging != false) {
      Debugging = other.Debugging;
    }
    if (other.Paused != false) {
      Paused = other.Paused;
    }
    if (other.Disabled != false) {
      Disabled = other.Disabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          OutNode = input.ReadString();
          break;
        }
        case 18: {
          OutPort = input.ReadString();
          break;
        }
        case 26: {
          InNode = input.ReadString();
          break;
        }
        case 34: {
          InPort = input.ReadString();
          break;
        }
        case 40: {
          Group = input.ReadInt32();
          break;
        }
        case 48: {
          Delay = input.ReadInt32();
          break;
        }
        case 58: {
          Filter = input.ReadString();
          break;
        }
        case 128: {
          Logging = input.ReadBool();
          break;
        }
        case 136: {
          Debugging = input.ReadBool();
          break;
        }
        case 144: {
          Paused = input.ReadBool();
          break;
        }
        case 152: {
          Disabled = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartNote : pb::IMessage<TideChartNote> {
  private static readonly pb::MessageParser<TideChartNote> _parser = new pb::MessageParser<TideChartNote>(() => new TideChartNote());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartNote> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNote() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNote(TideChartNote other) : this() {
    id_ = other.id_;
    replyTo_ = other.replyTo_;
    changeTo_ = other.changeTo_;
    content_ = other.content_;
    createdBy_ = other.createdBy_;
    createdDate_ = other.createdDate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNote Clone() {
    return new TideChartNote(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// unique id for the note
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "replyTo" field.</summary>
  public const int ReplyToFieldNumber = 2;
  private string replyTo_ = "";
  /// <summary>
  /// reference to note this replies to
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ReplyTo {
    get { return replyTo_; }
    set {
      replyTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "changeTo" field.</summary>
  public const int ChangeToFieldNumber = 3;
  private string changeTo_ = "";
  /// <summary>
  /// reference to note this replaces
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ChangeTo {
    get { return changeTo_; }
    set {
      changeTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 4;
  private string content_ = "";
  /// <summary>
  /// content of note (Markdown and :icons allowed)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "createdBy" field.</summary>
  public const int CreatedByFieldNumber = 5;
  private string createdBy_ = "";
  /// <summary>
  /// user that created the note
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CreatedBy {
    get { return createdBy_; }
    set {
      createdBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "createdDate" field.</summary>
  public const int CreatedDateFieldNumber = 6;
  private string createdDate_ = "";
  /// <summary>
  /// datetime the note was created
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CreatedDate {
    get { return createdDate_; }
    set {
      createdDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartNote);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartNote other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (ReplyTo != other.ReplyTo) return false;
    if (ChangeTo != other.ChangeTo) return false;
    if (Content != other.Content) return false;
    if (CreatedBy != other.CreatedBy) return false;
    if (CreatedDate != other.CreatedDate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (ReplyTo.Length != 0) hash ^= ReplyTo.GetHashCode();
    if (ChangeTo.Length != 0) hash ^= ChangeTo.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    if (CreatedBy.Length != 0) hash ^= CreatedBy.GetHashCode();
    if (CreatedDate.Length != 0) hash ^= CreatedDate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (ReplyTo.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ReplyTo);
    }
    if (ChangeTo.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ChangeTo);
    }
    if (Content.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Content);
    }
    if (CreatedBy.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(CreatedBy);
    }
    if (CreatedDate.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(CreatedDate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (ReplyTo.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplyTo);
    }
    if (ChangeTo.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangeTo);
    }
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    if (CreatedBy.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedBy);
    }
    if (CreatedDate.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedDate);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartNote other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.ReplyTo.Length != 0) {
      ReplyTo = other.ReplyTo;
    }
    if (other.ChangeTo.Length != 0) {
      ChangeTo = other.ChangeTo;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    if (other.CreatedBy.Length != 0) {
      CreatedBy = other.CreatedBy;
    }
    if (other.CreatedDate.Length != 0) {
      CreatedDate = other.CreatedDate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          ReplyTo = input.ReadString();
          break;
        }
        case 26: {
          ChangeTo = input.ReadString();
          break;
        }
        case 34: {
          Content = input.ReadString();
          break;
        }
        case 42: {
          CreatedBy = input.ReadString();
          break;
        }
        case 50: {
          CreatedDate = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartNode : pb::IMessage<TideChartNode> {
  private static readonly pb::MessageParser<TideChartNode> _parser = new pb::MessageParser<TideChartNode>(() => new TideChartNode());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNode(TideChartNode other) : this() {
    name_ = other.name_;
    type_ = other.type_;
    posX_ = other.posX_;
    posY_ = other.posY_;
    title_ = other.title_;
    icon_ = other.icon_;
    library_ = other.library_;
    method_ = other.method_;
    delay_ = other.delay_;
    inports_ = other.inports_.Clone();
    outports_ = other.outports_.Clone();
    props_ = other.props_.Clone();
    logging_ = other.logging_;
    debugging_ = other.debugging_;
    paused_ = other.paused_;
    disabled_ = other.disabled_;
    notes_ = other.notes_.Clone();
    script_ = other.script_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNode Clone() {
    return new TideChartNode(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  /// unique (graph scope) name for this node
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private string type_ = "";
  /// <summary>
  /// node type: action, behavior, inport, outport, trigger, event, filter, router, sequence, timeline, controller, navigation, gamepad, custom
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "posX" field.</summary>
  public const int PosXFieldNumber = 3;
  private int posX_;
  /// <summary>
  /// X position on the chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "posY" field.</summary>
  public const int PosYFieldNumber = 4;
  private int posY_;
  /// <summary>
  /// Y position on the chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 5;
  private string title_ = "";
  /// <summary>
  /// descriptive label for the name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 6;
  private string icon_ = "";
  /// <summary>
  /// name of icon (font-awesome)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "library" field.</summary>
  public const int LibraryFieldNumber = 7;
  private string library_ = "";
  /// <summary>
  /// name of the library for the nodes method (libraries allow implementation to be abstracted and modular)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Library {
    get { return library_; }
    set {
      library_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "method" field.</summary>
  public const int MethodFieldNumber = 8;
  private string method_ = "";
  /// <summary>
  /// name of method that implements the node's action
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Method {
    get { return method_; }
    set {
      method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "delay" field.</summary>
  public const int DelayFieldNumber = 9;
  private int delay_;
  /// <summary>
  /// automatic time delay (msec) added to output messages (equivalent to routing thru a delay node)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  /// <summary>Field number for the "inports" field.</summary>
  public const int InportsFieldNumber = 10;
  private static readonly pb::FieldCodec<global::TideChartPort> _repeated_inports_codec
      = pb::FieldCodec.ForMessage(82, global::TideChartPort.Parser);
  private readonly pbc::RepeatedField<global::TideChartPort> inports_ = new pbc::RepeatedField<global::TideChartPort>();
  /// <summary>
  /// node inports to connect inbound links
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartPort> Inports {
    get { return inports_; }
  }

  /// <summary>Field number for the "outports" field.</summary>
  public const int OutportsFieldNumber = 11;
  private static readonly pb::FieldCodec<global::TideChartPort> _repeated_outports_codec
      = pb::FieldCodec.ForMessage(90, global::TideChartPort.Parser);
  private readonly pbc::RepeatedField<global::TideChartPort> outports_ = new pbc::RepeatedField<global::TideChartPort>();
  /// <summary>
  /// node outports to connect outbound links
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartPort> Outports {
    get { return outports_; }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 12;
  private static readonly pb::FieldCodec<global::TideChartProperty> _repeated_props_codec
      = pb::FieldCodec.ForMessage(98, global::TideChartProperty.Parser);
  private readonly pbc::RepeatedField<global::TideChartProperty> props_ = new pbc::RepeatedField<global::TideChartProperty>();
  /// <summary>
  /// configuration properties for this node (combines with graph properties and region properties)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartProperty> Props {
    get { return props_; }
  }

  /// <summary>Field number for the "logging" field.</summary>
  public const int LoggingFieldNumber = 16;
  private bool logging_;
  /// <summary>
  /// flag indicating this node will trace messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Logging {
    get { return logging_; }
    set {
      logging_ = value;
    }
  }

  /// <summary>Field number for the "debugging" field.</summary>
  public const int DebuggingFieldNumber = 17;
  private bool debugging_;
  /// <summary>
  /// flag indicating this node is a debug breakpoint
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Debugging {
    get { return debugging_; }
    set {
      debugging_ = value;
    }
  }

  /// <summary>Field number for the "paused" field.</summary>
  public const int PausedFieldNumber = 18;
  private bool paused_;
  /// <summary>
  /// flag indicating this node is paused (messages are queued)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Paused {
    get { return paused_; }
    set {
      paused_ = value;
    }
  }

  /// <summary>Field number for the "disabled" field.</summary>
  public const int DisabledFieldNumber = 19;
  private bool disabled_;
  /// <summary>
  /// flag indicating this node is disabled (messages are dropped)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Disabled {
    get { return disabled_; }
    set {
      disabled_ = value;
    }
  }

  /// <summary>Field number for the "notes" field.</summary>
  public const int NotesFieldNumber = 20;
  private static readonly pb::FieldCodec<global::TideChartNote> _repeated_notes_codec
      = pb::FieldCodec.ForMessage(162, global::TideChartNote.Parser);
  private readonly pbc::RepeatedField<global::TideChartNote> notes_ = new pbc::RepeatedField<global::TideChartNote>();
  /// <summary>
  /// comments associated with this node
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartNote> Notes {
    get { return notes_; }
  }

  /// <summary>Field number for the "script" field.</summary>
  public const int ScriptFieldNumber = 21;
  private string script_ = "";
  /// <summary>
  /// a user script of custom code to implement the node's action, filter or mux/demux operations
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Script {
    get { return script_; }
    set {
      script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Type != other.Type) return false;
    if (PosX != other.PosX) return false;
    if (PosY != other.PosY) return false;
    if (Title != other.Title) return false;
    if (Icon != other.Icon) return false;
    if (Library != other.Library) return false;
    if (Method != other.Method) return false;
    if (Delay != other.Delay) return false;
    if(!inports_.Equals(other.inports_)) return false;
    if(!outports_.Equals(other.outports_)) return false;
    if(!props_.Equals(other.props_)) return false;
    if (Logging != other.Logging) return false;
    if (Debugging != other.Debugging) return false;
    if (Paused != other.Paused) return false;
    if (Disabled != other.Disabled) return false;
    if(!notes_.Equals(other.notes_)) return false;
    if (Script != other.Script) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (PosX != 0) hash ^= PosX.GetHashCode();
    if (PosY != 0) hash ^= PosY.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Library.Length != 0) hash ^= Library.GetHashCode();
    if (Method.Length != 0) hash ^= Method.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    hash ^= inports_.GetHashCode();
    hash ^= outports_.GetHashCode();
    hash ^= props_.GetHashCode();
    if (Logging != false) hash ^= Logging.GetHashCode();
    if (Debugging != false) hash ^= Debugging.GetHashCode();
    if (Paused != false) hash ^= Paused.GetHashCode();
    if (Disabled != false) hash ^= Disabled.GetHashCode();
    hash ^= notes_.GetHashCode();
    if (Script.Length != 0) hash ^= Script.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Type);
    }
    if (PosX != 0) {
      output.WriteRawTag(24);
      output.WriteSInt32(PosX);
    }
    if (PosY != 0) {
      output.WriteRawTag(32);
      output.WriteSInt32(PosY);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Title);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Icon);
    }
    if (Library.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Library);
    }
    if (Method.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Method);
    }
    if (Delay != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Delay);
    }
    inports_.WriteTo(output, _repeated_inports_codec);
    outports_.WriteTo(output, _repeated_outports_codec);
    props_.WriteTo(output, _repeated_props_codec);
    if (Logging != false) {
      output.WriteRawTag(128, 1);
      output.WriteBool(Logging);
    }
    if (Debugging != false) {
      output.WriteRawTag(136, 1);
      output.WriteBool(Debugging);
    }
    if (Paused != false) {
      output.WriteRawTag(144, 1);
      output.WriteBool(Paused);
    }
    if (Disabled != false) {
      output.WriteRawTag(152, 1);
      output.WriteBool(Disabled);
    }
    notes_.WriteTo(output, _repeated_notes_codec);
    if (Script.Length != 0) {
      output.WriteRawTag(170, 1);
      output.WriteString(Script);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (PosX != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PosX);
    }
    if (PosY != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PosY);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Library.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Library);
    }
    if (Method.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
    }
    if (Delay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
    }
    size += inports_.CalculateSize(_repeated_inports_codec);
    size += outports_.CalculateSize(_repeated_outports_codec);
    size += props_.CalculateSize(_repeated_props_codec);
    if (Logging != false) {
      size += 2 + 1;
    }
    if (Debugging != false) {
      size += 2 + 1;
    }
    if (Paused != false) {
      size += 2 + 1;
    }
    if (Disabled != false) {
      size += 2 + 1;
    }
    size += notes_.CalculateSize(_repeated_notes_codec);
    if (Script.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Script);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartNode other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.PosX != 0) {
      PosX = other.PosX;
    }
    if (other.PosY != 0) {
      PosY = other.PosY;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Library.Length != 0) {
      Library = other.Library;
    }
    if (other.Method.Length != 0) {
      Method = other.Method;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
    inports_.Add(other.inports_);
    outports_.Add(other.outports_);
    props_.Add(other.props_);
    if (other.Logging != false) {
      Logging = other.Logging;
    }
    if (other.Debugging != false) {
      Debugging = other.Debugging;
    }
    if (other.Paused != false) {
      Paused = other.Paused;
    }
    if (other.Disabled != false) {
      Disabled = other.Disabled;
    }
    notes_.Add(other.notes_);
    if (other.Script.Length != 0) {
      Script = other.Script;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Type = input.ReadString();
          break;
        }
        case 24: {
          PosX = input.ReadSInt32();
          break;
        }
        case 32: {
          PosY = input.ReadSInt32();
          break;
        }
        case 42: {
          Title = input.ReadString();
          break;
        }
        case 50: {
          Icon = input.ReadString();
          break;
        }
        case 58: {
          Library = input.ReadString();
          break;
        }
        case 66: {
          Method = input.ReadString();
          break;
        }
        case 72: {
          Delay = input.ReadInt32();
          break;
        }
        case 82: {
          inports_.AddEntriesFrom(input, _repeated_inports_codec);
          break;
        }
        case 90: {
          outports_.AddEntriesFrom(input, _repeated_outports_codec);
          break;
        }
        case 98: {
          props_.AddEntriesFrom(input, _repeated_props_codec);
          break;
        }
        case 128: {
          Logging = input.ReadBool();
          break;
        }
        case 136: {
          Debugging = input.ReadBool();
          break;
        }
        case 144: {
          Paused = input.ReadBool();
          break;
        }
        case 152: {
          Disabled = input.ReadBool();
          break;
        }
        case 162: {
          notes_.AddEntriesFrom(input, _repeated_notes_codec);
          break;
        }
        case 170: {
          Script = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartRegion : pb::IMessage<TideChartRegion> {
  private static readonly pb::MessageParser<TideChartRegion> _parser = new pb::MessageParser<TideChartRegion>(() => new TideChartRegion());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartRegion> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartRegion() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartRegion(TideChartRegion other) : this() {
    name_ = other.name_;
    title_ = other.title_;
    nodes_ = other.nodes_.Clone();
    group_ = other.group_;
    scope_ = other.scope_;
    props_ = other.props_.Clone();
    logging_ = other.logging_;
    debugging_ = other.debugging_;
    paused_ = other.paused_;
    disabled_ = other.disabled_;
    notes_ = other.notes_.Clone();
    script_ = other.script_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartRegion Clone() {
    return new TideChartRegion(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  /// unique (graph scope) name for this region
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 2;
  private string title_ = "";
  /// <summary>
  /// a descriptive label for the group
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nodes" field.</summary>
  public const int NodesFieldNumber = 3;
  private static readonly pb::FieldCodec<string> _repeated_nodes_codec
      = pb::FieldCodec.ForString(26);
  private readonly pbc::RepeatedField<string> nodes_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// a collection of nodes contained within this region (nodes can be in multiple regions)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Nodes {
    get { return nodes_; }
  }

  /// <summary>Field number for the "group" field.</summary>
  public const int GroupFieldNumber = 4;
  private int group_;
  /// <summary>
  /// regions can be associated into groups (usually just determines color)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Group {
    get { return group_; }
    set {
      group_ = value;
    }
  }

  /// <summary>Field number for the "scope" field.</summary>
  public const int ScopeFieldNumber = 5;
  private string scope_ = "";
  /// <summary>
  /// an event scope used to limit (or exclude) events to route to only nodes in the region
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Scope {
    get { return scope_; }
    set {
      scope_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 6;
  private static readonly pb::FieldCodec<global::TideChartProperty> _repeated_props_codec
      = pb::FieldCodec.ForMessage(50, global::TideChartProperty.Parser);
  private readonly pbc::RepeatedField<global::TideChartProperty> props_ = new pbc::RepeatedField<global::TideChartProperty>();
  /// <summary>
  /// a set of properties shared by all nodes in the region
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartProperty> Props {
    get { return props_; }
  }

  /// <summary>Field number for the "logging" field.</summary>
  public const int LoggingFieldNumber = 16;
  private bool logging_;
  /// <summary>
  /// flag indicating this region will trace messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Logging {
    get { return logging_; }
    set {
      logging_ = value;
    }
  }

  /// <summary>Field number for the "debugging" field.</summary>
  public const int DebuggingFieldNumber = 17;
  private bool debugging_;
  /// <summary>
  /// flag indicating this region is a debug breakpoint
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Debugging {
    get { return debugging_; }
    set {
      debugging_ = value;
    }
  }

  /// <summary>Field number for the "paused" field.</summary>
  public const int PausedFieldNumber = 18;
  private bool paused_;
  /// <summary>
  /// flag indicating this region is paused (messages are queued)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Paused {
    get { return paused_; }
    set {
      paused_ = value;
    }
  }

  /// <summary>Field number for the "disabled" field.</summary>
  public const int DisabledFieldNumber = 19;
  private bool disabled_;
  /// <summary>
  /// flag indicating this region is disabled (messages are dropped)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Disabled {
    get { return disabled_; }
    set {
      disabled_ = value;
    }
  }

  /// <summary>Field number for the "notes" field.</summary>
  public const int NotesFieldNumber = 20;
  private static readonly pb::FieldCodec<global::TideChartNote> _repeated_notes_codec
      = pb::FieldCodec.ForMessage(162, global::TideChartNote.Parser);
  private readonly pbc::RepeatedField<global::TideChartNote> notes_ = new pbc::RepeatedField<global::TideChartNote>();
  /// <summary>
  /// comments associated with this region
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartNote> Notes {
    get { return notes_; }
  }

  /// <summary>Field number for the "script" field.</summary>
  public const int ScriptFieldNumber = 21;
  private string script_ = "";
  /// <summary>
  /// a user script of custom code for the region (interacting with non-message based threads, scoped exception handling)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Script {
    get { return script_; }
    set {
      script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartRegion);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartRegion other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Title != other.Title) return false;
    if(!nodes_.Equals(other.nodes_)) return false;
    if (Group != other.Group) return false;
    if (Scope != other.Scope) return false;
    if(!props_.Equals(other.props_)) return false;
    if (Logging != other.Logging) return false;
    if (Debugging != other.Debugging) return false;
    if (Paused != other.Paused) return false;
    if (Disabled != other.Disabled) return false;
    if(!notes_.Equals(other.notes_)) return false;
    if (Script != other.Script) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    hash ^= nodes_.GetHashCode();
    if (Group != 0) hash ^= Group.GetHashCode();
    if (Scope.Length != 0) hash ^= Scope.GetHashCode();
    hash ^= props_.GetHashCode();
    if (Logging != false) hash ^= Logging.GetHashCode();
    if (Debugging != false) hash ^= Debugging.GetHashCode();
    if (Paused != false) hash ^= Paused.GetHashCode();
    if (Disabled != false) hash ^= Disabled.GetHashCode();
    hash ^= notes_.GetHashCode();
    if (Script.Length != 0) hash ^= Script.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Title);
    }
    nodes_.WriteTo(output, _repeated_nodes_codec);
    if (Group != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Group);
    }
    if (Scope.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Scope);
    }
    props_.WriteTo(output, _repeated_props_codec);
    if (Logging != false) {
      output.WriteRawTag(128, 1);
      output.WriteBool(Logging);
    }
    if (Debugging != false) {
      output.WriteRawTag(136, 1);
      output.WriteBool(Debugging);
    }
    if (Paused != false) {
      output.WriteRawTag(144, 1);
      output.WriteBool(Paused);
    }
    if (Disabled != false) {
      output.WriteRawTag(152, 1);
      output.WriteBool(Disabled);
    }
    notes_.WriteTo(output, _repeated_notes_codec);
    if (Script.Length != 0) {
      output.WriteRawTag(170, 1);
      output.WriteString(Script);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    size += nodes_.CalculateSize(_repeated_nodes_codec);
    if (Group != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Group);
    }
    if (Scope.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Scope);
    }
    size += props_.CalculateSize(_repeated_props_codec);
    if (Logging != false) {
      size += 2 + 1;
    }
    if (Debugging != false) {
      size += 2 + 1;
    }
    if (Paused != false) {
      size += 2 + 1;
    }
    if (Disabled != false) {
      size += 2 + 1;
    }
    size += notes_.CalculateSize(_repeated_notes_codec);
    if (Script.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Script);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartRegion other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    nodes_.Add(other.nodes_);
    if (other.Group != 0) {
      Group = other.Group;
    }
    if (other.Scope.Length != 0) {
      Scope = other.Scope;
    }
    props_.Add(other.props_);
    if (other.Logging != false) {
      Logging = other.Logging;
    }
    if (other.Debugging != false) {
      Debugging = other.Debugging;
    }
    if (other.Paused != false) {
      Paused = other.Paused;
    }
    if (other.Disabled != false) {
      Disabled = other.Disabled;
    }
    notes_.Add(other.notes_);
    if (other.Script.Length != 0) {
      Script = other.Script;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Title = input.ReadString();
          break;
        }
        case 26: {
          nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
          break;
        }
        case 32: {
          Group = input.ReadInt32();
          break;
        }
        case 42: {
          Scope = input.ReadString();
          break;
        }
        case 50: {
          props_.AddEntriesFrom(input, _repeated_props_codec);
          break;
        }
        case 128: {
          Logging = input.ReadBool();
          break;
        }
        case 136: {
          Debugging = input.ReadBool();
          break;
        }
        case 144: {
          Paused = input.ReadBool();
          break;
        }
        case 152: {
          Disabled = input.ReadBool();
          break;
        }
        case 162: {
          notes_.AddEntriesFrom(input, _repeated_notes_codec);
          break;
        }
        case 170: {
          Script = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartGraph : pb::IMessage<TideChartGraph> {
  private static readonly pb::MessageParser<TideChartGraph> _parser = new pb::MessageParser<TideChartGraph>(() => new TideChartGraph());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartGraph> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartGraph() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartGraph(TideChartGraph other) : this() {
    id_ = other.id_;
    type_ = other.type_;
    name_ = other.name_;
    title_ = other.title_;
    version_ = other.version_;
    source_ = other.source_;
    nodes_ = other.nodes_.Clone();
    links_ = other.links_.Clone();
    regions_ = other.regions_.Clone();
    comments_ = other.comments_.Clone();
    widgets_ = other.widgets_.Clone();
    props_ = other.props_.Clone();
    history_ = other.history_.Clone();
    logging_ = other.logging_;
    debugging_ = other.debugging_;
    paused_ = other.paused_;
    disabled_ = other.disabled_;
    notes_ = other.notes_.Clone();
    script_ = other.script_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartGraph Clone() {
    return new TideChartGraph(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// unique id (global scope) for the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private string type_ = "";
  /// <summary>
  /// graph type: behavior, opmode, internal       
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  /// <summary>
  /// short name for the graph (unique chart scope)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 4;
  private string title_ = "";
  /// <summary>
  /// description name for the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 5;
  private string version_ = "";
  /// <summary>
  /// version of last command applied to the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Version {
    get { return version_; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "source" field.</summary>
  public const int SourceFieldNumber = 6;
  private string source_ = "";
  /// <summary>
  /// version the graph at the last committed chart version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Source {
    get { return source_; }
    set {
      source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nodes" field.</summary>
  public const int NodesFieldNumber = 7;
  private static readonly pb::FieldCodec<global::TideChartNode> _repeated_nodes_codec
      = pb::FieldCodec.ForMessage(58, global::TideChartNode.Parser);
  private readonly pbc::RepeatedField<global::TideChartNode> nodes_ = new pbc::RepeatedField<global::TideChartNode>();
  /// <summary>
  /// nodes in the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartNode> Nodes {
    get { return nodes_; }
  }

  /// <summary>Field number for the "links" field.</summary>
  public const int LinksFieldNumber = 8;
  private static readonly pb::FieldCodec<global::TideChartLink> _repeated_links_codec
      = pb::FieldCodec.ForMessage(66, global::TideChartLink.Parser);
  private readonly pbc::RepeatedField<global::TideChartLink> links_ = new pbc::RepeatedField<global::TideChartLink>();
  /// <summary>
  /// links in the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartLink> Links {
    get { return links_; }
  }

  /// <summary>Field number for the "regions" field.</summary>
  public const int RegionsFieldNumber = 9;
  private static readonly pb::FieldCodec<global::TideChartRegion> _repeated_regions_codec
      = pb::FieldCodec.ForMessage(74, global::TideChartRegion.Parser);
  private readonly pbc::RepeatedField<global::TideChartRegion> regions_ = new pbc::RepeatedField<global::TideChartRegion>();
  /// <summary>
  /// regions in the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartRegion> Regions {
    get { return regions_; }
  }

  /// <summary>Field number for the "comments" field.</summary>
  public const int CommentsFieldNumber = 10;
  private static readonly pb::FieldCodec<global::TideChartCommentBox> _repeated_comments_codec
      = pb::FieldCodec.ForMessage(82, global::TideChartCommentBox.Parser);
  private readonly pbc::RepeatedField<global::TideChartCommentBox> comments_ = new pbc::RepeatedField<global::TideChartCommentBox>();
  /// <summary>
  /// comment boxes on the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartCommentBox> Comments {
    get { return comments_; }
  }

  /// <summary>Field number for the "widgets" field.</summary>
  public const int WidgetsFieldNumber = 11;
  private static readonly pb::FieldCodec<global::TideChartWidget> _repeated_widgets_codec
      = pb::FieldCodec.ForMessage(90, global::TideChartWidget.Parser);
  private readonly pbc::RepeatedField<global::TideChartWidget> widgets_ = new pbc::RepeatedField<global::TideChartWidget>();
  /// <summary>
  /// interactive widgets for the graph (not part of the data flow graph: test instrudements, data visualization, debugging, etc.)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartWidget> Widgets {
    get { return widgets_; }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 12;
  private static readonly pb::FieldCodec<global::TideChartProperty> _repeated_props_codec
      = pb::FieldCodec.ForMessage(98, global::TideChartProperty.Parser);
  private readonly pbc::RepeatedField<global::TideChartProperty> props_ = new pbc::RepeatedField<global::TideChartProperty>();
  /// <summary>
  /// a set of properties shared by all nodes on the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartProperty> Props {
    get { return props_; }
  }

  /// <summary>Field number for the "history" field.</summary>
  public const int HistoryFieldNumber = 13;
  private static readonly pb::FieldCodec<global::TideChartCommand> _repeated_history_codec
      = pb::FieldCodec.ForMessage(106, global::TideChartCommand.Parser);
  private readonly pbc::RepeatedField<global::TideChartCommand> history_ = new pbc::RepeatedField<global::TideChartCommand>();
  /// <summary>
  /// all the changes made from source version to current version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartCommand> History {
    get { return history_; }
  }

  /// <summary>Field number for the "logging" field.</summary>
  public const int LoggingFieldNumber = 16;
  private bool logging_;
  /// <summary>
  /// flag indicating this graph will trace messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Logging {
    get { return logging_; }
    set {
      logging_ = value;
    }
  }

  /// <summary>Field number for the "debugging" field.</summary>
  public const int DebuggingFieldNumber = 17;
  private bool debugging_;
  /// <summary>
  /// flag indicating this graph is a debug breakpoint
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Debugging {
    get { return debugging_; }
    set {
      debugging_ = value;
    }
  }

  /// <summary>Field number for the "paused" field.</summary>
  public const int PausedFieldNumber = 18;
  private bool paused_;
  /// <summary>
  /// flag indicating this graph is paused (messages are queued)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Paused {
    get { return paused_; }
    set {
      paused_ = value;
    }
  }

  /// <summary>Field number for the "disabled" field.</summary>
  public const int DisabledFieldNumber = 19;
  private bool disabled_;
  /// <summary>
  /// flag indicating this graph is disabled (messages are dropped)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Disabled {
    get { return disabled_; }
    set {
      disabled_ = value;
    }
  }

  /// <summary>Field number for the "notes" field.</summary>
  public const int NotesFieldNumber = 20;
  private static readonly pb::FieldCodec<global::TideChartNote> _repeated_notes_codec
      = pb::FieldCodec.ForMessage(162, global::TideChartNote.Parser);
  private readonly pbc::RepeatedField<global::TideChartNote> notes_ = new pbc::RepeatedField<global::TideChartNote>();
  /// <summary>
  /// comments associated with this graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartNote> Notes {
    get { return notes_; }
  }

  /// <summary>Field number for the "script" field.</summary>
  public const int ScriptFieldNumber = 21;
  private string script_ = "";
  /// <summary>
  /// a user script of custom code for the graph (non-message based thread initialization, global exception handling)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Script {
    get { return script_; }
    set {
      script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartGraph);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartGraph other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Type != other.Type) return false;
    if (Name != other.Name) return false;
    if (Title != other.Title) return false;
    if (Version != other.Version) return false;
    if (Source != other.Source) return false;
    if(!nodes_.Equals(other.nodes_)) return false;
    if(!links_.Equals(other.links_)) return false;
    if(!regions_.Equals(other.regions_)) return false;
    if(!comments_.Equals(other.comments_)) return false;
    if(!widgets_.Equals(other.widgets_)) return false;
    if(!props_.Equals(other.props_)) return false;
    if(!history_.Equals(other.history_)) return false;
    if (Logging != other.Logging) return false;
    if (Debugging != other.Debugging) return false;
    if (Paused != other.Paused) return false;
    if (Disabled != other.Disabled) return false;
    if(!notes_.Equals(other.notes_)) return false;
    if (Script != other.Script) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (Version.Length != 0) hash ^= Version.GetHashCode();
    if (Source.Length != 0) hash ^= Source.GetHashCode();
    hash ^= nodes_.GetHashCode();
    hash ^= links_.GetHashCode();
    hash ^= regions_.GetHashCode();
    hash ^= comments_.GetHashCode();
    hash ^= widgets_.GetHashCode();
    hash ^= props_.GetHashCode();
    hash ^= history_.GetHashCode();
    if (Logging != false) hash ^= Logging.GetHashCode();
    if (Debugging != false) hash ^= Debugging.GetHashCode();
    if (Paused != false) hash ^= Paused.GetHashCode();
    if (Disabled != false) hash ^= Disabled.GetHashCode();
    hash ^= notes_.GetHashCode();
    if (Script.Length != 0) hash ^= Script.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Type);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Title);
    }
    if (Version.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Version);
    }
    if (Source.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Source);
    }
    nodes_.WriteTo(output, _repeated_nodes_codec);
    links_.WriteTo(output, _repeated_links_codec);
    regions_.WriteTo(output, _repeated_regions_codec);
    comments_.WriteTo(output, _repeated_comments_codec);
    widgets_.WriteTo(output, _repeated_widgets_codec);
    props_.WriteTo(output, _repeated_props_codec);
    history_.WriteTo(output, _repeated_history_codec);
    if (Logging != false) {
      output.WriteRawTag(128, 1);
      output.WriteBool(Logging);
    }
    if (Debugging != false) {
      output.WriteRawTag(136, 1);
      output.WriteBool(Debugging);
    }
    if (Paused != false) {
      output.WriteRawTag(144, 1);
      output.WriteBool(Paused);
    }
    if (Disabled != false) {
      output.WriteRawTag(152, 1);
      output.WriteBool(Disabled);
    }
    notes_.WriteTo(output, _repeated_notes_codec);
    if (Script.Length != 0) {
      output.WriteRawTag(170, 1);
      output.WriteString(Script);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (Version.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (Source.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
    }
    size += nodes_.CalculateSize(_repeated_nodes_codec);
    size += links_.CalculateSize(_repeated_links_codec);
    size += regions_.CalculateSize(_repeated_regions_codec);
    size += comments_.CalculateSize(_repeated_comments_codec);
    size += widgets_.CalculateSize(_repeated_widgets_codec);
    size += props_.CalculateSize(_repeated_props_codec);
    size += history_.CalculateSize(_repeated_history_codec);
    if (Logging != false) {
      size += 2 + 1;
    }
    if (Debugging != false) {
      size += 2 + 1;
    }
    if (Paused != false) {
      size += 2 + 1;
    }
    if (Disabled != false) {
      size += 2 + 1;
    }
    size += notes_.CalculateSize(_repeated_notes_codec);
    if (Script.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Script);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartGraph other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    if (other.Version.Length != 0) {
      Version = other.Version;
    }
    if (other.Source.Length != 0) {
      Source = other.Source;
    }
    nodes_.Add(other.nodes_);
    links_.Add(other.links_);
    regions_.Add(other.regions_);
    comments_.Add(other.comments_);
    widgets_.Add(other.widgets_);
    props_.Add(other.props_);
    history_.Add(other.history_);
    if (other.Logging != false) {
      Logging = other.Logging;
    }
    if (other.Debugging != false) {
      Debugging = other.Debugging;
    }
    if (other.Paused != false) {
      Paused = other.Paused;
    }
    if (other.Disabled != false) {
      Disabled = other.Disabled;
    }
    notes_.Add(other.notes_);
    if (other.Script.Length != 0) {
      Script = other.Script;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Type = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          Title = input.ReadString();
          break;
        }
        case 42: {
          Version = input.ReadString();
          break;
        }
        case 50: {
          Source = input.ReadString();
          break;
        }
        case 58: {
          nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
          break;
        }
        case 66: {
          links_.AddEntriesFrom(input, _repeated_links_codec);
          break;
        }
        case 74: {
          regions_.AddEntriesFrom(input, _repeated_regions_codec);
          break;
        }
        case 82: {
          comments_.AddEntriesFrom(input, _repeated_comments_codec);
          break;
        }
        case 90: {
          widgets_.AddEntriesFrom(input, _repeated_widgets_codec);
          break;
        }
        case 98: {
          props_.AddEntriesFrom(input, _repeated_props_codec);
          break;
        }
        case 106: {
          history_.AddEntriesFrom(input, _repeated_history_codec);
          break;
        }
        case 128: {
          Logging = input.ReadBool();
          break;
        }
        case 136: {
          Debugging = input.ReadBool();
          break;
        }
        case 144: {
          Paused = input.ReadBool();
          break;
        }
        case 152: {
          Disabled = input.ReadBool();
          break;
        }
        case 162: {
          notes_.AddEntriesFrom(input, _repeated_notes_codec);
          break;
        }
        case 170: {
          Script = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartCommand : pb::IMessage<TideChartCommand> {
  private static readonly pb::MessageParser<TideChartCommand> _parser = new pb::MessageParser<TideChartCommand>(() => new TideChartCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartCommand(TideChartCommand other) : this() {
    version_ = other.version_;
    target_ = other.target_;
    switch (other.CommandCase) {
      case CommandOneofCase.Group:
        Group = other.Group.Clone();
        break;
      case CommandOneofCase.Move:
        Move = other.Move.Clone();
        break;
      case CommandOneofCase.Comment:
        Comment = other.Comment.Clone();
        break;
      case CommandOneofCase.Widget:
        Widget = other.Widget.Clone();
        break;
      case CommandOneofCase.Port:
        Port = other.Port.Clone();
        break;
      case CommandOneofCase.Link:
        Link = other.Link.Clone();
        break;
      case CommandOneofCase.Node:
        Node = other.Node.Clone();
        break;
      case CommandOneofCase.Region:
        Region = other.Region.Clone();
        break;
      case CommandOneofCase.Graph:
        Graph = other.Graph.Clone();
        break;
      case CommandOneofCase.Props:
        Props = other.Props.Clone();
        break;
      case CommandOneofCase.Note:
        Note = other.Note.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartCommand Clone() {
    return new TideChartCommand(this);
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 1;
  private string version_ = "";
  /// <summary>
  /// unique id for the change
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Version {
    get { return version_; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 2;
  private string target_ = "";
  /// <summary>
  /// graph id being targetd by the the change (used by chart level streams: working, remote)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Target {
    get { return target_; }
    set {
      target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "group" field.</summary>
  public const int GroupFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartGroupCommand Group {
    get { return commandCase_ == CommandOneofCase.Group ? (global::TideChartGroupCommand) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Group;
    }
  }

  /// <summary>Field number for the "move" field.</summary>
  public const int MoveFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartMoveCommand Move {
    get { return commandCase_ == CommandOneofCase.Move ? (global::TideChartMoveCommand) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Move;
    }
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartCommentBoxCommand Comment {
    get { return commandCase_ == CommandOneofCase.Comment ? (global::TideChartCommentBoxCommand) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Comment;
    }
  }

  /// <summary>Field number for the "widget" field.</summary>
  public const int WidgetFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartWidgetCommand Widget {
    get { return commandCase_ == CommandOneofCase.Widget ? (global::TideChartWidgetCommand) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Widget;
    }
  }

  /// <summary>Field number for the "port" field.</summary>
  public const int PortFieldNumber = 7;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartPortCommand Port {
    get { return commandCase_ == CommandOneofCase.Port ? (global::TideChartPortCommand) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Port;
    }
  }

  /// <summary>Field number for the "link" field.</summary>
  public const int LinkFieldNumber = 8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartLinkCommand Link {
    get { return commandCase_ == CommandOneofCase.Link ? (global::TideChartLinkCommand) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Link;
    }
  }

  /// <summary>Field number for the "node" field.</summary>
  public const int NodeFieldNumber = 9;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartNodeCommand Node {
    get { return commandCase_ == CommandOneofCase.Node ? (global::TideChartNodeCommand) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Node;
    }
  }

  /// <summary>Field number for the "region" field.</summary>
  public const int RegionFieldNumber = 10;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartRegionCommand Region {
    get { return commandCase_ == CommandOneofCase.Region ? (global::TideChartRegionCommand) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Region;
    }
  }

  /// <summary>Field number for the "graph" field.</summary>
  public const int GraphFieldNumber = 11;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartGraphCommand Graph {
    get { return commandCase_ == CommandOneofCase.Graph ? (global::TideChartGraphCommand) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Graph;
    }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 12;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartPropertyCommand Props {
    get { return commandCase_ == CommandOneofCase.Props ? (global::TideChartPropertyCommand) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Props;
    }
  }

  /// <summary>Field number for the "note" field.</summary>
  public const int NoteFieldNumber = 13;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartNoteCommand Note {
    get { return commandCase_ == CommandOneofCase.Note ? (global::TideChartNoteCommand) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Note;
    }
  }

  private object command_;
  /// <summary>Enum of possible cases for the "command" oneof.</summary>
  public enum CommandOneofCase {
    None = 0,
    Group = 3,
    Move = 4,
    Comment = 5,
    Widget = 6,
    Port = 7,
    Link = 8,
    Node = 9,
    Region = 10,
    Graph = 11,
    Props = 12,
    Note = 13,
  }
  private CommandOneofCase commandCase_ = CommandOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommandOneofCase CommandCase {
    get { return commandCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCommand() {
    commandCase_ = CommandOneofCase.None;
    command_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Version != other.Version) return false;
    if (Target != other.Target) return false;
    if (!object.Equals(Group, other.Group)) return false;
    if (!object.Equals(Move, other.Move)) return false;
    if (!object.Equals(Comment, other.Comment)) return false;
    if (!object.Equals(Widget, other.Widget)) return false;
    if (!object.Equals(Port, other.Port)) return false;
    if (!object.Equals(Link, other.Link)) return false;
    if (!object.Equals(Node, other.Node)) return false;
    if (!object.Equals(Region, other.Region)) return false;
    if (!object.Equals(Graph, other.Graph)) return false;
    if (!object.Equals(Props, other.Props)) return false;
    if (!object.Equals(Note, other.Note)) return false;
    if (CommandCase != other.CommandCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Version.Length != 0) hash ^= Version.GetHashCode();
    if (Target.Length != 0) hash ^= Target.GetHashCode();
    if (commandCase_ == CommandOneofCase.Group) hash ^= Group.GetHashCode();
    if (commandCase_ == CommandOneofCase.Move) hash ^= Move.GetHashCode();
    if (commandCase_ == CommandOneofCase.Comment) hash ^= Comment.GetHashCode();
    if (commandCase_ == CommandOneofCase.Widget) hash ^= Widget.GetHashCode();
    if (commandCase_ == CommandOneofCase.Port) hash ^= Port.GetHashCode();
    if (commandCase_ == CommandOneofCase.Link) hash ^= Link.GetHashCode();
    if (commandCase_ == CommandOneofCase.Node) hash ^= Node.GetHashCode();
    if (commandCase_ == CommandOneofCase.Region) hash ^= Region.GetHashCode();
    if (commandCase_ == CommandOneofCase.Graph) hash ^= Graph.GetHashCode();
    if (commandCase_ == CommandOneofCase.Props) hash ^= Props.GetHashCode();
    if (commandCase_ == CommandOneofCase.Note) hash ^= Note.GetHashCode();
    hash ^= (int) commandCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Version.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Version);
    }
    if (Target.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Target);
    }
    if (commandCase_ == CommandOneofCase.Group) {
      output.WriteRawTag(26);
      output.WriteMessage(Group);
    }
    if (commandCase_ == CommandOneofCase.Move) {
      output.WriteRawTag(34);
      output.WriteMessage(Move);
    }
    if (commandCase_ == CommandOneofCase.Comment) {
      output.WriteRawTag(42);
      output.WriteMessage(Comment);
    }
    if (commandCase_ == CommandOneofCase.Widget) {
      output.WriteRawTag(50);
      output.WriteMessage(Widget);
    }
    if (commandCase_ == CommandOneofCase.Port) {
      output.WriteRawTag(58);
      output.WriteMessage(Port);
    }
    if (commandCase_ == CommandOneofCase.Link) {
      output.WriteRawTag(66);
      output.WriteMessage(Link);
    }
    if (commandCase_ == CommandOneofCase.Node) {
      output.WriteRawTag(74);
      output.WriteMessage(Node);
    }
    if (commandCase_ == CommandOneofCase.Region) {
      output.WriteRawTag(82);
      output.WriteMessage(Region);
    }
    if (commandCase_ == CommandOneofCase.Graph) {
      output.WriteRawTag(90);
      output.WriteMessage(Graph);
    }
    if (commandCase_ == CommandOneofCase.Props) {
      output.WriteRawTag(98);
      output.WriteMessage(Props);
    }
    if (commandCase_ == CommandOneofCase.Note) {
      output.WriteRawTag(106);
      output.WriteMessage(Note);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Version.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (Target.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
    }
    if (commandCase_ == CommandOneofCase.Group) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
    }
    if (commandCase_ == CommandOneofCase.Move) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Move);
    }
    if (commandCase_ == CommandOneofCase.Comment) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Comment);
    }
    if (commandCase_ == CommandOneofCase.Widget) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Widget);
    }
    if (commandCase_ == CommandOneofCase.Port) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Port);
    }
    if (commandCase_ == CommandOneofCase.Link) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Link);
    }
    if (commandCase_ == CommandOneofCase.Node) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
    }
    if (commandCase_ == CommandOneofCase.Region) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Region);
    }
    if (commandCase_ == CommandOneofCase.Graph) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Graph);
    }
    if (commandCase_ == CommandOneofCase.Props) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Props);
    }
    if (commandCase_ == CommandOneofCase.Note) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartCommand other) {
    if (other == null) {
      return;
    }
    if (other.Version.Length != 0) {
      Version = other.Version;
    }
    if (other.Target.Length != 0) {
      Target = other.Target;
    }
    switch (other.CommandCase) {
      case CommandOneofCase.Group:
        if (Group == null) {
          Group = new global::TideChartGroupCommand();
        }
        Group.MergeFrom(other.Group);
        break;
      case CommandOneofCase.Move:
        if (Move == null) {
          Move = new global::TideChartMoveCommand();
        }
        Move.MergeFrom(other.Move);
        break;
      case CommandOneofCase.Comment:
        if (Comment == null) {
          Comment = new global::TideChartCommentBoxCommand();
        }
        Comment.MergeFrom(other.Comment);
        break;
      case CommandOneofCase.Widget:
        if (Widget == null) {
          Widget = new global::TideChartWidgetCommand();
        }
        Widget.MergeFrom(other.Widget);
        break;
      case CommandOneofCase.Port:
        if (Port == null) {
          Port = new global::TideChartPortCommand();
        }
        Port.MergeFrom(other.Port);
        break;
      case CommandOneofCase.Link:
        if (Link == null) {
          Link = new global::TideChartLinkCommand();
        }
        Link.MergeFrom(other.Link);
        break;
      case CommandOneofCase.Node:
        if (Node == null) {
          Node = new global::TideChartNodeCommand();
        }
        Node.MergeFrom(other.Node);
        break;
      case CommandOneofCase.Region:
        if (Region == null) {
          Region = new global::TideChartRegionCommand();
        }
        Region.MergeFrom(other.Region);
        break;
      case CommandOneofCase.Graph:
        if (Graph == null) {
          Graph = new global::TideChartGraphCommand();
        }
        Graph.MergeFrom(other.Graph);
        break;
      case CommandOneofCase.Props:
        if (Props == null) {
          Props = new global::TideChartPropertyCommand();
        }
        Props.MergeFrom(other.Props);
        break;
      case CommandOneofCase.Note:
        if (Note == null) {
          Note = new global::TideChartNoteCommand();
        }
        Note.MergeFrom(other.Note);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Version = input.ReadString();
          break;
        }
        case 18: {
          Target = input.ReadString();
          break;
        }
        case 26: {
          global::TideChartGroupCommand subBuilder = new global::TideChartGroupCommand();
          if (commandCase_ == CommandOneofCase.Group) {
            subBuilder.MergeFrom(Group);
          }
          input.ReadMessage(subBuilder);
          Group = subBuilder;
          break;
        }
        case 34: {
          global::TideChartMoveCommand subBuilder = new global::TideChartMoveCommand();
          if (commandCase_ == CommandOneofCase.Move) {
            subBuilder.MergeFrom(Move);
          }
          input.ReadMessage(subBuilder);
          Move = subBuilder;
          break;
        }
        case 42: {
          global::TideChartCommentBoxCommand subBuilder = new global::TideChartCommentBoxCommand();
          if (commandCase_ == CommandOneofCase.Comment) {
            subBuilder.MergeFrom(Comment);
          }
          input.ReadMessage(subBuilder);
          Comment = subBuilder;
          break;
        }
        case 50: {
          global::TideChartWidgetCommand subBuilder = new global::TideChartWidgetCommand();
          if (commandCase_ == CommandOneofCase.Widget) {
            subBuilder.MergeFrom(Widget);
          }
          input.ReadMessage(subBuilder);
          Widget = subBuilder;
          break;
        }
        case 58: {
          global::TideChartPortCommand subBuilder = new global::TideChartPortCommand();
          if (commandCase_ == CommandOneofCase.Port) {
            subBuilder.MergeFrom(Port);
          }
          input.ReadMessage(subBuilder);
          Port = subBuilder;
          break;
        }
        case 66: {
          global::TideChartLinkCommand subBuilder = new global::TideChartLinkCommand();
          if (commandCase_ == CommandOneofCase.Link) {
            subBuilder.MergeFrom(Link);
          }
          input.ReadMessage(subBuilder);
          Link = subBuilder;
          break;
        }
        case 74: {
          global::TideChartNodeCommand subBuilder = new global::TideChartNodeCommand();
          if (commandCase_ == CommandOneofCase.Node) {
            subBuilder.MergeFrom(Node);
          }
          input.ReadMessage(subBuilder);
          Node = subBuilder;
          break;
        }
        case 82: {
          global::TideChartRegionCommand subBuilder = new global::TideChartRegionCommand();
          if (commandCase_ == CommandOneofCase.Region) {
            subBuilder.MergeFrom(Region);
          }
          input.ReadMessage(subBuilder);
          Region = subBuilder;
          break;
        }
        case 90: {
          global::TideChartGraphCommand subBuilder = new global::TideChartGraphCommand();
          if (commandCase_ == CommandOneofCase.Graph) {
            subBuilder.MergeFrom(Graph);
          }
          input.ReadMessage(subBuilder);
          Graph = subBuilder;
          break;
        }
        case 98: {
          global::TideChartPropertyCommand subBuilder = new global::TideChartPropertyCommand();
          if (commandCase_ == CommandOneofCase.Props) {
            subBuilder.MergeFrom(Props);
          }
          input.ReadMessage(subBuilder);
          Props = subBuilder;
          break;
        }
        case 106: {
          global::TideChartNoteCommand subBuilder = new global::TideChartNoteCommand();
          if (commandCase_ == CommandOneofCase.Note) {
            subBuilder.MergeFrom(Note);
          }
          input.ReadMessage(subBuilder);
          Note = subBuilder;
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartGroupCommand : pb::IMessage<TideChartGroupCommand> {
  private static readonly pb::MessageParser<TideChartGroupCommand> _parser = new pb::MessageParser<TideChartGroupCommand>(() => new TideChartGroupCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartGroupCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartGroupCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartGroupCommand(TideChartGroupCommand other) : this() {
    cmds_ = other.cmds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartGroupCommand Clone() {
    return new TideChartGroupCommand(this);
  }

  /// <summary>Field number for the "cmds" field.</summary>
  public const int CmdsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TideChartCommand> _repeated_cmds_codec
      = pb::FieldCodec.ForMessage(10, global::TideChartCommand.Parser);
  private readonly pbc::RepeatedField<global::TideChartCommand> cmds_ = new pbc::RepeatedField<global::TideChartCommand>();
  /// <summary>
  /// a collection of updates that are applied atomically
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartCommand> Cmds {
    get { return cmds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartGroupCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartGroupCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cmds_.Equals(other.cmds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cmds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cmds_.WriteTo(output, _repeated_cmds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cmds_.CalculateSize(_repeated_cmds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartGroupCommand other) {
    if (other == null) {
      return;
    }
    cmds_.Add(other.cmds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          cmds_.AddEntriesFrom(input, _repeated_cmds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartMoveCommand : pb::IMessage<TideChartMoveCommand> {
  private static readonly pb::MessageParser<TideChartMoveCommand> _parser = new pb::MessageParser<TideChartMoveCommand>(() => new TideChartMoveCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartMoveCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartMoveCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartMoveCommand(TideChartMoveCommand other) : this() {
    node_ = other.node_;
    fromPosX_ = other.fromPosX_;
    fromPosY_ = other.fromPosY_;
    toPosX_ = other.toPosX_;
    toPosY_ = other.toPosY_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartMoveCommand Clone() {
    return new TideChartMoveCommand(this);
  }

  /// <summary>Field number for the "node" field.</summary>
  public const int NodeFieldNumber = 1;
  private string node_ = "";
  /// <summary>
  /// name of node being moved
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Node {
    get { return node_; }
    set {
      node_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fromPosX" field.</summary>
  public const int FromPosXFieldNumber = 2;
  private int fromPosX_;
  /// <summary>
  /// previous X position on the chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FromPosX {
    get { return fromPosX_; }
    set {
      fromPosX_ = value;
    }
  }

  /// <summary>Field number for the "fromPosY" field.</summary>
  public const int FromPosYFieldNumber = 3;
  private int fromPosY_;
  /// <summary>
  /// previous Y position on the chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FromPosY {
    get { return fromPosY_; }
    set {
      fromPosY_ = value;
    }
  }

  /// <summary>Field number for the "toPosX" field.</summary>
  public const int ToPosXFieldNumber = 4;
  private int toPosX_;
  /// <summary>
  /// next X position on the chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToPosX {
    get { return toPosX_; }
    set {
      toPosX_ = value;
    }
  }

  /// <summary>Field number for the "toPosY" field.</summary>
  public const int ToPosYFieldNumber = 5;
  private int toPosY_;
  /// <summary>
  /// next Y position on the chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToPosY {
    get { return toPosY_; }
    set {
      toPosY_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartMoveCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartMoveCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Node != other.Node) return false;
    if (FromPosX != other.FromPosX) return false;
    if (FromPosY != other.FromPosY) return false;
    if (ToPosX != other.ToPosX) return false;
    if (ToPosY != other.ToPosY) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Node.Length != 0) hash ^= Node.GetHashCode();
    if (FromPosX != 0) hash ^= FromPosX.GetHashCode();
    if (FromPosY != 0) hash ^= FromPosY.GetHashCode();
    if (ToPosX != 0) hash ^= ToPosX.GetHashCode();
    if (ToPosY != 0) hash ^= ToPosY.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Node.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Node);
    }
    if (FromPosX != 0) {
      output.WriteRawTag(16);
      output.WriteSInt32(FromPosX);
    }
    if (FromPosY != 0) {
      output.WriteRawTag(24);
      output.WriteSInt32(FromPosY);
    }
    if (ToPosX != 0) {
      output.WriteRawTag(32);
      output.WriteSInt32(ToPosX);
    }
    if (ToPosY != 0) {
      output.WriteRawTag(40);
      output.WriteSInt32(ToPosY);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Node.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Node);
    }
    if (FromPosX != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(FromPosX);
    }
    if (FromPosY != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(FromPosY);
    }
    if (ToPosX != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ToPosX);
    }
    if (ToPosY != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ToPosY);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartMoveCommand other) {
    if (other == null) {
      return;
    }
    if (other.Node.Length != 0) {
      Node = other.Node;
    }
    if (other.FromPosX != 0) {
      FromPosX = other.FromPosX;
    }
    if (other.FromPosY != 0) {
      FromPosY = other.FromPosY;
    }
    if (other.ToPosX != 0) {
      ToPosX = other.ToPosX;
    }
    if (other.ToPosY != 0) {
      ToPosY = other.ToPosY;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Node = input.ReadString();
          break;
        }
        case 16: {
          FromPosX = input.ReadSInt32();
          break;
        }
        case 24: {
          FromPosY = input.ReadSInt32();
          break;
        }
        case 32: {
          ToPosX = input.ReadSInt32();
          break;
        }
        case 40: {
          ToPosY = input.ReadSInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartCommentBoxCommand : pb::IMessage<TideChartCommentBoxCommand> {
  private static readonly pb::MessageParser<TideChartCommentBoxCommand> _parser = new pb::MessageParser<TideChartCommentBoxCommand>(() => new TideChartCommentBoxCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartCommentBoxCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartCommentBoxCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartCommentBoxCommand(TideChartCommentBoxCommand other) : this() {
    fromComment_ = other.fromComment_ != null ? other.fromComment_.Clone() : null;
    toComment_ = other.toComment_ != null ? other.toComment_.Clone() : null;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartCommentBoxCommand Clone() {
    return new TideChartCommentBoxCommand(this);
  }

  /// <summary>Field number for the "fromComment" field.</summary>
  public const int FromCommentFieldNumber = 1;
  private global::TideChartCommentBox fromComment_;
  /// <summary>
  /// previous version of the comment         
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartCommentBox FromComment {
    get { return fromComment_; }
    set {
      fromComment_ = value;
    }
  }

  /// <summary>Field number for the "toComment" field.</summary>
  public const int ToCommentFieldNumber = 2;
  private global::TideChartCommentBox toComment_;
  /// <summary>
  /// new version of the comment
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartCommentBox ToComment {
    get { return toComment_; }
    set {
      toComment_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private string type_ = "";
  /// <summary>
  /// type of update: add, update or remove
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartCommentBoxCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartCommentBoxCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(FromComment, other.FromComment)) return false;
    if (!object.Equals(ToComment, other.ToComment)) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (fromComment_ != null) hash ^= FromComment.GetHashCode();
    if (toComment_ != null) hash ^= ToComment.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (fromComment_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FromComment);
    }
    if (toComment_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ToComment);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (fromComment_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromComment);
    }
    if (toComment_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToComment);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartCommentBoxCommand other) {
    if (other == null) {
      return;
    }
    if (other.fromComment_ != null) {
      if (fromComment_ == null) {
        FromComment = new global::TideChartCommentBox();
      }
      FromComment.MergeFrom(other.FromComment);
    }
    if (other.toComment_ != null) {
      if (toComment_ == null) {
        ToComment = new global::TideChartCommentBox();
      }
      ToComment.MergeFrom(other.ToComment);
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (fromComment_ == null) {
            FromComment = new global::TideChartCommentBox();
          }
          input.ReadMessage(FromComment);
          break;
        }
        case 18: {
          if (toComment_ == null) {
            ToComment = new global::TideChartCommentBox();
          }
          input.ReadMessage(ToComment);
          break;
        }
        case 26: {
          Type = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartWidgetCommand : pb::IMessage<TideChartWidgetCommand> {
  private static readonly pb::MessageParser<TideChartWidgetCommand> _parser = new pb::MessageParser<TideChartWidgetCommand>(() => new TideChartWidgetCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartWidgetCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartWidgetCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartWidgetCommand(TideChartWidgetCommand other) : this() {
    fromWidget_ = other.fromWidget_ != null ? other.fromWidget_.Clone() : null;
    toWidget_ = other.toWidget_ != null ? other.toWidget_.Clone() : null;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartWidgetCommand Clone() {
    return new TideChartWidgetCommand(this);
  }

  /// <summary>Field number for the "fromWidget" field.</summary>
  public const int FromWidgetFieldNumber = 1;
  private global::TideChartWidget fromWidget_;
  /// <summary>
  /// previous version of the widget    
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartWidget FromWidget {
    get { return fromWidget_; }
    set {
      fromWidget_ = value;
    }
  }

  /// <summary>Field number for the "toWidget" field.</summary>
  public const int ToWidgetFieldNumber = 2;
  private global::TideChartWidget toWidget_;
  /// <summary>
  /// new version of the widget
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartWidget ToWidget {
    get { return toWidget_; }
    set {
      toWidget_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private string type_ = "";
  /// <summary>
  /// type of update: add, update or remove
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartWidgetCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartWidgetCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(FromWidget, other.FromWidget)) return false;
    if (!object.Equals(ToWidget, other.ToWidget)) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (fromWidget_ != null) hash ^= FromWidget.GetHashCode();
    if (toWidget_ != null) hash ^= ToWidget.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (fromWidget_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FromWidget);
    }
    if (toWidget_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ToWidget);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (fromWidget_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromWidget);
    }
    if (toWidget_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToWidget);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartWidgetCommand other) {
    if (other == null) {
      return;
    }
    if (other.fromWidget_ != null) {
      if (fromWidget_ == null) {
        FromWidget = new global::TideChartWidget();
      }
      FromWidget.MergeFrom(other.FromWidget);
    }
    if (other.toWidget_ != null) {
      if (toWidget_ == null) {
        ToWidget = new global::TideChartWidget();
      }
      ToWidget.MergeFrom(other.ToWidget);
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (fromWidget_ == null) {
            FromWidget = new global::TideChartWidget();
          }
          input.ReadMessage(FromWidget);
          break;
        }
        case 18: {
          if (toWidget_ == null) {
            ToWidget = new global::TideChartWidget();
          }
          input.ReadMessage(ToWidget);
          break;
        }
        case 26: {
          Type = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartPortCommand : pb::IMessage<TideChartPortCommand> {
  private static readonly pb::MessageParser<TideChartPortCommand> _parser = new pb::MessageParser<TideChartPortCommand>(() => new TideChartPortCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartPortCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartPortCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartPortCommand(TideChartPortCommand other) : this() {
    fromPort_ = other.fromPort_ != null ? other.fromPort_.Clone() : null;
    toPort_ = other.toPort_ != null ? other.toPort_.Clone() : null;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartPortCommand Clone() {
    return new TideChartPortCommand(this);
  }

  /// <summary>Field number for the "fromPort" field.</summary>
  public const int FromPortFieldNumber = 1;
  private global::TideChartPort fromPort_;
  /// <summary>
  /// previons version of the port
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartPort FromPort {
    get { return fromPort_; }
    set {
      fromPort_ = value;
    }
  }

  /// <summary>Field number for the "toPort" field.</summary>
  public const int ToPortFieldNumber = 2;
  private global::TideChartPort toPort_;
  /// <summary>
  /// new version of the port
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartPort ToPort {
    get { return toPort_; }
    set {
      toPort_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private string type_ = "";
  /// <summary>
  /// type of update: add, update or remove
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartPortCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartPortCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(FromPort, other.FromPort)) return false;
    if (!object.Equals(ToPort, other.ToPort)) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (fromPort_ != null) hash ^= FromPort.GetHashCode();
    if (toPort_ != null) hash ^= ToPort.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (fromPort_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FromPort);
    }
    if (toPort_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ToPort);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (fromPort_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromPort);
    }
    if (toPort_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToPort);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartPortCommand other) {
    if (other == null) {
      return;
    }
    if (other.fromPort_ != null) {
      if (fromPort_ == null) {
        FromPort = new global::TideChartPort();
      }
      FromPort.MergeFrom(other.FromPort);
    }
    if (other.toPort_ != null) {
      if (toPort_ == null) {
        ToPort = new global::TideChartPort();
      }
      ToPort.MergeFrom(other.ToPort);
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (fromPort_ == null) {
            FromPort = new global::TideChartPort();
          }
          input.ReadMessage(FromPort);
          break;
        }
        case 18: {
          if (toPort_ == null) {
            ToPort = new global::TideChartPort();
          }
          input.ReadMessage(ToPort);
          break;
        }
        case 26: {
          Type = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartLinkCommand : pb::IMessage<TideChartLinkCommand> {
  private static readonly pb::MessageParser<TideChartLinkCommand> _parser = new pb::MessageParser<TideChartLinkCommand>(() => new TideChartLinkCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartLinkCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartLinkCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartLinkCommand(TideChartLinkCommand other) : this() {
    fromLink_ = other.fromLink_ != null ? other.fromLink_.Clone() : null;
    toLink_ = other.toLink_ != null ? other.toLink_.Clone() : null;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartLinkCommand Clone() {
    return new TideChartLinkCommand(this);
  }

  /// <summary>Field number for the "fromLink" field.</summary>
  public const int FromLinkFieldNumber = 1;
  private global::TideChartLink fromLink_;
  /// <summary>
  /// previous version of the link
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartLink FromLink {
    get { return fromLink_; }
    set {
      fromLink_ = value;
    }
  }

  /// <summary>Field number for the "toLink" field.</summary>
  public const int ToLinkFieldNumber = 2;
  private global::TideChartLink toLink_;
  /// <summary>
  /// new version of the link
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartLink ToLink {
    get { return toLink_; }
    set {
      toLink_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private string type_ = "";
  /// <summary>
  /// type of update: add, update or remove
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartLinkCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartLinkCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(FromLink, other.FromLink)) return false;
    if (!object.Equals(ToLink, other.ToLink)) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (fromLink_ != null) hash ^= FromLink.GetHashCode();
    if (toLink_ != null) hash ^= ToLink.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (fromLink_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FromLink);
    }
    if (toLink_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ToLink);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (fromLink_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromLink);
    }
    if (toLink_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToLink);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartLinkCommand other) {
    if (other == null) {
      return;
    }
    if (other.fromLink_ != null) {
      if (fromLink_ == null) {
        FromLink = new global::TideChartLink();
      }
      FromLink.MergeFrom(other.FromLink);
    }
    if (other.toLink_ != null) {
      if (toLink_ == null) {
        ToLink = new global::TideChartLink();
      }
      ToLink.MergeFrom(other.ToLink);
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (fromLink_ == null) {
            FromLink = new global::TideChartLink();
          }
          input.ReadMessage(FromLink);
          break;
        }
        case 18: {
          if (toLink_ == null) {
            ToLink = new global::TideChartLink();
          }
          input.ReadMessage(ToLink);
          break;
        }
        case 26: {
          Type = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartNodeCommand : pb::IMessage<TideChartNodeCommand> {
  private static readonly pb::MessageParser<TideChartNodeCommand> _parser = new pb::MessageParser<TideChartNodeCommand>(() => new TideChartNodeCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartNodeCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNodeCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNodeCommand(TideChartNodeCommand other) : this() {
    fromNode_ = other.fromNode_ != null ? other.fromNode_.Clone() : null;
    toNode_ = other.toNode_ != null ? other.toNode_.Clone() : null;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNodeCommand Clone() {
    return new TideChartNodeCommand(this);
  }

  /// <summary>Field number for the "fromNode" field.</summary>
  public const int FromNodeFieldNumber = 1;
  private global::TideChartNode fromNode_;
  /// <summary>
  /// previous version of the graph node
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartNode FromNode {
    get { return fromNode_; }
    set {
      fromNode_ = value;
    }
  }

  /// <summary>Field number for the "toNode" field.</summary>
  public const int ToNodeFieldNumber = 2;
  private global::TideChartNode toNode_;
  /// <summary>
  /// new version of the graph node
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartNode ToNode {
    get { return toNode_; }
    set {
      toNode_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private string type_ = "";
  /// <summary>
  /// type of update: add, update or remove
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartNodeCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartNodeCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(FromNode, other.FromNode)) return false;
    if (!object.Equals(ToNode, other.ToNode)) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (fromNode_ != null) hash ^= FromNode.GetHashCode();
    if (toNode_ != null) hash ^= ToNode.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (fromNode_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FromNode);
    }
    if (toNode_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ToNode);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (fromNode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromNode);
    }
    if (toNode_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToNode);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartNodeCommand other) {
    if (other == null) {
      return;
    }
    if (other.fromNode_ != null) {
      if (fromNode_ == null) {
        FromNode = new global::TideChartNode();
      }
      FromNode.MergeFrom(other.FromNode);
    }
    if (other.toNode_ != null) {
      if (toNode_ == null) {
        ToNode = new global::TideChartNode();
      }
      ToNode.MergeFrom(other.ToNode);
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (fromNode_ == null) {
            FromNode = new global::TideChartNode();
          }
          input.ReadMessage(FromNode);
          break;
        }
        case 18: {
          if (toNode_ == null) {
            ToNode = new global::TideChartNode();
          }
          input.ReadMessage(ToNode);
          break;
        }
        case 26: {
          Type = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartRegionCommand : pb::IMessage<TideChartRegionCommand> {
  private static readonly pb::MessageParser<TideChartRegionCommand> _parser = new pb::MessageParser<TideChartRegionCommand>(() => new TideChartRegionCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartRegionCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartRegionCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartRegionCommand(TideChartRegionCommand other) : this() {
    fromRegion_ = other.fromRegion_ != null ? other.fromRegion_.Clone() : null;
    toRegion_ = other.toRegion_ != null ? other.toRegion_.Clone() : null;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartRegionCommand Clone() {
    return new TideChartRegionCommand(this);
  }

  /// <summary>Field number for the "fromRegion" field.</summary>
  public const int FromRegionFieldNumber = 1;
  private global::TideChartRegion fromRegion_;
  /// <summary>
  /// previous version of the region
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartRegion FromRegion {
    get { return fromRegion_; }
    set {
      fromRegion_ = value;
    }
  }

  /// <summary>Field number for the "toRegion" field.</summary>
  public const int ToRegionFieldNumber = 2;
  private global::TideChartRegion toRegion_;
  /// <summary>
  /// new version of the region
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartRegion ToRegion {
    get { return toRegion_; }
    set {
      toRegion_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private string type_ = "";
  /// <summary>
  /// type of update: add, update or remove
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartRegionCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartRegionCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(FromRegion, other.FromRegion)) return false;
    if (!object.Equals(ToRegion, other.ToRegion)) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (fromRegion_ != null) hash ^= FromRegion.GetHashCode();
    if (toRegion_ != null) hash ^= ToRegion.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (fromRegion_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FromRegion);
    }
    if (toRegion_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ToRegion);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (fromRegion_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromRegion);
    }
    if (toRegion_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToRegion);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartRegionCommand other) {
    if (other == null) {
      return;
    }
    if (other.fromRegion_ != null) {
      if (fromRegion_ == null) {
        FromRegion = new global::TideChartRegion();
      }
      FromRegion.MergeFrom(other.FromRegion);
    }
    if (other.toRegion_ != null) {
      if (toRegion_ == null) {
        ToRegion = new global::TideChartRegion();
      }
      ToRegion.MergeFrom(other.ToRegion);
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (fromRegion_ == null) {
            FromRegion = new global::TideChartRegion();
          }
          input.ReadMessage(FromRegion);
          break;
        }
        case 18: {
          if (toRegion_ == null) {
            ToRegion = new global::TideChartRegion();
          }
          input.ReadMessage(ToRegion);
          break;
        }
        case 26: {
          Type = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartGraphCommand : pb::IMessage<TideChartGraphCommand> {
  private static readonly pb::MessageParser<TideChartGraphCommand> _parser = new pb::MessageParser<TideChartGraphCommand>(() => new TideChartGraphCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartGraphCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartGraphCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartGraphCommand(TideChartGraphCommand other) : this() {
    fromGraph_ = other.fromGraph_ != null ? other.fromGraph_.Clone() : null;
    toGraph_ = other.toGraph_ != null ? other.toGraph_.Clone() : null;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartGraphCommand Clone() {
    return new TideChartGraphCommand(this);
  }

  /// <summary>Field number for the "fromGraph" field.</summary>
  public const int FromGraphFieldNumber = 1;
  private global::TideChartGraph fromGraph_;
  /// <summary>
  /// previous versino of the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartGraph FromGraph {
    get { return fromGraph_; }
    set {
      fromGraph_ = value;
    }
  }

  /// <summary>Field number for the "toGraph" field.</summary>
  public const int ToGraphFieldNumber = 2;
  private global::TideChartGraph toGraph_;
  /// <summary>
  /// new version of the graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartGraph ToGraph {
    get { return toGraph_; }
    set {
      toGraph_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private string type_ = "";
  /// <summary>
  /// type of update: add, update or remove    
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartGraphCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartGraphCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(FromGraph, other.FromGraph)) return false;
    if (!object.Equals(ToGraph, other.ToGraph)) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (fromGraph_ != null) hash ^= FromGraph.GetHashCode();
    if (toGraph_ != null) hash ^= ToGraph.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (fromGraph_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FromGraph);
    }
    if (toGraph_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ToGraph);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (fromGraph_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromGraph);
    }
    if (toGraph_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToGraph);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartGraphCommand other) {
    if (other == null) {
      return;
    }
    if (other.fromGraph_ != null) {
      if (fromGraph_ == null) {
        FromGraph = new global::TideChartGraph();
      }
      FromGraph.MergeFrom(other.FromGraph);
    }
    if (other.toGraph_ != null) {
      if (toGraph_ == null) {
        ToGraph = new global::TideChartGraph();
      }
      ToGraph.MergeFrom(other.ToGraph);
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (fromGraph_ == null) {
            FromGraph = new global::TideChartGraph();
          }
          input.ReadMessage(FromGraph);
          break;
        }
        case 18: {
          if (toGraph_ == null) {
            ToGraph = new global::TideChartGraph();
          }
          input.ReadMessage(ToGraph);
          break;
        }
        case 26: {
          Type = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartPropertyCommand : pb::IMessage<TideChartPropertyCommand> {
  private static readonly pb::MessageParser<TideChartPropertyCommand> _parser = new pb::MessageParser<TideChartPropertyCommand>(() => new TideChartPropertyCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartPropertyCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartPropertyCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartPropertyCommand(TideChartPropertyCommand other) : this() {
    fromProps_ = other.fromProps_.Clone();
    toProps_ = other.toProps_.Clone();
    type_ = other.type_;
    switch (other.TargetCase) {
      case TargetOneofCase.Node:
        Node = other.Node;
        break;
      case TargetOneofCase.Region:
        Region = other.Region;
        break;
      case TargetOneofCase.Widget:
        Widget = other.Widget;
        break;
      case TargetOneofCase.Graph:
        Graph = other.Graph;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartPropertyCommand Clone() {
    return new TideChartPropertyCommand(this);
  }

  /// <summary>Field number for the "fromProps" field.</summary>
  public const int FromPropsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TideChartProperty> _repeated_fromProps_codec
      = pb::FieldCodec.ForMessage(10, global::TideChartProperty.Parser);
  private readonly pbc::RepeatedField<global::TideChartProperty> fromProps_ = new pbc::RepeatedField<global::TideChartProperty>();
  /// <summary>
  /// previous values of the properties (only for included updates)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartProperty> FromProps {
    get { return fromProps_; }
  }

  /// <summary>Field number for the "toProps" field.</summary>
  public const int ToPropsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::TideChartProperty> _repeated_toProps_codec
      = pb::FieldCodec.ForMessage(18, global::TideChartProperty.Parser);
  private readonly pbc::RepeatedField<global::TideChartProperty> toProps_ = new pbc::RepeatedField<global::TideChartProperty>();
  /// <summary>
  /// new values of the properties (only include changes)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartProperty> ToProps {
    get { return toProps_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private string type_ = "";
  /// <summary>
  /// type of update: add, update or remove
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "node" field.</summary>
  public const int NodeFieldNumber = 5;
  /// <summary>
  /// node reference (graph-id:node-name)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Node {
    get { return targetCase_ == TargetOneofCase.Node ? (string) target_ : ""; }
    set {
      target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      targetCase_ = TargetOneofCase.Node;
    }
  }

  /// <summary>Field number for the "region" field.</summary>
  public const int RegionFieldNumber = 6;
  /// <summary>
  /// region reference (graph-id:region-name)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Region {
    get { return targetCase_ == TargetOneofCase.Region ? (string) target_ : ""; }
    set {
      target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      targetCase_ = TargetOneofCase.Region;
    }
  }

  /// <summary>Field number for the "widget" field.</summary>
  public const int WidgetFieldNumber = 7;
  /// <summary>
  /// widget reference (widget-id)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Widget {
    get { return targetCase_ == TargetOneofCase.Widget ? (string) target_ : ""; }
    set {
      target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      targetCase_ = TargetOneofCase.Widget;
    }
  }

  /// <summary>Field number for the "graph" field.</summary>
  public const int GraphFieldNumber = 8;
  /// <summary>
  /// graph reference (graph-id)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Graph {
    get { return targetCase_ == TargetOneofCase.Graph ? (string) target_ : ""; }
    set {
      target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      targetCase_ = TargetOneofCase.Graph;
    }
  }

  private object target_;
  /// <summary>Enum of possible cases for the "target" oneof.</summary>
  public enum TargetOneofCase {
    None = 0,
    Node = 5,
    Region = 6,
    Widget = 7,
    Graph = 8,
  }
  private TargetOneofCase targetCase_ = TargetOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TargetOneofCase TargetCase {
    get { return targetCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTarget() {
    targetCase_ = TargetOneofCase.None;
    target_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartPropertyCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartPropertyCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!fromProps_.Equals(other.fromProps_)) return false;
    if(!toProps_.Equals(other.toProps_)) return false;
    if (Type != other.Type) return false;
    if (Node != other.Node) return false;
    if (Region != other.Region) return false;
    if (Widget != other.Widget) return false;
    if (Graph != other.Graph) return false;
    if (TargetCase != other.TargetCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= fromProps_.GetHashCode();
    hash ^= toProps_.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (targetCase_ == TargetOneofCase.Node) hash ^= Node.GetHashCode();
    if (targetCase_ == TargetOneofCase.Region) hash ^= Region.GetHashCode();
    if (targetCase_ == TargetOneofCase.Widget) hash ^= Widget.GetHashCode();
    if (targetCase_ == TargetOneofCase.Graph) hash ^= Graph.GetHashCode();
    hash ^= (int) targetCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    fromProps_.WriteTo(output, _repeated_fromProps_codec);
    toProps_.WriteTo(output, _repeated_toProps_codec);
    if (Type.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Type);
    }
    if (targetCase_ == TargetOneofCase.Node) {
      output.WriteRawTag(42);
      output.WriteString(Node);
    }
    if (targetCase_ == TargetOneofCase.Region) {
      output.WriteRawTag(50);
      output.WriteString(Region);
    }
    if (targetCase_ == TargetOneofCase.Widget) {
      output.WriteRawTag(58);
      output.WriteString(Widget);
    }
    if (targetCase_ == TargetOneofCase.Graph) {
      output.WriteRawTag(66);
      output.WriteString(Graph);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += fromProps_.CalculateSize(_repeated_fromProps_codec);
    size += toProps_.CalculateSize(_repeated_toProps_codec);
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (targetCase_ == TargetOneofCase.Node) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Node);
    }
    if (targetCase_ == TargetOneofCase.Region) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
    }
    if (targetCase_ == TargetOneofCase.Widget) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Widget);
    }
    if (targetCase_ == TargetOneofCase.Graph) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Graph);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartPropertyCommand other) {
    if (other == null) {
      return;
    }
    fromProps_.Add(other.fromProps_);
    toProps_.Add(other.toProps_);
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    switch (other.TargetCase) {
      case TargetOneofCase.Node:
        Node = other.Node;
        break;
      case TargetOneofCase.Region:
        Region = other.Region;
        break;
      case TargetOneofCase.Widget:
        Widget = other.Widget;
        break;
      case TargetOneofCase.Graph:
        Graph = other.Graph;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          fromProps_.AddEntriesFrom(input, _repeated_fromProps_codec);
          break;
        }
        case 18: {
          toProps_.AddEntriesFrom(input, _repeated_toProps_codec);
          break;
        }
        case 26: {
          Type = input.ReadString();
          break;
        }
        case 42: {
          Node = input.ReadString();
          break;
        }
        case 50: {
          Region = input.ReadString();
          break;
        }
        case 58: {
          Widget = input.ReadString();
          break;
        }
        case 66: {
          Graph = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartNoteCommand : pb::IMessage<TideChartNoteCommand> {
  private static readonly pb::MessageParser<TideChartNoteCommand> _parser = new pb::MessageParser<TideChartNoteCommand>(() => new TideChartNoteCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartNoteCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNoteCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNoteCommand(TideChartNoteCommand other) : this() {
    notes_ = other.notes_.Clone();
    type_ = other.type_;
    switch (other.TargetCase) {
      case TargetOneofCase.Node:
        Node = other.Node;
        break;
      case TargetOneofCase.Region:
        Region = other.Region;
        break;
      case TargetOneofCase.Graph:
        Graph = other.Graph;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartNoteCommand Clone() {
    return new TideChartNoteCommand(this);
  }

  /// <summary>Field number for the "notes" field.</summary>
  public const int NotesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TideChartNote> _repeated_notes_codec
      = pb::FieldCodec.ForMessage(10, global::TideChartNote.Parser);
  private readonly pbc::RepeatedField<global::TideChartNote> notes_ = new pbc::RepeatedField<global::TideChartNote>();
  /// <summary>
  /// a set of notes being added or removed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartNote> Notes {
    get { return notes_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private string type_ = "";
  /// <summary>
  /// type of update: add, remove
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "node" field.</summary>
  public const int NodeFieldNumber = 3;
  /// <summary>
  /// node reference (node-name)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Node {
    get { return targetCase_ == TargetOneofCase.Node ? (string) target_ : ""; }
    set {
      target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      targetCase_ = TargetOneofCase.Node;
    }
  }

  /// <summary>Field number for the "region" field.</summary>
  public const int RegionFieldNumber = 4;
  /// <summary>
  /// region reference (region-name)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Region {
    get { return targetCase_ == TargetOneofCase.Region ? (string) target_ : ""; }
    set {
      target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      targetCase_ = TargetOneofCase.Region;
    }
  }

  /// <summary>Field number for the "graph" field.</summary>
  public const int GraphFieldNumber = 5;
  /// <summary>
  /// graph reference (graph-name)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Graph {
    get { return targetCase_ == TargetOneofCase.Graph ? (string) target_ : ""; }
    set {
      target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      targetCase_ = TargetOneofCase.Graph;
    }
  }

  private object target_;
  /// <summary>Enum of possible cases for the "target" oneof.</summary>
  public enum TargetOneofCase {
    None = 0,
    Node = 3,
    Region = 4,
    Graph = 5,
  }
  private TargetOneofCase targetCase_ = TargetOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TargetOneofCase TargetCase {
    get { return targetCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTarget() {
    targetCase_ = TargetOneofCase.None;
    target_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartNoteCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartNoteCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!notes_.Equals(other.notes_)) return false;
    if (Type != other.Type) return false;
    if (Node != other.Node) return false;
    if (Region != other.Region) return false;
    if (Graph != other.Graph) return false;
    if (TargetCase != other.TargetCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= notes_.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (targetCase_ == TargetOneofCase.Node) hash ^= Node.GetHashCode();
    if (targetCase_ == TargetOneofCase.Region) hash ^= Region.GetHashCode();
    if (targetCase_ == TargetOneofCase.Graph) hash ^= Graph.GetHashCode();
    hash ^= (int) targetCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    notes_.WriteTo(output, _repeated_notes_codec);
    if (Type.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Type);
    }
    if (targetCase_ == TargetOneofCase.Node) {
      output.WriteRawTag(26);
      output.WriteString(Node);
    }
    if (targetCase_ == TargetOneofCase.Region) {
      output.WriteRawTag(34);
      output.WriteString(Region);
    }
    if (targetCase_ == TargetOneofCase.Graph) {
      output.WriteRawTag(42);
      output.WriteString(Graph);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += notes_.CalculateSize(_repeated_notes_codec);
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (targetCase_ == TargetOneofCase.Node) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Node);
    }
    if (targetCase_ == TargetOneofCase.Region) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
    }
    if (targetCase_ == TargetOneofCase.Graph) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Graph);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartNoteCommand other) {
    if (other == null) {
      return;
    }
    notes_.Add(other.notes_);
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    switch (other.TargetCase) {
      case TargetOneofCase.Node:
        Node = other.Node;
        break;
      case TargetOneofCase.Region:
        Region = other.Region;
        break;
      case TargetOneofCase.Graph:
        Graph = other.Graph;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          notes_.AddEntriesFrom(input, _repeated_notes_codec);
          break;
        }
        case 18: {
          Type = input.ReadString();
          break;
        }
        case 26: {
          Node = input.ReadString();
          break;
        }
        case 34: {
          Region = input.ReadString();
          break;
        }
        case 42: {
          Graph = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartMethod : pb::IMessage<TideChartMethod> {
  private static readonly pb::MessageParser<TideChartMethod> _parser = new pb::MessageParser<TideChartMethod>(() => new TideChartMethod());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartMethod> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartMethod() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartMethod(TideChartMethod other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    extends_ = other.extends_;
    script_ = other.script_;
    inports_ = other.inports_.Clone();
    outports_ = other.outports_.Clone();
    props_ = other.props_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartMethod Clone() {
    return new TideChartMethod(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// unique id for the method definition
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  /// name of the method (unique to the library)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "extends" field.</summary>
  public const int ExtendsFieldNumber = 3;
  private string extends_ = "";
  /// <summary>
  /// method extends (customizes) the implementation of another method
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Extends {
    get { return extends_; }
    set {
      extends_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "script" field.</summary>
  public const int ScriptFieldNumber = 4;
  private string script_ = "";
  /// <summary>
  /// custom script that implements the node action for this method
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Script {
    get { return script_; }
    set {
      script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "inports" field.</summary>
  public const int InportsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::TideChartPort> _repeated_inports_codec
      = pb::FieldCodec.ForMessage(42, global::TideChartPort.Parser);
  private readonly pbc::RepeatedField<global::TideChartPort> inports_ = new pbc::RepeatedField<global::TideChartPort>();
  /// <summary>
  /// definition of inports for this method
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartPort> Inports {
    get { return inports_; }
  }

  /// <summary>Field number for the "outports" field.</summary>
  public const int OutportsFieldNumber = 6;
  private static readonly pb::FieldCodec<global::TideChartPort> _repeated_outports_codec
      = pb::FieldCodec.ForMessage(50, global::TideChartPort.Parser);
  private readonly pbc::RepeatedField<global::TideChartPort> outports_ = new pbc::RepeatedField<global::TideChartPort>();
  /// <summary>
  /// definition of outports for this methid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartPort> Outports {
    get { return outports_; }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 7;
  private static readonly pb::FieldCodec<global::TideChartPort> _repeated_props_codec
      = pb::FieldCodec.ForMessage(58, global::TideChartPort.Parser);
  private readonly pbc::RepeatedField<global::TideChartPort> props_ = new pbc::RepeatedField<global::TideChartPort>();
  /// <summary>
  /// definition of property values used by the method (uses port definition format)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartPort> Props {
    get { return props_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartMethod);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartMethod other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Extends != other.Extends) return false;
    if (Script != other.Script) return false;
    if(!inports_.Equals(other.inports_)) return false;
    if(!outports_.Equals(other.outports_)) return false;
    if(!props_.Equals(other.props_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Extends.Length != 0) hash ^= Extends.GetHashCode();
    if (Script.Length != 0) hash ^= Script.GetHashCode();
    hash ^= inports_.GetHashCode();
    hash ^= outports_.GetHashCode();
    hash ^= props_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Extends.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Extends);
    }
    if (Script.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Script);
    }
    inports_.WriteTo(output, _repeated_inports_codec);
    outports_.WriteTo(output, _repeated_outports_codec);
    props_.WriteTo(output, _repeated_props_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Extends.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Extends);
    }
    if (Script.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Script);
    }
    size += inports_.CalculateSize(_repeated_inports_codec);
    size += outports_.CalculateSize(_repeated_outports_codec);
    size += props_.CalculateSize(_repeated_props_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartMethod other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Extends.Length != 0) {
      Extends = other.Extends;
    }
    if (other.Script.Length != 0) {
      Script = other.Script;
    }
    inports_.Add(other.inports_);
    outports_.Add(other.outports_);
    props_.Add(other.props_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Extends = input.ReadString();
          break;
        }
        case 34: {
          Script = input.ReadString();
          break;
        }
        case 42: {
          inports_.AddEntriesFrom(input, _repeated_inports_codec);
          break;
        }
        case 50: {
          outports_.AddEntriesFrom(input, _repeated_outports_codec);
          break;
        }
        case 58: {
          props_.AddEntriesFrom(input, _repeated_props_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartSource : pb::IMessage<TideChartSource> {
  private static readonly pb::MessageParser<TideChartSource> _parser = new pb::MessageParser<TideChartSource>(() => new TideChartSource());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartSource> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartSource() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartSource(TideChartSource other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    path_ = other.path_;
    createdDate_ = other.createdDate_;
    createdBy_ = other.createdBy_;
    switch (other.ContentCase) {
      case ContentOneofCase.Version:
        Version = other.Version;
        break;
      case ContentOneofCase.Script:
        Script = other.Script;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartSource Clone() {
    return new TideChartSource(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// unique id for this source file
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  /// name of the source file 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 3;
  private string path_ = "";
  /// <summary>
  /// relative path of the source file 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "createdDate" field.</summary>
  public const int CreatedDateFieldNumber = 5;
  private string createdDate_ = "";
  /// <summary>
  /// date file version was created
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CreatedDate {
    get { return createdDate_; }
    set {
      createdDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "createdBy" field.</summary>
  public const int CreatedByFieldNumber = 6;
  private string createdBy_ = "";
  /// <summary>
  /// user that created this file version 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CreatedBy {
    get { return createdBy_; }
    set {
      createdBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 7;
  /// <summary>
  /// reference to the exact version of the file    
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Version {
    get { return contentCase_ == ContentOneofCase.Version ? (string) content_ : ""; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      contentCase_ = ContentOneofCase.Version;
    }
  }

  /// <summary>Field number for the "script" field.</summary>
  public const int ScriptFieldNumber = 8;
  /// <summary>
  /// contents of the file
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Script {
    get { return contentCase_ == ContentOneofCase.Script ? (string) content_ : ""; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      contentCase_ = ContentOneofCase.Script;
    }
  }

  private object content_;
  /// <summary>Enum of possible cases for the "content" oneof.</summary>
  public enum ContentOneofCase {
    None = 0,
    Version = 7,
    Script = 8,
  }
  private ContentOneofCase contentCase_ = ContentOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentOneofCase ContentCase {
    get { return contentCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContent() {
    contentCase_ = ContentOneofCase.None;
    content_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartSource);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartSource other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Path != other.Path) return false;
    if (CreatedDate != other.CreatedDate) return false;
    if (CreatedBy != other.CreatedBy) return false;
    if (Version != other.Version) return false;
    if (Script != other.Script) return false;
    if (ContentCase != other.ContentCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    if (CreatedDate.Length != 0) hash ^= CreatedDate.GetHashCode();
    if (CreatedBy.Length != 0) hash ^= CreatedBy.GetHashCode();
    if (contentCase_ == ContentOneofCase.Version) hash ^= Version.GetHashCode();
    if (contentCase_ == ContentOneofCase.Script) hash ^= Script.GetHashCode();
    hash ^= (int) contentCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Path.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Path);
    }
    if (CreatedDate.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(CreatedDate);
    }
    if (CreatedBy.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(CreatedBy);
    }
    if (contentCase_ == ContentOneofCase.Version) {
      output.WriteRawTag(58);
      output.WriteString(Version);
    }
    if (contentCase_ == ContentOneofCase.Script) {
      output.WriteRawTag(66);
      output.WriteString(Script);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    if (CreatedDate.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedDate);
    }
    if (CreatedBy.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedBy);
    }
    if (contentCase_ == ContentOneofCase.Version) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (contentCase_ == ContentOneofCase.Script) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Script);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartSource other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
    if (other.CreatedDate.Length != 0) {
      CreatedDate = other.CreatedDate;
    }
    if (other.CreatedBy.Length != 0) {
      CreatedBy = other.CreatedBy;
    }
    switch (other.ContentCase) {
      case ContentOneofCase.Version:
        Version = other.Version;
        break;
      case ContentOneofCase.Script:
        Script = other.Script;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Path = input.ReadString();
          break;
        }
        case 42: {
          CreatedDate = input.ReadString();
          break;
        }
        case 50: {
          CreatedBy = input.ReadString();
          break;
        }
        case 58: {
          Version = input.ReadString();
          break;
        }
        case 66: {
          Script = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartLibrary : pb::IMessage<TideChartLibrary> {
  private static readonly pb::MessageParser<TideChartLibrary> _parser = new pb::MessageParser<TideChartLibrary>(() => new TideChartLibrary());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartLibrary> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartLibrary() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartLibrary(TideChartLibrary other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    title_ = other.title_;
    origin_ = other.origin_;
    branch_ = other.branch_;
    path_ = other.path_;
    files_ = other.files_.Clone();
    methods_ = other.methods_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartLibrary Clone() {
    return new TideChartLibrary(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// unique id for the library
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  /// fully qualified name for the library
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 3;
  private string title_ = "";
  /// <summary>
  /// descriptive title for the library
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "origin" field.</summary>
  public const int OriginFieldNumber = 4;
  private string origin_ = "";
  /// <summary>
  /// repository containing referenced files
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Origin {
    get { return origin_; }
    set {
      origin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "branch" field.</summary>
  public const int BranchFieldNumber = 5;
  private string branch_ = "";
  /// <summary>
  /// branch containing referenced files
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Branch {
    get { return branch_; }
    set {
      branch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 6;
  private string path_ = "";
  /// <summary>
  /// root path for files in the library
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "files" field.</summary>
  public const int FilesFieldNumber = 7;
  private static readonly pb::FieldCodec<global::TideChartSource> _repeated_files_codec
      = pb::FieldCodec.ForMessage(58, global::TideChartSource.Parser);
  private readonly pbc::RepeatedField<global::TideChartSource> files_ = new pbc::RepeatedField<global::TideChartSource>();
  /// <summary>
  /// files included in the library
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartSource> Files {
    get { return files_; }
  }

  /// <summary>Field number for the "methods" field.</summary>
  public const int MethodsFieldNumber = 8;
  private static readonly pb::FieldCodec<global::TideChartMethod> _repeated_methods_codec
      = pb::FieldCodec.ForMessage(66, global::TideChartMethod.Parser);
  private readonly pbc::RepeatedField<global::TideChartMethod> methods_ = new pbc::RepeatedField<global::TideChartMethod>();
  /// <summary>
  /// definitions for methods implemented by the library
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartMethod> Methods {
    get { return methods_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartLibrary);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartLibrary other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Title != other.Title) return false;
    if (Origin != other.Origin) return false;
    if (Branch != other.Branch) return false;
    if (Path != other.Path) return false;
    if(!files_.Equals(other.files_)) return false;
    if(!methods_.Equals(other.methods_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (Origin.Length != 0) hash ^= Origin.GetHashCode();
    if (Branch.Length != 0) hash ^= Branch.GetHashCode();
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    hash ^= files_.GetHashCode();
    hash ^= methods_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Title);
    }
    if (Origin.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Origin);
    }
    if (Branch.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Branch);
    }
    if (Path.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Path);
    }
    files_.WriteTo(output, _repeated_files_codec);
    methods_.WriteTo(output, _repeated_methods_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (Origin.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Origin);
    }
    if (Branch.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Branch);
    }
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    size += files_.CalculateSize(_repeated_files_codec);
    size += methods_.CalculateSize(_repeated_methods_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartLibrary other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    if (other.Origin.Length != 0) {
      Origin = other.Origin;
    }
    if (other.Branch.Length != 0) {
      Branch = other.Branch;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
    files_.Add(other.files_);
    methods_.Add(other.methods_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Title = input.ReadString();
          break;
        }
        case 34: {
          Origin = input.ReadString();
          break;
        }
        case 42: {
          Branch = input.ReadString();
          break;
        }
        case 50: {
          Path = input.ReadString();
          break;
        }
        case 58: {
          files_.AddEntriesFrom(input, _repeated_files_codec);
          break;
        }
        case 66: {
          methods_.AddEntriesFrom(input, _repeated_methods_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartSite : pb::IMessage<TideChartSite> {
  private static readonly pb::MessageParser<TideChartSite> _parser = new pb::MessageParser<TideChartSite>(() => new TideChartSite());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartSite> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartSite() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartSite(TideChartSite other) : this() {
    index_ = other.index_;
    stack_ = other.stack_.Clone();
    path_ = other.path_;
    trigger_ = other.trigger_;
    event_ = other.event_;
    scope_ = other.scope_.Clone();
    filter_ = other.filter_;
    graph_ = other.graph_;
    region_ = other.region_;
    node_ = other.node_;
    port_ = other.port_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartSite Clone() {
    return new TideChartSite(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private long index_;
  /// <summary>
  /// An index that uniquely identifies all message producers and consumers sites and sequences with messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "stack" field.</summary>
  public const int StackFieldNumber = 2;
  private static readonly pb::FieldCodec<global::TideChartSite> _repeated_stack_codec
      = pb::FieldCodec.ForMessage(18, global::TideChartSite.Parser);
  private readonly pbc::RepeatedField<global::TideChartSite> stack_ = new pbc::RepeatedField<global::TideChartSite>();
  /// <summary>
  /// used to trace origin when calling into behavior nodes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartSite> Stack {
    get { return stack_; }
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 3;
  private string path_ = "";
  /// <summary>
  /// Path in global state storage for events from state changes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "trigger" field.</summary>
  public const int TriggerFieldNumber = 4;
  private string trigger_ = "";
  /// <summary>
  /// Source that produced an event (when the source isn't a node)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Trigger {
    get { return trigger_; }
    set {
      trigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "event" field.</summary>
  public const int EventFieldNumber = 5;
  private string event_ = "";
  /// <summary>
  /// Name of event (used for event sources and targets)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Event {
    get { return event_; }
    set {
      event_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "scope" field.</summary>
  public const int ScopeFieldNumber = 6;
  private static readonly pb::FieldCodec<string> _repeated_scope_codec
      = pb::FieldCodec.ForString(50);
  private readonly pbc::RepeatedField<string> scope_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// Used for scoped event sites
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Scope {
    get { return scope_; }
  }

  /// <summary>Field number for the "filter" field.</summary>
  public const int FilterFieldNumber = 7;
  private string filter_ = "";
  /// <summary>
  /// A filter that can conditionally pass messages thru the site (filtered messages are dropped)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Filter {
    get { return filter_; }
    set {
      filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "graph" field.</summary>
  public const int GraphFieldNumber = 8;
  private string graph_ = "";
  /// <summary>
  /// graph-name    - graph scripts and graph nodes can generate messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Graph {
    get { return graph_; }
    set {
      graph_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "region" field.</summary>
  public const int RegionFieldNumber = 9;
  private string region_ = "";
  /// <summary>
  /// region-name   - region scripts can generate messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Region {
    get { return region_; }
    set {
      region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "node" field.</summary>
  public const int NodeFieldNumber = 10;
  private string node_ = "";
  /// <summary>
  /// node-name     - node actions and node ports an generate messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Node {
    get { return node_; }
    set {
      node_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "port" field.</summary>
  public const int PortFieldNumber = 11;
  private string port_ = "";
  /// <summary>
  /// port-name     - ports can generate and receive messages
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Port {
    get { return port_; }
    set {
      port_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartSite);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartSite other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if(!stack_.Equals(other.stack_)) return false;
    if (Path != other.Path) return false;
    if (Trigger != other.Trigger) return false;
    if (Event != other.Event) return false;
    if(!scope_.Equals(other.scope_)) return false;
    if (Filter != other.Filter) return false;
    if (Graph != other.Graph) return false;
    if (Region != other.Region) return false;
    if (Node != other.Node) return false;
    if (Port != other.Port) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0L) hash ^= Index.GetHashCode();
    hash ^= stack_.GetHashCode();
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    if (Trigger.Length != 0) hash ^= Trigger.GetHashCode();
    if (Event.Length != 0) hash ^= Event.GetHashCode();
    hash ^= scope_.GetHashCode();
    if (Filter.Length != 0) hash ^= Filter.GetHashCode();
    if (Graph.Length != 0) hash ^= Graph.GetHashCode();
    if (Region.Length != 0) hash ^= Region.GetHashCode();
    if (Node.Length != 0) hash ^= Node.GetHashCode();
    if (Port.Length != 0) hash ^= Port.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Index);
    }
    stack_.WriteTo(output, _repeated_stack_codec);
    if (Path.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Path);
    }
    if (Trigger.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Trigger);
    }
    if (Event.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Event);
    }
    scope_.WriteTo(output, _repeated_scope_codec);
    if (Filter.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Filter);
    }
    if (Graph.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Graph);
    }
    if (Region.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Region);
    }
    if (Node.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Node);
    }
    if (Port.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(Port);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Index);
    }
    size += stack_.CalculateSize(_repeated_stack_codec);
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    if (Trigger.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Trigger);
    }
    if (Event.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Event);
    }
    size += scope_.CalculateSize(_repeated_scope_codec);
    if (Filter.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
    }
    if (Graph.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Graph);
    }
    if (Region.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
    }
    if (Node.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Node);
    }
    if (Port.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Port);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartSite other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0L) {
      Index = other.Index;
    }
    stack_.Add(other.stack_);
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
    if (other.Trigger.Length != 0) {
      Trigger = other.Trigger;
    }
    if (other.Event.Length != 0) {
      Event = other.Event;
    }
    scope_.Add(other.scope_);
    if (other.Filter.Length != 0) {
      Filter = other.Filter;
    }
    if (other.Graph.Length != 0) {
      Graph = other.Graph;
    }
    if (other.Region.Length != 0) {
      Region = other.Region;
    }
    if (other.Node.Length != 0) {
      Node = other.Node;
    }
    if (other.Port.Length != 0) {
      Port = other.Port;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadInt64();
          break;
        }
        case 18: {
          stack_.AddEntriesFrom(input, _repeated_stack_codec);
          break;
        }
        case 26: {
          Path = input.ReadString();
          break;
        }
        case 34: {
          Trigger = input.ReadString();
          break;
        }
        case 42: {
          Event = input.ReadString();
          break;
        }
        case 50: {
          scope_.AddEntriesFrom(input, _repeated_scope_codec);
          break;
        }
        case 58: {
          Filter = input.ReadString();
          break;
        }
        case 66: {
          Graph = input.ReadString();
          break;
        }
        case 74: {
          Region = input.ReadString();
          break;
        }
        case 82: {
          Node = input.ReadString();
          break;
        }
        case 90: {
          Port = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartMessage : pb::IMessage<TideChartMessage> {
  private static readonly pb::MessageParser<TideChartMessage> _parser = new pb::MessageParser<TideChartMessage>(() => new TideChartMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartMessage(TideChartMessage other) : this() {
    index_ = other.index_;
    timestamp_ = other.timestamp_;
    origin_ = other.origin_;
    previous_ = other.previous_;
    source_ = other.source_;
    target_ = other.target_;
    delayUntil_ = other.delayUntil_;
    holdToken_ = other.holdToken_;
    cancelToken_ = other.cancelToken_;
    type_ = other.type_;
    version_ = other.version_;
    switch (other.ContentCase) {
      case ContentOneofCase.JsonContent:
        JsonContent = other.JsonContent;
        break;
      case ContentOneofCase.MsgContent:
        MsgContent = other.MsgContent;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartMessage Clone() {
    return new TideChartMessage(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private long index_;
  /// <summary>
  /// unique sequence number for all messages and sites (execution scope)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 2;
  private long timestamp_;
  /// <summary>
  /// timestamp when the message was routed from the source
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "origin" field.</summary>
  public const int OriginFieldNumber = 4;
  private long origin_;
  /// <summary>
  /// first index of this message (messages are immutable)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Origin {
    get { return origin_; }
    set {
      origin_ = value;
    }
  }

  /// <summary>Field number for the "previous" field.</summary>
  public const int PreviousFieldNumber = 5;
  private long previous_;
  /// <summary>
  /// previous index of this message based on message routing thru graph
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Previous {
    get { return previous_; }
    set {
      previous_ = value;
    }
  }

  /// <summary>Field number for the "source" field.</summary>
  public const int SourceFieldNumber = 7;
  private long source_;
  /// <summary>
  /// source producer the message came from (index for a producer site)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Source {
    get { return source_; }
    set {
      source_ = value;
    }
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 8;
  private long target_;
  /// <summary>
  /// target consumer the message is going to (index for a consumer site)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Target {
    get { return target_; }
    set {
      target_ = value;
    }
  }

  /// <summary>Field number for the "delayUntil" field.</summary>
  public const int DelayUntilFieldNumber = 9;
  private long delayUntil_;
  /// <summary>
  /// timestamp when the message arrives at the target site
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long DelayUntil {
    get { return delayUntil_; }
    set {
      delayUntil_ = value;
    }
  }

  /// <summary>Field number for the "holdToken" field.</summary>
  public const int HoldTokenFieldNumber = 10;
  private long holdToken_;
  /// <summary>
  /// index to a producer site that will release the message to the target site (use with site filter to create conditional blocking)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long HoldToken {
    get { return holdToken_; }
    set {
      holdToken_ = value;
    }
  }

  /// <summary>Field number for the "cancelToken" field.</summary>
  public const int CancelTokenFieldNumber = 11;
  private long cancelToken_;
  /// <summary>
  /// index to a producer site that will cancel the message (stop routing and remove from inports)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CancelToken {
    get { return cancelToken_; }
    set {
      cancelToken_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 12;
  private string type_ = "";
  /// <summary>
  /// type of message content 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 13;
  private int version_;
  /// <summary>
  /// version incremented every time the message content changes for the same origin
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  /// <summary>Field number for the "jsonContent" field.</summary>
  public const int JsonContentFieldNumber = 14;
  /// <summary>
  /// string encoded message content
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string JsonContent {
    get { return contentCase_ == ContentOneofCase.JsonContent ? (string) content_ : ""; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      contentCase_ = ContentOneofCase.JsonContent;
    }
  }

  /// <summary>Field number for the "msgContent" field.</summary>
  public const int MsgContentFieldNumber = 15;
  /// <summary>
  /// binary encoded message content
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString MsgContent {
    get { return contentCase_ == ContentOneofCase.MsgContent ? (pb::ByteString) content_ : pb::ByteString.Empty; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      contentCase_ = ContentOneofCase.MsgContent;
    }
  }

  private object content_;
  /// <summary>Enum of possible cases for the "content" oneof.</summary>
  public enum ContentOneofCase {
    None = 0,
    JsonContent = 14,
    MsgContent = 15,
  }
  private ContentOneofCase contentCase_ = ContentOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ContentOneofCase ContentCase {
    get { return contentCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContent() {
    contentCase_ = ContentOneofCase.None;
    content_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (Timestamp != other.Timestamp) return false;
    if (Origin != other.Origin) return false;
    if (Previous != other.Previous) return false;
    if (Source != other.Source) return false;
    if (Target != other.Target) return false;
    if (DelayUntil != other.DelayUntil) return false;
    if (HoldToken != other.HoldToken) return false;
    if (CancelToken != other.CancelToken) return false;
    if (Type != other.Type) return false;
    if (Version != other.Version) return false;
    if (JsonContent != other.JsonContent) return false;
    if (MsgContent != other.MsgContent) return false;
    if (ContentCase != other.ContentCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0L) hash ^= Index.GetHashCode();
    if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
    if (Origin != 0L) hash ^= Origin.GetHashCode();
    if (Previous != 0L) hash ^= Previous.GetHashCode();
    if (Source != 0L) hash ^= Source.GetHashCode();
    if (Target != 0L) hash ^= Target.GetHashCode();
    if (DelayUntil != 0L) hash ^= DelayUntil.GetHashCode();
    if (HoldToken != 0L) hash ^= HoldToken.GetHashCode();
    if (CancelToken != 0L) hash ^= CancelToken.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (Version != 0) hash ^= Version.GetHashCode();
    if (contentCase_ == ContentOneofCase.JsonContent) hash ^= JsonContent.GetHashCode();
    if (contentCase_ == ContentOneofCase.MsgContent) hash ^= MsgContent.GetHashCode();
    hash ^= (int) contentCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Index);
    }
    if (Timestamp != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Timestamp);
    }
    if (Origin != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Origin);
    }
    if (Previous != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(Previous);
    }
    if (Source != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(Source);
    }
    if (Target != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(Target);
    }
    if (DelayUntil != 0L) {
      output.WriteRawTag(72);
      output.WriteInt64(DelayUntil);
    }
    if (HoldToken != 0L) {
      output.WriteRawTag(80);
      output.WriteInt64(HoldToken);
    }
    if (CancelToken != 0L) {
      output.WriteRawTag(88);
      output.WriteInt64(CancelToken);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(Type);
    }
    if (Version != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(Version);
    }
    if (contentCase_ == ContentOneofCase.JsonContent) {
      output.WriteRawTag(114);
      output.WriteString(JsonContent);
    }
    if (contentCase_ == ContentOneofCase.MsgContent) {
      output.WriteRawTag(122);
      output.WriteBytes(MsgContent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Index);
    }
    if (Timestamp != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
    }
    if (Origin != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Origin);
    }
    if (Previous != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Previous);
    }
    if (Source != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Source);
    }
    if (Target != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Target);
    }
    if (DelayUntil != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DelayUntil);
    }
    if (HoldToken != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(HoldToken);
    }
    if (CancelToken != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CancelToken);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (Version != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
    }
    if (contentCase_ == ContentOneofCase.JsonContent) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonContent);
    }
    if (contentCase_ == ContentOneofCase.MsgContent) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(MsgContent);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartMessage other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0L) {
      Index = other.Index;
    }
    if (other.Timestamp != 0L) {
      Timestamp = other.Timestamp;
    }
    if (other.Origin != 0L) {
      Origin = other.Origin;
    }
    if (other.Previous != 0L) {
      Previous = other.Previous;
    }
    if (other.Source != 0L) {
      Source = other.Source;
    }
    if (other.Target != 0L) {
      Target = other.Target;
    }
    if (other.DelayUntil != 0L) {
      DelayUntil = other.DelayUntil;
    }
    if (other.HoldToken != 0L) {
      HoldToken = other.HoldToken;
    }
    if (other.CancelToken != 0L) {
      CancelToken = other.CancelToken;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.Version != 0) {
      Version = other.Version;
    }
    switch (other.ContentCase) {
      case ContentOneofCase.JsonContent:
        JsonContent = other.JsonContent;
        break;
      case ContentOneofCase.MsgContent:
        MsgContent = other.MsgContent;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadInt64();
          break;
        }
        case 16: {
          Timestamp = input.ReadInt64();
          break;
        }
        case 32: {
          Origin = input.ReadInt64();
          break;
        }
        case 40: {
          Previous = input.ReadInt64();
          break;
        }
        case 56: {
          Source = input.ReadInt64();
          break;
        }
        case 64: {
          Target = input.ReadInt64();
          break;
        }
        case 72: {
          DelayUntil = input.ReadInt64();
          break;
        }
        case 80: {
          HoldToken = input.ReadInt64();
          break;
        }
        case 88: {
          CancelToken = input.ReadInt64();
          break;
        }
        case 98: {
          Type = input.ReadString();
          break;
        }
        case 104: {
          Version = input.ReadInt32();
          break;
        }
        case 114: {
          JsonContent = input.ReadString();
          break;
        }
        case 122: {
          MsgContent = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartData : pb::IMessage<TideChartData> {
  private static readonly pb::MessageParser<TideChartData> _parser = new pb::MessageParser<TideChartData>(() => new TideChartData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartData(TideChartData other) : this() {
    version_ = other.version_;
    branch_ = other.branch_;
    source_ = other.source_;
    merge_ = other.merge_;
    commitDate_ = other.commitDate_;
    commitBy_ = other.commitBy_;
    commitDesc_ = other.commitDesc_;
    commitNotes_ = other.commitNotes_;
    sheets_ = other.sheets_.Clone();
    props_ = other.props_.Clone();
    notes_ = other.notes_.Clone();
    library_ = other.library_.Clone();
    global_ = other.global_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartData Clone() {
    return new TideChartData(this);
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 1;
  private string version_ = "";
  /// <summary>
  /// unique id for this chart version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Version {
    get { return version_; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "branch" field.</summary>
  public const int BranchFieldNumber = 2;
  private string branch_ = "";
  /// <summary>
  /// branch this version is associated with
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Branch {
    get { return branch_; }
    set {
      branch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "source" field.</summary>
  public const int SourceFieldNumber = 3;
  private string source_ = "";
  /// <summary>
  /// previous version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Source {
    get { return source_; }
    set {
      source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "merge" field.</summary>
  public const int MergeFieldNumber = 4;
  private string merge_ = "";
  /// <summary>
  /// last version id on branch merging into
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Merge {
    get { return merge_; }
    set {
      merge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "commitDate" field.</summary>
  public const int CommitDateFieldNumber = 5;
  private string commitDate_ = "";
  /// <summary>
  /// date version of the chart was committed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CommitDate {
    get { return commitDate_; }
    set {
      commitDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "commitBy" field.</summary>
  public const int CommitByFieldNumber = 6;
  private string commitBy_ = "";
  /// <summary>
  /// user that committed latest version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CommitBy {
    get { return commitBy_; }
    set {
      commitBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "commitDesc" field.</summary>
  public const int CommitDescFieldNumber = 7;
  private string commitDesc_ = "";
  /// <summary>
  /// short commit comment
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CommitDesc {
    get { return commitDesc_; }
    set {
      commitDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "commitNotes" field.</summary>
  public const int CommitNotesFieldNumber = 8;
  private string commitNotes_ = "";
  /// <summary>
  /// longer commit notes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CommitNotes {
    get { return commitNotes_; }
    set {
      commitNotes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sheets" field.</summary>
  public const int SheetsFieldNumber = 9;
  private static readonly pb::FieldCodec<global::TideChartGraph> _repeated_sheets_codec
      = pb::FieldCodec.ForMessage(74, global::TideChartGraph.Parser);
  private readonly pbc::RepeatedField<global::TideChartGraph> sheets_ = new pbc::RepeatedField<global::TideChartGraph>();
  /// <summary>
  /// graphs contained in the chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartGraph> Sheets {
    get { return sheets_; }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 10;
  private static readonly pb::FieldCodec<global::TideChartProperty> _repeated_props_codec
      = pb::FieldCodec.ForMessage(82, global::TideChartProperty.Parser);
  private readonly pbc::RepeatedField<global::TideChartProperty> props_ = new pbc::RepeatedField<global::TideChartProperty>();
  /// <summary>
  /// configuration properties for the entire chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartProperty> Props {
    get { return props_; }
  }

  /// <summary>Field number for the "notes" field.</summary>
  public const int NotesFieldNumber = 11;
  private static readonly pb::FieldCodec<global::TideChartNote> _repeated_notes_codec
      = pb::FieldCodec.ForMessage(90, global::TideChartNote.Parser);
  private readonly pbc::RepeatedField<global::TideChartNote> notes_ = new pbc::RepeatedField<global::TideChartNote>();
  /// <summary>
  /// note discussion for the entire chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartNote> Notes {
    get { return notes_; }
  }

  /// <summary>Field number for the "library" field.</summary>
  public const int LibraryFieldNumber = 12;
  private static readonly pb::FieldCodec<global::TideChartLibrary> _repeated_library_codec
      = pb::FieldCodec.ForMessage(98, global::TideChartLibrary.Parser);
  private readonly pbc::RepeatedField<global::TideChartLibrary> library_ = new pbc::RepeatedField<global::TideChartLibrary>();
  /// <summary>
  /// source of node templates that can be added to graphs
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartLibrary> Library {
    get { return library_; }
  }

  /// <summary>Field number for the "global" field.</summary>
  public const int GlobalFieldNumber = 13;
  private static readonly pb::FieldCodec<global::TideChartProperty> _repeated_global_codec
      = pb::FieldCodec.ForMessage(106, global::TideChartProperty.Parser);
  private readonly pbc::RepeatedField<global::TideChartProperty> global_ = new pbc::RepeatedField<global::TideChartProperty>();
  /// <summary>
  /// global state variables shared by all graphs
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartProperty> Global {
    get { return global_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Version != other.Version) return false;
    if (Branch != other.Branch) return false;
    if (Source != other.Source) return false;
    if (Merge != other.Merge) return false;
    if (CommitDate != other.CommitDate) return false;
    if (CommitBy != other.CommitBy) return false;
    if (CommitDesc != other.CommitDesc) return false;
    if (CommitNotes != other.CommitNotes) return false;
    if(!sheets_.Equals(other.sheets_)) return false;
    if(!props_.Equals(other.props_)) return false;
    if(!notes_.Equals(other.notes_)) return false;
    if(!library_.Equals(other.library_)) return false;
    if(!global_.Equals(other.global_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Version.Length != 0) hash ^= Version.GetHashCode();
    if (Branch.Length != 0) hash ^= Branch.GetHashCode();
    if (Source.Length != 0) hash ^= Source.GetHashCode();
    if (Merge.Length != 0) hash ^= Merge.GetHashCode();
    if (CommitDate.Length != 0) hash ^= CommitDate.GetHashCode();
    if (CommitBy.Length != 0) hash ^= CommitBy.GetHashCode();
    if (CommitDesc.Length != 0) hash ^= CommitDesc.GetHashCode();
    if (CommitNotes.Length != 0) hash ^= CommitNotes.GetHashCode();
    hash ^= sheets_.GetHashCode();
    hash ^= props_.GetHashCode();
    hash ^= notes_.GetHashCode();
    hash ^= library_.GetHashCode();
    hash ^= global_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Version.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Version);
    }
    if (Branch.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Branch);
    }
    if (Source.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Source);
    }
    if (Merge.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Merge);
    }
    if (CommitDate.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(CommitDate);
    }
    if (CommitBy.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(CommitBy);
    }
    if (CommitDesc.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(CommitDesc);
    }
    if (CommitNotes.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(CommitNotes);
    }
    sheets_.WriteTo(output, _repeated_sheets_codec);
    props_.WriteTo(output, _repeated_props_codec);
    notes_.WriteTo(output, _repeated_notes_codec);
    library_.WriteTo(output, _repeated_library_codec);
    global_.WriteTo(output, _repeated_global_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Version.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (Branch.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Branch);
    }
    if (Source.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
    }
    if (Merge.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Merge);
    }
    if (CommitDate.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitDate);
    }
    if (CommitBy.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitBy);
    }
    if (CommitDesc.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitDesc);
    }
    if (CommitNotes.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitNotes);
    }
    size += sheets_.CalculateSize(_repeated_sheets_codec);
    size += props_.CalculateSize(_repeated_props_codec);
    size += notes_.CalculateSize(_repeated_notes_codec);
    size += library_.CalculateSize(_repeated_library_codec);
    size += global_.CalculateSize(_repeated_global_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartData other) {
    if (other == null) {
      return;
    }
    if (other.Version.Length != 0) {
      Version = other.Version;
    }
    if (other.Branch.Length != 0) {
      Branch = other.Branch;
    }
    if (other.Source.Length != 0) {
      Source = other.Source;
    }
    if (other.Merge.Length != 0) {
      Merge = other.Merge;
    }
    if (other.CommitDate.Length != 0) {
      CommitDate = other.CommitDate;
    }
    if (other.CommitBy.Length != 0) {
      CommitBy = other.CommitBy;
    }
    if (other.CommitDesc.Length != 0) {
      CommitDesc = other.CommitDesc;
    }
    if (other.CommitNotes.Length != 0) {
      CommitNotes = other.CommitNotes;
    }
    sheets_.Add(other.sheets_);
    props_.Add(other.props_);
    notes_.Add(other.notes_);
    library_.Add(other.library_);
    global_.Add(other.global_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Version = input.ReadString();
          break;
        }
        case 18: {
          Branch = input.ReadString();
          break;
        }
        case 26: {
          Source = input.ReadString();
          break;
        }
        case 34: {
          Merge = input.ReadString();
          break;
        }
        case 42: {
          CommitDate = input.ReadString();
          break;
        }
        case 50: {
          CommitBy = input.ReadString();
          break;
        }
        case 58: {
          CommitDesc = input.ReadString();
          break;
        }
        case 66: {
          CommitNotes = input.ReadString();
          break;
        }
        case 74: {
          sheets_.AddEntriesFrom(input, _repeated_sheets_codec);
          break;
        }
        case 82: {
          props_.AddEntriesFrom(input, _repeated_props_codec);
          break;
        }
        case 90: {
          notes_.AddEntriesFrom(input, _repeated_notes_codec);
          break;
        }
        case 98: {
          library_.AddEntriesFrom(input, _repeated_library_codec);
          break;
        }
        case 106: {
          global_.AddEntriesFrom(input, _repeated_global_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Read only the commit headers 
/// </summary>
public sealed partial class TideChartHeader : pb::IMessage<TideChartHeader> {
  private static readonly pb::MessageParser<TideChartHeader> _parser = new pb::MessageParser<TideChartHeader>(() => new TideChartHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartHeader(TideChartHeader other) : this() {
    version_ = other.version_;
    branch_ = other.branch_;
    source_ = other.source_;
    merge_ = other.merge_;
    commitDate_ = other.commitDate_;
    commitBy_ = other.commitBy_;
    commitDesc_ = other.commitDesc_;
    commitNotes_ = other.commitNotes_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartHeader Clone() {
    return new TideChartHeader(this);
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 1;
  private string version_ = "";
  /// <summary>
  /// unique id for this chart version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Version {
    get { return version_; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "branch" field.</summary>
  public const int BranchFieldNumber = 2;
  private string branch_ = "";
  /// <summary>
  /// branch this version is associated with
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Branch {
    get { return branch_; }
    set {
      branch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "source" field.</summary>
  public const int SourceFieldNumber = 3;
  private string source_ = "";
  /// <summary>
  /// previous version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Source {
    get { return source_; }
    set {
      source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "merge" field.</summary>
  public const int MergeFieldNumber = 4;
  private string merge_ = "";
  /// <summary>
  /// last version id on branch merging into
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Merge {
    get { return merge_; }
    set {
      merge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "commitDate" field.</summary>
  public const int CommitDateFieldNumber = 5;
  private string commitDate_ = "";
  /// <summary>
  /// date version of the chart was committed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CommitDate {
    get { return commitDate_; }
    set {
      commitDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "commitBy" field.</summary>
  public const int CommitByFieldNumber = 6;
  private string commitBy_ = "";
  /// <summary>
  /// user that committed latest version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CommitBy {
    get { return commitBy_; }
    set {
      commitBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "commitDesc" field.</summary>
  public const int CommitDescFieldNumber = 7;
  private string commitDesc_ = "";
  /// <summary>
  /// short commit comment
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CommitDesc {
    get { return commitDesc_; }
    set {
      commitDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "commitNotes" field.</summary>
  public const int CommitNotesFieldNumber = 8;
  private string commitNotes_ = "";
  /// <summary>
  /// longer commit notes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CommitNotes {
    get { return commitNotes_; }
    set {
      commitNotes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Version != other.Version) return false;
    if (Branch != other.Branch) return false;
    if (Source != other.Source) return false;
    if (Merge != other.Merge) return false;
    if (CommitDate != other.CommitDate) return false;
    if (CommitBy != other.CommitBy) return false;
    if (CommitDesc != other.CommitDesc) return false;
    if (CommitNotes != other.CommitNotes) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Version.Length != 0) hash ^= Version.GetHashCode();
    if (Branch.Length != 0) hash ^= Branch.GetHashCode();
    if (Source.Length != 0) hash ^= Source.GetHashCode();
    if (Merge.Length != 0) hash ^= Merge.GetHashCode();
    if (CommitDate.Length != 0) hash ^= CommitDate.GetHashCode();
    if (CommitBy.Length != 0) hash ^= CommitBy.GetHashCode();
    if (CommitDesc.Length != 0) hash ^= CommitDesc.GetHashCode();
    if (CommitNotes.Length != 0) hash ^= CommitNotes.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Version.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Version);
    }
    if (Branch.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Branch);
    }
    if (Source.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Source);
    }
    if (Merge.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Merge);
    }
    if (CommitDate.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(CommitDate);
    }
    if (CommitBy.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(CommitBy);
    }
    if (CommitDesc.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(CommitDesc);
    }
    if (CommitNotes.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(CommitNotes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Version.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (Branch.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Branch);
    }
    if (Source.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
    }
    if (Merge.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Merge);
    }
    if (CommitDate.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitDate);
    }
    if (CommitBy.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitBy);
    }
    if (CommitDesc.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitDesc);
    }
    if (CommitNotes.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitNotes);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartHeader other) {
    if (other == null) {
      return;
    }
    if (other.Version.Length != 0) {
      Version = other.Version;
    }
    if (other.Branch.Length != 0) {
      Branch = other.Branch;
    }
    if (other.Source.Length != 0) {
      Source = other.Source;
    }
    if (other.Merge.Length != 0) {
      Merge = other.Merge;
    }
    if (other.CommitDate.Length != 0) {
      CommitDate = other.CommitDate;
    }
    if (other.CommitBy.Length != 0) {
      CommitBy = other.CommitBy;
    }
    if (other.CommitDesc.Length != 0) {
      CommitDesc = other.CommitDesc;
    }
    if (other.CommitNotes.Length != 0) {
      CommitNotes = other.CommitNotes;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Version = input.ReadString();
          break;
        }
        case 18: {
          Branch = input.ReadString();
          break;
        }
        case 26: {
          Source = input.ReadString();
          break;
        }
        case 34: {
          Merge = input.ReadString();
          break;
        }
        case 42: {
          CommitDate = input.ReadString();
          break;
        }
        case 50: {
          CommitBy = input.ReadString();
          break;
        }
        case 58: {
          CommitDesc = input.ReadString();
          break;
        }
        case 66: {
          CommitNotes = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TideChartFile : pb::IMessage<TideChartFile> {
  private static readonly pb::MessageParser<TideChartFile> _parser = new pb::MessageParser<TideChartFile>(() => new TideChartFile());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartFile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartFile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartFile(TideChartFile other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    path_ = other.path_;
    origin_ = other.origin_;
    modifiedDate_ = other.modifiedDate_;
    modifiedBy_ = other.modifiedBy_;
    chart_ = other.chart_ != null ? other.chart_.Clone() : null;
    working_ = other.working_.Clone();
    remote_ = other.remote_.Clone();
    history_ = other.history_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartFile Clone() {
    return new TideChartFile(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// unique id for this file
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  /// name for the file (virtual file system)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 3;
  private string path_ = "";
  /// <summary>
  /// path for the file (virtual file system)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "origin" field.</summary>
  public const int OriginFieldNumber = 4;
  private string origin_ = "";
  /// <summary>
  /// shared repository for tracking remote changes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Origin {
    get { return origin_; }
    set {
      origin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "modifiedDate" field.</summary>
  public const int ModifiedDateFieldNumber = 5;
  private string modifiedDate_ = "";
  /// <summary>
  /// date the file was last modified
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ModifiedDate {
    get { return modifiedDate_; }
    set {
      modifiedDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "modifiedBy" field.</summary>
  public const int ModifiedByFieldNumber = 6;
  private string modifiedBy_ = "";
  /// <summary>
  /// user that last modified the file
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ModifiedBy {
    get { return modifiedBy_; }
    set {
      modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chart" field.</summary>
  public const int ChartFieldNumber = 7;
  private global::TideChartData chart_;
  /// <summary>
  /// the last committed version of the chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartData Chart {
    get { return chart_; }
    set {
      chart_ = value;
    }
  }

  /// <summary>Field number for the "working" field.</summary>
  public const int WorkingFieldNumber = 8;
  private static readonly pb::FieldCodec<global::TideChartCommand> _repeated_working_codec
      = pb::FieldCodec.ForMessage(66, global::TideChartCommand.Parser);
  private readonly pbc::RepeatedField<global::TideChartCommand> working_ = new pbc::RepeatedField<global::TideChartCommand>();
  /// <summary>
  /// uncommitted local changes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartCommand> Working {
    get { return working_; }
  }

  /// <summary>Field number for the "remote" field.</summary>
  public const int RemoteFieldNumber = 9;
  private static readonly pb::FieldCodec<global::TideChartCommand> _repeated_remote_codec
      = pb::FieldCodec.ForMessage(74, global::TideChartCommand.Parser);
  private readonly pbc::RepeatedField<global::TideChartCommand> remote_ = new pbc::RepeatedField<global::TideChartCommand>();
  /// <summary>
  /// unmerged changes committed remotely
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartCommand> Remote {
    get { return remote_; }
  }

  /// <summary>Field number for the "history" field.</summary>
  public const int HistoryFieldNumber = 10;
  private static readonly pb::FieldCodec<global::TideChartData> _repeated_history_codec
      = pb::FieldCodec.ForMessage(82, global::TideChartData.Parser);
  private readonly pbc::RepeatedField<global::TideChartData> history_ = new pbc::RepeatedField<global::TideChartData>();
  /// <summary>
  /// previous saved versions of the chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TideChartData> History {
    get { return history_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartFile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartFile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Path != other.Path) return false;
    if (Origin != other.Origin) return false;
    if (ModifiedDate != other.ModifiedDate) return false;
    if (ModifiedBy != other.ModifiedBy) return false;
    if (!object.Equals(Chart, other.Chart)) return false;
    if(!working_.Equals(other.working_)) return false;
    if(!remote_.Equals(other.remote_)) return false;
    if(!history_.Equals(other.history_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    if (Origin.Length != 0) hash ^= Origin.GetHashCode();
    if (ModifiedDate.Length != 0) hash ^= ModifiedDate.GetHashCode();
    if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
    if (chart_ != null) hash ^= Chart.GetHashCode();
    hash ^= working_.GetHashCode();
    hash ^= remote_.GetHashCode();
    hash ^= history_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Path.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Path);
    }
    if (Origin.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Origin);
    }
    if (ModifiedDate.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ModifiedDate);
    }
    if (ModifiedBy.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(ModifiedBy);
    }
    if (chart_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Chart);
    }
    working_.WriteTo(output, _repeated_working_codec);
    remote_.WriteTo(output, _repeated_remote_codec);
    history_.WriteTo(output, _repeated_history_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    if (Origin.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Origin);
    }
    if (ModifiedDate.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModifiedDate);
    }
    if (ModifiedBy.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
    }
    if (chart_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chart);
    }
    size += working_.CalculateSize(_repeated_working_codec);
    size += remote_.CalculateSize(_repeated_remote_codec);
    size += history_.CalculateSize(_repeated_history_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartFile other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
    if (other.Origin.Length != 0) {
      Origin = other.Origin;
    }
    if (other.ModifiedDate.Length != 0) {
      ModifiedDate = other.ModifiedDate;
    }
    if (other.ModifiedBy.Length != 0) {
      ModifiedBy = other.ModifiedBy;
    }
    if (other.chart_ != null) {
      if (chart_ == null) {
        Chart = new global::TideChartData();
      }
      Chart.MergeFrom(other.Chart);
    }
    working_.Add(other.working_);
    remote_.Add(other.remote_);
    history_.Add(other.history_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Path = input.ReadString();
          break;
        }
        case 34: {
          Origin = input.ReadString();
          break;
        }
        case 42: {
          ModifiedDate = input.ReadString();
          break;
        }
        case 50: {
          ModifiedBy = input.ReadString();
          break;
        }
        case 58: {
          if (chart_ == null) {
            Chart = new global::TideChartData();
          }
          input.ReadMessage(Chart);
          break;
        }
        case 66: {
          working_.AddEntriesFrom(input, _repeated_working_codec);
          break;
        }
        case 74: {
          remote_.AddEntriesFrom(input, _repeated_remote_codec);
          break;
        }
        case 82: {
          history_.AddEntriesFrom(input, _repeated_history_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Read only the file header information
/// </summary>
public sealed partial class TideChartFileHeader : pb::IMessage<TideChartFileHeader> {
  private static readonly pb::MessageParser<TideChartFileHeader> _parser = new pb::MessageParser<TideChartFileHeader>(() => new TideChartFileHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartFileHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartFileHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartFileHeader(TideChartFileHeader other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    path_ = other.path_;
    origin_ = other.origin_;
    modifiedDate_ = other.modifiedDate_;
    modifiedBy_ = other.modifiedBy_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartFileHeader Clone() {
    return new TideChartFileHeader(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// unique id for this file
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  /// name for the file (virtual file system)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 3;
  private string path_ = "";
  /// <summary>
  /// path for the file (virtual file system)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "origin" field.</summary>
  public const int OriginFieldNumber = 4;
  private string origin_ = "";
  /// <summary>
  /// shared repository for tracking remote changes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Origin {
    get { return origin_; }
    set {
      origin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "modifiedDate" field.</summary>
  public const int ModifiedDateFieldNumber = 5;
  private string modifiedDate_ = "";
  /// <summary>
  /// date the file was last modified
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ModifiedDate {
    get { return modifiedDate_; }
    set {
      modifiedDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "modifiedBy" field.</summary>
  public const int ModifiedByFieldNumber = 6;
  private string modifiedBy_ = "";
  /// <summary>
  /// user that last modified the file
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ModifiedBy {
    get { return modifiedBy_; }
    set {
      modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartFileHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartFileHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Path != other.Path) return false;
    if (Origin != other.Origin) return false;
    if (ModifiedDate != other.ModifiedDate) return false;
    if (ModifiedBy != other.ModifiedBy) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    if (Origin.Length != 0) hash ^= Origin.GetHashCode();
    if (ModifiedDate.Length != 0) hash ^= ModifiedDate.GetHashCode();
    if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Path.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Path);
    }
    if (Origin.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Origin);
    }
    if (ModifiedDate.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ModifiedDate);
    }
    if (ModifiedBy.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(ModifiedBy);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    if (Origin.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Origin);
    }
    if (ModifiedDate.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModifiedDate);
    }
    if (ModifiedBy.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartFileHeader other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
    if (other.Origin.Length != 0) {
      Origin = other.Origin;
    }
    if (other.ModifiedDate.Length != 0) {
      ModifiedDate = other.ModifiedDate;
    }
    if (other.ModifiedBy.Length != 0) {
      ModifiedBy = other.ModifiedBy;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Path = input.ReadString();
          break;
        }
        case 34: {
          Origin = input.ReadString();
          break;
        }
        case 42: {
          ModifiedDate = input.ReadString();
          break;
        }
        case 50: {
          ModifiedBy = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Read only the current version
/// </summary>
public sealed partial class TideChartFileCurrent : pb::IMessage<TideChartFileCurrent> {
  private static readonly pb::MessageParser<TideChartFileCurrent> _parser = new pb::MessageParser<TideChartFileCurrent>(() => new TideChartFileCurrent());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TideChartFileCurrent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TideChartReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartFileCurrent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartFileCurrent(TideChartFileCurrent other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    path_ = other.path_;
    origin_ = other.origin_;
    modifiedDate_ = other.modifiedDate_;
    modifiedBy_ = other.modifiedBy_;
    chart_ = other.chart_ != null ? other.chart_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TideChartFileCurrent Clone() {
    return new TideChartFileCurrent(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// unique id for this file
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  /// name for the file (virtual file system)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 3;
  private string path_ = "";
  /// <summary>
  /// path for the file (virtual file system)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "origin" field.</summary>
  public const int OriginFieldNumber = 4;
  private string origin_ = "";
  /// <summary>
  /// shared repository for tracking remote changes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Origin {
    get { return origin_; }
    set {
      origin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "modifiedDate" field.</summary>
  public const int ModifiedDateFieldNumber = 5;
  private string modifiedDate_ = "";
  /// <summary>
  /// date the file was last modified
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ModifiedDate {
    get { return modifiedDate_; }
    set {
      modifiedDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "modifiedBy" field.</summary>
  public const int ModifiedByFieldNumber = 6;
  private string modifiedBy_ = "";
  /// <summary>
  /// user that last modified the file
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ModifiedBy {
    get { return modifiedBy_; }
    set {
      modifiedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chart" field.</summary>
  public const int ChartFieldNumber = 7;
  private global::TideChartData chart_;
  /// <summary>
  /// the last committed version of the chart
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TideChartData Chart {
    get { return chart_; }
    set {
      chart_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TideChartFileCurrent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TideChartFileCurrent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Path != other.Path) return false;
    if (Origin != other.Origin) return false;
    if (ModifiedDate != other.ModifiedDate) return false;
    if (ModifiedBy != other.ModifiedBy) return false;
    if (!object.Equals(Chart, other.Chart)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    if (Origin.Length != 0) hash ^= Origin.GetHashCode();
    if (ModifiedDate.Length != 0) hash ^= ModifiedDate.GetHashCode();
    if (ModifiedBy.Length != 0) hash ^= ModifiedBy.GetHashCode();
    if (chart_ != null) hash ^= Chart.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Path.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Path);
    }
    if (Origin.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Origin);
    }
    if (ModifiedDate.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ModifiedDate);
    }
    if (ModifiedBy.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(ModifiedBy);
    }
    if (chart_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Chart);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    if (Origin.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Origin);
    }
    if (ModifiedDate.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModifiedDate);
    }
    if (ModifiedBy.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModifiedBy);
    }
    if (chart_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chart);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TideChartFileCurrent other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
    if (other.Origin.Length != 0) {
      Origin = other.Origin;
    }
    if (other.ModifiedDate.Length != 0) {
      ModifiedDate = other.ModifiedDate;
    }
    if (other.ModifiedBy.Length != 0) {
      ModifiedBy = other.ModifiedBy;
    }
    if (other.chart_ != null) {
      if (chart_ == null) {
        Chart = new global::TideChartData();
      }
      Chart.MergeFrom(other.Chart);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Path = input.ReadString();
          break;
        }
        case 34: {
          Origin = input.ReadString();
          break;
        }
        case 42: {
          ModifiedDate = input.ReadString();
          break;
        }
        case 50: {
          ModifiedBy = input.ReadString();
          break;
        }
        case 58: {
          if (chart_ == null) {
            Chart = new global::TideChartData();
          }
          input.ReadMessage(Chart);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
